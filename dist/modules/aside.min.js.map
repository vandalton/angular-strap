{"version":3,"sources":["modules/aside.js"],"names":["angular","contentTemplate","provider","container","this","defaults","element","backdrop","keyboard","html","show","$get","AsideFactory","$aside","options","config","directive","extend","scope","restrict","$modal","link","isDefined","key","falseValueRegExp","forEach","bsKey","charAt","toUpperCase","slice","attr","test","$observe","newValue","oldValue","trustAsHtml","$eval","$watch","isObject","bsAside","aside","trigger","destroy","on","toggle","$on"],"mappings":"AAOA,YAEAA,SAGMC,OAAAA,wBAAiB,yBAAAC,SAAA,SAAA,WAFrB,GAGIC,GAAWC,KAAAC,UACXC,UAAS,0BACTC,YAAU,QACVC,YAAU,QACVC,UAAM,QACNC,YAAM,uBAFRT,iBAAiB,EAKjBG,WAAKO,EAEHL,QAASM,KAJXL,UAMQM,EALRL,UAQQM,EAPRL,MASII,EARJH,MAUI,EARNN,MAYIO,MAAOC,SAAAA,SAAAA,GAXT,QAASA,GAAaG,GAiBvBC,GAAAA,MAECF,EAAAd,QAAAiB,UAAAZ,EAAAU,EAEEG,OADAC,GAAUC,EAAAN,GAdZ,MAkBQA,OAhBTE,UAgBkCV,WAASA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GAf5C,OACEa,SAAU,MACVD,OAcIlB,EAbJqB,KAcM,SAAYC,EAAeC,EAAOT,EAAQS,GAb9C,GAAIT,IAiBFI,MAAIM,EACJxB,QAAQyB,EACNf,MAAIV,EAINA,SAAQyB,SAAS,WAAA,cAA0B,aAAA,eAA2B,kBAAUF,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,aAAAA,SAAAA,GAC1EG,QAAQJ,UAAOC,EAAII,MAAUC,EAAAA,GAAgBL,EAAIM,KAhBzD,IAkBMf,GAAeI,eAjBrBlB,SAAQyB,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASF,GACpEvB,QAAQsB,UAAUQ,EAAKP,KAASC,EAAiBO,KAAKD,EAAKP,MAAOT,EAAQS,IAAO,KAEvFvB,QAoBQ8B,SAAW,eAAA,SAAA,eAAA,UAAA,SAAAP,GAnBjB,GAoBIO,GAAKE,KAAST,EAAKI,OAAUM,GAAAA,cAAUC,EAAAA,MAAAA,EACrChB,SAAMK,UAAYY,EAAAA,MAnBtBrB,EAAQS,GAAOL,EAAMkB,MAAMN,EAAKJ,OAyBlC1B,QAAI8B,SAAc,QAAA,WAAA,SAAAP,GAChBL,EAAMmB,IACJP,EAAI9B,SAAQsC,EAAAA,SAASL,EAAWC,GAC9BlC,EAAAA,GAAQiB,EAAOC,YAAOe,OAlB1BH,EAsBGS,SArBLrB,EAAMmB,OAAOP,EAAKS,QAAS,SAASN,EAAUC,GAyB1CM,QAAQ3B,SAAOC,GAGnBR,QAAWwB,OAAKW,EAAWR,GAIrBO,EAAAA,QAAaE,IAEjBF,EA1BJ,IAAIA,GAAQ3B,EAAOC,EACnBR,GAAQqC,GAAGb,EAAKW,SAAW,QAASD,EAAMI,QAC1C1B,EAAM2B,IAAI,WAAY,WAChBL,GAAOA,EAAME,UACjB5B,EAAU,KACV0B,EAAQ","file":"aside.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"]}