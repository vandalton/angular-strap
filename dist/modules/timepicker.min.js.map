{"version":3,"sources":["modules/timepicker.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","length","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$get","$timepicker","$tooltip","element","extend","config","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","select","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","focus","_init","init","parentScope","floorMinutes","time","options","scope","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","controller","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","index","$moveIndex","value","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","$isBuilt","$render","keep","$timeout","Date","setHours","setMinutes","setSeconds","$setViewValue","copy","hide","midIndex","parseInt","hours","push","disabled","label","selected","i","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","$onMouseDown","evt","target","nodeName","stopPropagation","targetEl","triggerHandler","preventDefault","isTouch","$onKeyDown","test","keyCode","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","$digest","createTextRange","prop","attr","_destroy","destroy","off","_show","show","_hide","$element","blur","directive","$options","require","restrict","$window","navigator","userAgent","link","falseValueRegExp","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","forEach","key","isDefined","$eval","bsKey","timepicker","newValue","oldValue","isString","$watch","bsShow","match","dateParser","$dateParser","validateAgainstMinMaxTime","ngModel","update","timezoneOffsetAdjust","$formatters","modelValue","NaN","parse","$on"],"mappings":"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","file":"timepicker.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"]}