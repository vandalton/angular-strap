{"version":3,"sources":["modules/parse-options.js"],"names":["angular","module","options","config","$parseOptions","$values","regexp","match","this","$get","valueName","keyName","value","scope","locals","values","map","index","label","displayFn","valueFn","ParseOptionsFactory","groupByFn","valuesFn","$parse","$match","attr","when","isArray","controller","$q","then","displayValue","init"],"mappings":"AAOA,YAEAA,SAQQC,OAAIC,0CAAuCC,SAAAA,gBAAAA,WAPjD,GAQMC,GAAAA,KAAcC,UAPlBC,OAUQC,+KARVC,MAUMC,MAAIC,SAAAA,KAAAA,SAAAA,EAAAA,GATR,QAWQC,GAAAA,EAAAA,GAuBN,QAmBMC,GAAgBC,EAAOC,GAlB3B,MAmBIC,GAAAC,IAAA,SAAAT,EAAAU,GAlBF,GAkBwBL,GAAcK,EAA5BC,IAIZd,OAnBEU,GAAOJ,GAAaH,EACpBW,EAAQC,EAAUN,EAAOC,GACzBF,EAAQQ,EAAQP,EAAOC,IAkBzBI,MAAOd,EAfHQ,MAAOA,EAmBNS,MAAAA,KAnDL,GAAIC,MAEAF,EAAAA,QAAAA,UAAAA,EAAAA,EACJhB,GAAImB,UAEJnB,IAAAA,GACEA,EACAe,EACAT,EACAC,EACAW,EACAF,CA2BJ,OAvCAhB,GAaeoB,KAAOjB,WAZpBH,EAAcqB,OAASlB,EAAQmB,EAAKnB,MAAML,EAAQI,QAelDF,EAAcmB,EAAAA,EAAW,IAAAhB,EAAUM,IACjCH,EAAUiB,EAAKJ,IAASV,EAAAA,GAb1BF,EAeSX,EAAQ4B,GAdjBN,EAeMP,EAAAA,EAAAA,IAAAA,IAdNK,EAAUI,EAAOjB,EAAM,GAAKA,EAAM,GAAKG,GACvCa,EAeInB,EAAcC,EAAAA,KAbpBD,EAAcmB,SAAW,SAASV,EAAOgB,GACvC,MAAOC,GAAGH,KAAKJ,EAASV,EAAOgB,IAAaE,KAAK,SAAShB,GAKxD,MAYFX,SAAc4B,QAAAA,KACRnB,MAEJT,EAAOe,QAAUN,EAAAA,OAAAA,EAAAA,EAAAA,MAfVT,EAAcC,WAGzBD,EAmBUU,aAAAA,SAAAA,GAlBR,GAmBID,KAjBJ,OADAA,GAmBQD,GAAAA,EACJE,EAAOJ,IAFbN,EAAc6B,OACP7B,EAET,MAAOiB","file":"parse-options.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n"]}