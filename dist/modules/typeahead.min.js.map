{"version":3,"sources":["modules/typeahead.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","options","parentScope","scope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","extend","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","value","controller","$render","$emit","prefixEvent","onSelect","$setViewValue","length","isDefined","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","children","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","show","isUndefined","$element","element","hide","$onKeyDown","$$phase","TypeaheadFactory","array","then","$filter","expression","directive","results","postLink","attr","restrict","forEach","require","link","falseValueRegExp","key","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","replace","trim","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","isObject","destroy","$on"],"mappings":"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","file":"typeahead.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          // Navigate with keyboard\r\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"]}