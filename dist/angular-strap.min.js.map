{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","collapse/collapse.js","datepicker/datepicker.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","onSelect","$setViewValue","length","isDefined","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","show","isUndefined","$element","hide","$onKeyDown","$$phase","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","stopEventPropagation","unbindAutoCloseEvents","$body","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$promise","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","cancel","onBeforeShow","parent","after","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","blur","_blur","onBeforeHide","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","$root","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","$viewChangeListeners","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","modalElement","findFocusableElements","focusable","focusableElements","findNextFocusableElement","call","inReverse","prototype","reverse","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","returnFocus","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","nextFocusable","shiftKey","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","noop","indexOfCaseInsensitive","len","str","toString","strict","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","DateParserFactory","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","substr","today","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","bind","$registerTarget","action","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","toggleEvent","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"CAOA,SCIAA,EAAAA,EAAAC,GDHE,YAwkGA,SEjgGFC,GAAAC,EAAAD,EAAAA,EAAAA,EAAAA,EAAAA,GF2kGI,QEl+FJE,GAAAC,EAAAA,GFm+FM,MEl+FNC,SAAAC,SAAAC,GAAAA,GAAAA,iBAAAA,IFq+FI,QAASC,GAAcC,GACrB,MAAIC,GAAcD,GAAkBC,EAAcD,GG3pGxDE,EAAAF,GAAAG,EAAAC,IAAAJ,GAIAK,MAAAA,IACAC,KAAAA,SAAAR,GACAS,MAAAA,GAAAC,OHukGIC,KEjgGJC,QAAAV,SAAAP,GACAkB,EAAAA,UAAAlB,UAAAkB,KAAAA,EAAAA,YACAC,QAAAC,KAAAA,oGACApB,EAAAqB,YAAAA,EAAAA,SACArB,EAAAsB,SAAAA,GAEA,IAAAC,GAAAA,EAAAvB,YAKAwB,EAAAC,EAAAJ,UAAAK,GACAR,EAAAS,EAAAD,WACAL,EAAAO,EAAAA,aF8/FUP,EE7/FVrB,EAAAqB,YACAA,EAAAQ,EAAAD,WF8/FUE,EAAoB9B,EAAQ8B,mBAAqBN,QAAQO,SACzDR,EAAmBvB,EAAQuB,gBEh/FrC,IAVAC,QAAAQ,QAAAX,EAAAC,SAAAA,EAAAA,GAEAf,QAAAoB,SAAAD,GACAL,EAAAY,GAAAA,EAAAC,IAAA3B,GAEAc,EAAAY,GAAAA,EAAA3B,OAAAP,KF6/FMyB,QAAQQ,OAAOX,EAASC,GEx/F9BtB,EACAqB,EAAAY,UAAAE,EAAAC,KAAAA,OAEA,CAAA,IAAAC,EF2/FQ,KAAM,IAAIC,OAAM,6CAFhBjB,GEx/FRkB,UAAAjC,EAAAP,GF2gGM,MEpgGNC,GAAAwC,gBAEAnB,EAAAY,UAAAE,EAAAC,KAAAf,EAAAY,UAAA3B,EAAAN,EAAAwC,iBAAAA,KACArC,SAAAsC,GACA,GAAAJ,GAAAb,QAAApB,QAAAqC,EAAA,GAKA,OAJAF,GAAAG,oBAAAL,EAAA,IAAAM,WAAAN,WACAM,KAAAA,EAAA,IAGA3C,EAAAD,GAAAA,aFm/FUC,EAAQwC,kBE7+FlBnB,EAAAe,UAAAf,EAAAlB,KAAAkB,EAAAC,UAAAA,EAAAA,EAAAA,mBAAAA,KAAAA,SAAAA,GAEA,GAAAf,GAAAuB,QAAAA,QAAAR,EAAAW,IACAjC,EAAAuC,EAAA,sBAAAF,EAAA,IAAAM,WAAA,WAAAC,KAAAH,EAAA,GF++FU,OE9+FVlC,GAAAA,aAAAsC,EAAAC,OAAAC,SF8+FiBV,EAAW,GAAGW,aEv+F/Bb,EAAAC,IAAAf,GAAAlB,KAAA,SAAAmB,GF2+FQ,GE1+FRA,GAAAA,EAAAA,EAAAA,UACAlB,GAAAA,OACA6C,EAAA1C,EAAA2C,QAAAA,cAAAA,kBF4+FQ,IEx+FR9C,GAAAc,QAAAd,QAAA,SAAAwC,KAAArC,EAAA4C,QAAAC,WFy+FYC,EEx+FZC,EAAAA,EFy+FQ,QACEhC,OEx+FVE,EFy+FUpB,QAASA,EACT6C,KEv+FV,SAAAzB,GFy+FY,GADAF,EEt+FZlB,OAAA8C,EACA9C,EAAAmD,CAEA,GAAAnC,GAAAA,EAAAF,EAAAI,GAAA,EACA4B,IFs+FgB1B,QAAQQ,OAAOsB,EAAWE,SAAUlC,EEl+FpD,IAAAmC,GAAAJ,QAAAK,SAAAC,GAAAA,EAAAA,GFq+FcvD,GAAQW,KAAK,0BAA2B0C,GACxCrD,EAAQmD,WAAWxC,KAAK,0BAA2B0C,GAC/CrC,IACF8B,EAAM9B,GAAgBqC,GAG1B,MAAOJ,GAAOO,MAAM,KAAMD,eAQlC,IAAInD,MAppGNqD,ECIFC,SAAA,KAAA,QAAA,YAAA,WAAA,cAAA,kBDHEtC,QCIFuC,OAAA,4BAAA,yBAAA,wCAAAC,SAAA,aAAA,WDHI,GCIJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,YACAuB,YAAA,aACAC,UAAA,cACAC,YAAA,+BACAC,QAAA,QACAC,WAAAA,EACAC,UAAAA,EACAC,MAAAA,EDHMN,MAAO,ECMbnD,UAAA0D,EAEAL,OAAA,gBDLMC,MCONK,EDNMJ,YCSNvE,EDRMwE,WCUNG,GDTMF,WCUNG,EDRI5D,MCWJkC,MAAA2B,UAAAA,aAAA,WAAA,QAAA,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GDVM,QCWNhC,GAAAiC,EAAAA,EAAAA,GDVQ,GCWRjC,MDVYlD,EAAUwB,QAAQQ,UAAWpB,EAAUwE,ECYnDlC,GAAA2B,EAAAA,EAAAA,EAEA3B,IAAAA,GAAAkC,EAAAlC,MACAA,EAAAmC,EAAAC,MDXQpC,GCYRyB,cAAAY,WDXUrC,EAAMiC,YACNjC,EAAMsC,aAAexF,EAAQuE,WAAa,MAE5CrB,ECaRA,gBDZQA,ECaRyB,UAAAc,SAAAC,GDZUxC,EAAMmC,aAAa,WACjBV,EAAWY,SAASG,MAGxBxC,EAAMyC,QAAU,SAASD,EAAOE,GCkBxCjB,EAAAA,aAAA,WACAzB,EAAAiC,OAAAU,MDdQ3C,EAAM4C,WAAa,WCqB3BC,MAAAA,GAAA7C,cDlBQyB,EAAWqB,OAAS,SAASH,GCsBrClB,EAAAA,SAAAY,EACArC,EAAAsC,cAAAE,EAAAA,SDpBYxC,EAAMsC,aAAexF,EAAQuE,WAAa,MCwBtDwB,EAAAL,GACAT,EAAAvD,EAAAwB,kBDpBQyB,ECuBRzD,SAAA+E,SAAAA,GACA/C,EAAA2B,aAAAA,GDrBQF,ECwBRuB,OAAAlG,SAAAH,GACA,GAAA2B,OAAA,CDvBU,GCwBVxB,GAAAmG,EAAAA,SAAAT,GAAAf,KDvBUzD,GAAWkF,cAAc1E,GACzBR,EAAW+E,UC4BrBtB,EAAAA,gBACAC,GAAAR,EAAAlD,UD1BUgC,EC2BVgD,MAAAhD,EAAAiC,YAAAkB,UAAAA,EAAAA,EAAAA,GD1Bc7E,QAAQ8E,UAAUtG,EAAQmG,WAAa3E,QAAQ+E,WAAWvG,EAAQmG,WC6BhFnG,EAAAkD,SAAAiC,EAAAkB,EAAA7E,KDzBQmD,EC6BRe,WAAAA,WACA,MAAAA,GAAAxC,WAAAiC,EAGAO,EAAAA,SAAAA,QAAAA,QAAAA,SAAAA,EAAAA,aAAAA,EAAAA,WAAAA,QAAAA,EAAAA,YAFAlE,EAAAgF,SAAAtD,QAKAyB,EAAA8B,UAAAA,SAAA/E,GAEAkE,GAAAc,EACAd,KAAAe,EAAAA,EAAAA,SAAAA,OAAAA,MD9BgBnF,QAAQgF,OAAOtD,EAAMiC,SAASO,GAAOhE,MAAOA,KCkC5D,MAAAgE,ID9BQf,ECgCRiC,aAAAC,SAAAC,GD/BUlB,ECgCVc,iBD/BUd,ECgCVe,mBD9BQhC,ECkCRoC,kBAAAC,SAAAA,EAAAJ,GDjCU,GCkCV3C,MAAAgD,EAAAC,EAAA3D,SAAAU,OAAAgD,CDjCY,GAAIJ,GCkChBE,EAAAA,SAAAI,GAEAlD,EAAAgD,EAAAA,UDlCgBF,EAAeF,EAAOC,UAAYD,EAAOO,aACzCJ,EAAgB/C,EAAUgD,UAC1BE,EAAelD,EAAUgD,UAAYhD,EAAUmD,YCqC/DzC,IAAAqC,GAAApB,EAAAA,EACA3B,EAAAgD,UAAArB,KAAAyB,IAAAA,EAAApD,EAAAgD,UAAAhD,EAAAmD,cAGAzC,EAAAmB,IACAF,EAAAc,UAAAA,KDlCQ/B,ECwCRA,WAAAzB,SAAAsC,GDvCe,aCyCf6B,KAAAA,EAAAA,YACAnE,EAAAsC,cAAAA,KAAAA,EAAAA,SAAAA,EAAAA,oBDxCYI,EAAIc,iBC0ChBxD,EAAAA,mBAEAsC,KAAAtC,EAAAsC,SAAAtC,EAAAiC,SAAAkB,ODxCY1B,EAAWc,OAAOvC,EAAMsC,cC4CpC8B,KAAAA,EAAAA,SAAA3C,EAAAA,aAAAzB,EACAA,EAAAqE,eD1CqC,KAAhB3B,EAAIyB,SAAkBnE,EAAMsC,aAAetC,EAAMiC,SAASkB,OAAS,EC+CxFmB,EAAAA,eACAA,QAAAC,YAAAvE,EAAAsC,gBACAgC,EAAAA,aAAAA,GD5CU7C,ECgDVA,kBAAAA,EAAA+C,SAAA,GAAAxE,EAAAsC,cD/CUtC,ECgDVyB,WD9CQ,IAAI6C,GCgDZ7C,EAAAvE,ID/CQuE,GAAW6C,KAAO,WAChBA,IACAtC,ECgDV,WD/CgBP,EAAW+C,WCkD3BC,EAAAhD,SAAAgD,GAAAA,YAAAA,EAAAA,cACAhD,EAAAT,UACAS,GAAA+C,EAAA/C,GAAAA,UAAA+C,EAAAE,cD9Ca,GAAG,GAER,ICiDRjD,GAAAA,EAAAY,IDtCQ,OAVAZ,GAAWgD,KAAO,WCkD1BA,EAAAA,UAAAA,EAAAA,SAAAA,IAAAA,YAAAA,EAAAA,cDhDc3H,EAAQkE,UCmDtBS,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAMAoB,EAAAA,YAEA7C,EAAA2E,aAIAC,KDvDenD,EC+Df,QAAAoB,GAAAgC,GACA7E,EAAA6E,SAAAvG,EAAA+E,OAAAwB,EAAA5H,MAAA0H,SAAA3E,EAAAqE,UD1DM,MADAO,GC6DNE,SAAApH,ED5DakH,MAERzD,OC6DL,iBAAA0D,UAAAE,SAAAzD,GD5DI,MAAO,UAASuD,EAAOE,EAAYzD,GACjC,MC+DN0D,IAAA1G,QAAA+E,WAAAwB,EAAA5H,MAEAS,EAAA+D,KAAAA,SAAA/D,GAEA,MAAAoH,GAAA,UAAAG,EAAAF,EAAAzD,KAGAwD,EAAAI,UAAAlF,EAAA9C,EAAAiI,OD/DOH,UCuEPlI,eAAAA,UAAAA,SAAAA,KAAAA,aAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GDtEI,GAAIY,GCuERsC,EAAAA,QDtEI,QACEoF,SCuEN7G,MDtEM8G,QCuEN/G,UDtEMyB,KAAM,SAAkBC,EAAO9C,EAASiI,EAAMnH,GC0EpDd,EAAAoI,IAAAA,SACAhH,IAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAA,YAAAI,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,SAAAA,QAAAA,YAAAA,eAAAA,aAAAA,aAAAA,aAAAA,KAAAA,cAAAA,eAAAA,SAAAA,GACA4G,QAAAnC,UAAAzE,EAAA6G,MAAAC,EAAAA,GAAA9G,EAAA+G,KDzEQ,IC2ER5I,GAAAkD,eD1EQ1B,SAAQC,SAAU,OAAQ,YAAa,YAAa,UAAY,SAASI,GACnEL,QAAQ8E,UAAU+B,EAAKxG,KAAS2G,EAAiBK,KAAKR,EAAKxG,MAAO7B,EAAQ6B,IAAO,KCiF/FL,QAAA6C,SAAA7C,eAAAxB,SAAAqE,eAAAA,SAAAzD,YAAAyD,SAAAA,GACA,GAAAC,GAAAtE,KAAAsE,EAAAA,OAAA1D,GAAAA,cAAA0D,EAAAA,MAAAA,EACAE,SAAAA,UAAAxE,EAAAwE,MAEAsE,EAAAA,GAAAT,EAAAS,MAAAA,EAAAA,OAGA1I,EAAAoE,KAAAsE,iBAAA1I,EAAAoE,KAAAA,eAAAA,MD/EQ,IAAIH,GAAS7C,QAAQ8E,UAAUtG,EAAQqE,QAAUrE,EAAQqE,OAASzD,EAASyD,OCiFnFC,EAAAwE,EAAAA,OAAAlI,EAAA0D,MACAyE,EAAAA,EAAAC,YAAAF,EAAAA,WAGAG,EAAAtE,EAAAA,SAGA3E,KAEA8I,GAAAI,MAAAH,EAAAA,cACA7F,IAAAiG,GAAAD,IAAAA,IDnFY5E,ICsFZ2E,GAAAG,cAAAA,EDrFQ,IAAIL,GCsFZ9C,EAAAA,GDrFYgD,EAAYtE,EAAWvE,EAASc,EAAYlB,EAChD,IAAIA,EAAQqJ,aAAc,CACxB,GAAIH,GAAiBH,EAAcO,OAAO,GAAGzG,QAAQ,OAAQ,IAAIA,QAAQ,UAAW,IAAIM,MCyFlGD,GAAAqG,iBAAAC,EAAAC,SAAAC,EAAAA,GAEAxG,EAAAyG,SAAAF,EAAAA,GAAAA,KAAAA,SAAAA,GACAV,EAAAa,OAAAA,GAIA1I,EAAA2I,cDxFQ3G,EC4FRqG,OAAAH,EAAA/C,QAAA/B,SAAA8E,EAAAA,GD3FUlG,EC4FV+F,YAAAG,ED3FUL,EC6FV9C,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GD5FY,MAAIjG,GAAQ6J,aAAeT,EAAO/C,QAAUoD,EAASpD,OAAS,MAC5DnF,GAAWkF,cAAclF,EAAW4I,WAAWC,UAAU,EAAG7I,EAAW4I,WAAWzD,OAAS,KCqGzG2D,EAAAA,OAAA1F,IAAA8E,EAAAA,EAAAR,MAAA,EAAAtE,IACA2E,EAAAe,OAAAA,ODjGY9I,GAAW+E,eAGf/E,EAAW+I,YAAYC,KAAK,SAASC,GCsG7C,GAAAH,GAAAjB,EAAAiB,aAAAG,EDpGU,OAAIH,GCwGd/D,EAGAzE,QAAApB,UAAA+J,IAAA,gBAAAA,GDvGmBA,EC0GnBC,KDtGQlJ,ECwGRQ,QAAA0I,WACA,GAAAC,EAAAjK,SAAAkK,EAAAA,YACA,MAAAlK,GAAAmK,IAAAC,GAEApK,IAAAA,GAAAqK,EAAAA,UAAAJ,EAAAK,aDvGcN,EAAW1E,OAAeuD,EAAU3D,OAAOH,SAASO,GAAOiF,MAAQzJ,EAAW4I,UC2G5F5G,GAAA1B,QAAAkC,SAAA0G,GAAArB,EAAAiB,aAAAI,GAAAA,CACA,IAAAnB,GAAAA,EAAAA,EAAA2B,WAAAA,QAAAA,iBAAAA,IAAAA,GACA5K,EAAAA,EAAA,GAAAsK,eACArB,EAAAA,EAAA,GAAAuB,YDzGUpK,GAAQmK,IAAIvK,EAAQyE,aAAc,EAAQ/C,EAAQA,EAAMyB,QACxD/C,EAAQ,GAAGqK,kBAAkBJ,EAAIK,IAEnCxH,EAAM2H,IAAI,WAAY,WIjP9BpK,GAAAwI,EAAA2B,UAIAhK,EAAAI,KACAH,EAAA,YJoPEW,QI/OFsJ,OAAA,0BAAA,sBAAA,sCAAA9G,SAAA,WAAA,WJgPI,GI/OJ+G,GAAA/J,KAAAJ,UACAb,UAAAA,UACAQ,YAAA,GACAyK,YAAAA,UACAjH,YAAA,UACAG,WAAA,EACAtB,QAAA,EACA4E,UAAA,MACAyD,YAAA,2BACAC,SAAA,GACA/G,eAAA,EACAgH,QAAAA,cACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,MAAAA,GJgPML,KI/ONM,GJgPMrH,MI/ONsH,EJgPMN,WAAW,EACXC,WAAW,EI7OjBpK,yBAAA,EAEAsK,0BAAA,EACAC,UACAC,SAAAhK,OAEAiK,QAAAC,GJ+OI1K,MIzOJ0D,MAAAiH,UAAA3G,aAAA4G,cAAA3K,KAAAjB,iBAAAA,QAAAA,WAAAA,OAAAA,aAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJ6OM,QIxON6L,GAAA1H,EAAA0H,GJoYQ,QIrKRC,KACAC,EAAAA,MAAAA,EAAAlM,YAAA,QAAAmF,GACAxD,QAAAxB,UAAAmE,EAAAnE,SAAA2H,QAAApB,WAAAvG,EAAAgM,SACAhM,EAAAgF,OAAAA,GJkNQ,QI9IRiH,KAQAjH,GJuIU9B,EAAMgD,MAAMlG,EAAQH,YAAc,QAASmF,GI3IrDkH,QAAAA,UAAAA,EAAAA,SAAAA,QAAAA,WAAAA,EAAAA,SJ6IYlM,EAAQmM,OAAOnH,GIzI3BA,IAAAoH,EAAAxG,CACA,GAAAA,GAAA,UAAA5F,EAAA+D,QAAA6B,MAAAc,GAAAA,GAAAA,MACAwF,MJ2NQ,QInHR9L,KJoHU,GInHViM,GAAAC,EAAAvI,QAAA8H,MAAA9H,IJoHUvC,SInHVpB,QAAAmM,EAAAC,SAAAzI,GJoH4B,UAAZA,GAAmC,gBAAZA,EACzB3D,EAAQmM,GAAGxI,EAASiB,EAASyH,QACR,WAAZ1I,IACT3D,EAAQmM,GAAe,UAAZxI,EAAsB,aAAe,QAASiB,EAAS0H,OIjHhFtM,EAAAuM,GAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACA3M,WAAAqM,GAAA,UAAAR,GACAzL,EAAAiM,GAAAA,EAAAhG,aAAA,YAAArB,EAAA4H,6BJuHQ,QIlHRxM,KJoHU,IIlHV,GADAA,GAAAyM,EAAA9I,QAAA8H,MAAA,KACAS,EAAAA,EAAAjG,OAAAyG,KAAA/I,CJmHY,GIlHZ3D,GAAAyM,EAAAL,EJmH4B,WAAZzI,GAAmC,gBAAZA,EACzB3D,EAAQyM,IAAI9I,EAASiB,EAASyH,QACT,WAAZ1I,IACT3D,EAAQyM,IAAgB,UAAZ9I,EAAsB,aAAe,QAASiB,EAAS0H,OIhHjFtM,EAAA2M,IAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACAhJ,WAAA/D,GAAA,UAAA+D,GACAiJ,EAAAT,IAAAC,EAAAxH,aAAAiI,YAAAA,EAAAA,4BAMA,QAAAC,KACA,UAAAlN,EAAA+D,QACAiJ,EAAAH,GAAAA,QAAA7H,EAAAA,UAEA5E,EAAAyM,GAAAA,QAAA7H,EAAAA,eAIA,QAAAmI,KACAC,UAAApN,EAAAoN,QAGAlI,EAAA2H,IAAA,QAAA7H,EAAAiI,UJ+GY7M,EI5GZ4M,IAAAA,QAAAhI,EAAAqI,eJgHQ,QIzGRD,KJ0GUlI,EAAS,WIvGnBoI,OAAAN,GACAG,EAAAA,GAAAA,QAAAA,GAEAI,EAAAV,GAAAA,QAAA7H,EAAAA,MACAmI,GAAA,GJyGa,GAAG,GIrGhB,QAAAE,KACAG,IJwGYR,EAAWH,IAAI,QAASQ,GInGpCE,EAAAE,IAAAA,QAAA/F,EAAAA,MACAA,GAAA1H,GJuGQ,QIlGR0N,GAAAC,GACAH,EAAAI,kBJoGQ,QI7FRC,GAAAA,GJ8FUnG,EAAWA,GAAa1H,EAAQ8K,QAAU1K,CI1FpD,IAAAwN,GAAAE,EAAAA,GAEAF,EAAAA,SAAApM,EAAAA,QAAAsM,EAAAJ,EAAAA,wBAAAK,IJ6FU,KAAK,GAAIF,KAAKH,GACZE,EAAKC,GAAKH,EAAOG,EI5F7B,QAAAG,EAAAF,QAAAG,EAAAzM,QAAAQ,UAAA4L,GAAAM,MAAAA,EAAAC,MAAAC,EAAAA,KACAC,OAAAA,EAAAA,OAAAA,EAAAA,MACA,IAAAC,GAAAA,GAAAR,IAAAA,EAAAC,KAAAA,GAAAG,EAAAC,OAAAC,GAEAC,GJqGYA,OAAQE,EAASC,EAASC,gBAAgBxH,WAAauH,EAASE,KAAKzH,UAAYS,EAASiH,KAAK,cAAgB,GIjG3HR,EAAAA,GACAL,MAAAjC,EAAAd,gBAAA6D,YAEAb,OAAAlC,EAAAgD,aACA,IJmGU,OIlGVV,SAAAA,UAAAA,EAAAA,EAAAA,EAAAA,GJoGQ,QIlGRF,GAAAa,EAAAhB,EAAAA,EAAAA,GJmGU,GAAIK,GIjGdtC,EAAAd,EAAAc,MAAA,IJmGU,QAAQA,EAAM,IIlGxB,IAAA,QACAsC,GACAH,IAAAc,EAAAd,IAAAc,EAAAf,OAAAA,EAAAA,EAAAA,EACAE,KAAAa,EAAAb,KAAAa,EAAAhB,MAEA,MACA,KAAA,SACAK,GACAH,IAAAc,EAAAd,IAAAc,EAAAf,OACAE,KAAAa,EAAAb,KAAAc,EAAAA,MAAAA,EAAAA,EAAAA,EAEA,MACA,KAAA,OACAZ,GACAH,IAAAc,EAAAd,IAAAgB,EAAAA,OAAAA,EAAAA,EAAAA,EACAf,KAAAa,EAAAb,KAAAa,EAEA,MAGA,SACAX,GJqGcH,IAAKc,EAASd,IAAMgB,EIjGlCnD,KAAAiD,EAAAb,KAAApC,EAAAiC,MAAA,EAAAiB,EAAA,GJsGU,IIlGVlD,EAAA,GJmGY,MAAOsC,EAET,IInGVF,QAAAE,EAAAA,IAAAW,WAAAA,EAAAb,GJoGY,OInGZpC,EAAA,IJoGa,IAAK,OInGlBsC,EAAAF,KAAAa,EAAAb,IACA,MJsGa,KIpGb,QACAE,EAAAtC,KAAAiD,EAAAb,KAAAa,EAAAhB,MAAAiB,MAKAZ,IAAAW,SAAAd,EAAAc,IAAAd,UAAAA,EAAAA,GJsGY,OIrGZnC,EAAA,IJsGa,IAAK,MIrGlBsC,EAAAH,IAAAc,EAAAd,IAAAgB,EAAAF,EAAAf,MACA,MJwGa,KAAK,SIpGlBI,EAAAA,IAAAA,EAAAA,IAUA,MAAAc,GJoGQ,QIhGRC,GAAAD,EAAAA,GAEAd,GAAAA,GAAAH,EAAAA,GACAG,EAAAF,EAAAE,YAIAD,EAAAiB,EAAAA,aACAC,EAAAC,SAAAC,EAAAA,IAAAA,EAAAA,cAAAA,IACAtC,EAAAuC,SAAAA,EAAAA,IAAAA,EAAAA,eAAAA,GJ6FcL,OI5FdlB,KAAAsB,EAAAtB,GJ6FckB,MI5FdjB,KAAAqB,EAAArB,GJ6FUE,EI5FVqB,IAAArB,EAAAH,IAAAyB,EJ6FUtB,EAAOF,KAAOE,EAAOF,KAAOgB,EAC5Bf,EAAWiB,UAAUO,EAAKlO,QAAQQ,QAChCoN,MI5FZjB,SAAAmB,GAGAP,EAAAA,KACAC,IAAAA,KAAAA,MAAAU,EAAAC,KAAAA,KAEA5E,KAAAA,KAAAA,MAAAuE,EAAAN,MAAAA,KACAb,MAAAH,OAOAG,GAAAyB,EAEA,IAAAC,GAAAH,EAAAI,YACA3B,EAAA0B,EAAA5B,YAKAC,IAJA,QJoFcnD,GIpFdiE,IAAAjB,IACAI,EAAAH,IAAAA,EAAAA,IAAAA,EAAAA,IAGAE,8CAAAC,KAAAA,GAAAD,CAEA,GAAA2B,GAAAD,EAAA7E,EAAAoD,EAAAY,EAAAC,EAUA,IATAa,EAAAE,KACA5B,EAAA6B,MAAAA,EAAAD,KAGAE,EAAAA,KAAAD,EAAAA,IJmFU9B,EAAWiB,UAAUO,EAAKvB,GI9EpC,wBAAAyB,KAAA7E,GAAA+D,CACA,GAAAe,GAAAA,aAAAA,KAAAA,GAAA7B,EAAA+B,EAAA,EAAAF,EAAA5B,KAAAH,EAAAiB,EAAA,EAAAc,EAAA7B,IAAAD,EAAAiB,EAAAf,EAAA8B,EAAA,cAAA,cJkFYE,GAAaD,EAAYN,EAAIQ,GAAsBH,KAGvD,QIjFRI,GAAA1C,EAAAzI,EAAAoL,EAAAA,GAEA,GAAAP,IACA7B,IAAAqC,EACApC,KAAAqC,EJkFU,KIhFVT,EAAA7B,UAAAmC,MAAAA,EJiFU,IAAII,GIhFdD,EAAAA,UAAAH,EAAAA,SAAAA,SAAAA,EACAN,EAAAM,EAAAnC,EAAAmC,UJiFU,IAAI,aAAatH,KAAKkC,GAAY,CAChC,GAAIsF,GIhFhBvB,EAAAd,IAAAuC,EAAAJ,EAAA9B,OACAmC,EAAA1B,EAAAb,IAAAsC,EAAAA,EAAAA,OAAAA,CACAE,GAAAA,EAAAF,IACAV,EAAAW,IAAAA,EAAAL,IAAAA,EACAlC,EAAAkC,EAAAK,IAAAA,EAAAA,SJiFcX,EIhFd7B,IAAAyC,EAAAN,IAAAA,EAAApC,OAAAuC,OJkFiB,CACL,GAAIE,GAAiB1B,EAASb,KAAOsC,EI9EjDE,EAAAZ,EAAAA,KAAAA,EAAAA,CJgFgBW,GAAiBL,EAAmBlC,KI7EpD4B,EAAAI,KAAAA,EAAAS,KAAAC,EACApO,EAAA4N,EAAAX,QAEAoB,EAAArB,KAAAoB,EAAA1C,KAAAkC,EAAAO,MAAAA,GAMA5E,MAAAA,GJ4EQ,QIzER9L,GAAAmL,EAAAuF,EAAAC,GJ0EU,GIzEVrD,GAAAA,EAAAA,yBAAAA,EAAAA,GJ0EUsD,GAAOrB,IAAIoB,EAAe,OAAS,MAAO,IAAM,EAAId,EAAQa,GAAa,KAAKnB,IAAIoB,EAAe,MAAQ,OAAQ,IAEnH,QIxERzD,KJyEUpB,aAAa+E,GACT7L,EAAS8L,UAA2B,OAAf9D,IItEnC+D,EAAA5F,WACA4F,IJyEgB/Q,EAAQkE,UIrExB8I,KJyEc+D,IACFA,EAASC,WIpErBD,EAAA/L,MAMAgI,IAEA9J,EAAA2E,SJiEYmF,EAAahI,EAAS0C,SAAW,MAnhBrC,GIxOR1H,MAAAwH,EAAAqE,EAAAoF,SAAAzP,QAAAQ,UAAApB,EAAAwE,GAAAuC,EAAAkE,EAAAqF,SAAAtF,EAAA3K,QAAAjB,GJ2OYkD,EI3OZ8B,EAAAM,OAAAtF,EAAAkD,OAAAlD,EAAAkD,MAAAiO,QAAApM,EAAAoM,OJ4OY7E,EAAWlM,EAAQ,GAAGkM,SAAS8E,aItO3CpM,IAAAA,EAAAqM,OAAArR,QAAAI,SAAAiI,EAAAlE,OAAA,CAGA,GAAAnE,GAAAiL,EAAA9G,MAAA0H,MAAA,KAAAyF,IAAAC,WACArO,GAAA+H,MAAAuG,EAAAC,OAAAzR,GJsOYwH,KAAMqE,EAAM,GIlOxB3I,KAAAwO,EAAAA,IACAxO,EAAAmC,GJqOQL,EAASqM,IAAMrR,EAAQ2R,IAAMvR,EAAQiI,KAAK,OAAS,GAC/CrI,EAAQiL,QIlOpB/H,EAAA0O,MAAAJ,EAAAC,YAAAzR,EAAAiL,QJqOQ/H,EInOR8B,YAAA2C,SAAAA,GJoOUzE,EAAMmC,aAAa,WACjBL,EAAS6M,WAAWC,MAGxB5O,EInOR8B,MAAAwC,WJoOUtE,EAAMmC,aAAa,WACjBL,EAAS2C,UAGbzE,EInOR8B,MAAAyH,WJoOUvJ,EAAMmC,aAAa,WACjBL,EAASwC,UI7NrBtE,EAAA6I,QAAAA,WAGA7I,EAAA6O,aAAAA,WACA/E,EAAAA,YAGArB,EAAAxL,SAAA+C,EAAAnC,UAAAA,CJ+NQ,II9NRgR,GACA/M,EJ+NY+M,EI5NZ/M,EAGAgN,EACAhS,CJ4NQ2L,GI3NRnE,KAAAxH,SAAAmE,GJ4NU4N,EI3NV/R,EJ4NUgF,EAASiN,SAEXjN,EIpNRhF,KAAAiE,WACA+N,EAAAA,OAAA5R,QAAAA,SAAAA,EAAAA,SJqNYJ,EIpNZmE,OACA6N,KAAAA,EAAAhS,MJqNc2H,KIpNd3H,EAAAA,QAKAkS,SAAAA,EAAAA,UAGAF,EAAAlH,EACAA,QAAAtJ,UAAA2Q,EAAAnS,WJiNYgS,EAAehS,EAAQiE,UI7MnCjE,EAAAiE,YACAf,EAAAmC,EAAArF,EAAAiE,YJgNUiO,IACIlS,EI9Md8K,SJ+MY9K,EI9MZgF,OAAAwC,QAAAA,UAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,EAAAA,SJgNcxH,EAAQwH,MACVtE,EAAMmC,aAAa,WACO,UAApBrF,EAAQ+D,QI3M1BiB,EAAA4F,GAAAwH,QAMAlG,EAAAA,UJ6MQlH,EInMR+G,QAAA,WACAY,IJoMUT,IACAhJ,EAAM8N,YAERhM,EIlMR+G,MAAAA,WAKA/G,MJ8LU8G,cIlMV3H,GJmMU4H,EAAa,KI/LvB/G,EAAAwC,OAAAxH,EAAAmE,MAAAqD,UAIAqJ,EAAAwB,WAAA,WAEA/L,OAAA9E,GAAAxB,EAAAsS,QACAD,EAAArS,MAAAA,OANAA,EAAAoL,QJsMQpG,EI7LRqN,KAAA,WJ8LU,GI7LVrS,EAAAoL,YAAApG,EAAA8L,SJ6LU,CACA5N,EAAMgD,MAAMlG,EAAQH,YAAc,eAAgBmF,EI3L5D,IAAAuN,IAAAA,CJgMU,II/LVC,QAAAA,UAAAA,EAAAA,eAAAA,QAAAA,WAAAA,EAAAA,gBACAH,EAAArS,EAAAiE,aAAAe,KAEAqN,EJ4LU,CAGA,GI5LVG,GJ6LcA,CACAxS,GI5LdiE,WACAsO,EAAAP,EJ8LcQ,EI7LdA,EAAApS,GAAAA,UJ6LsBoB,QAAQpB,QAAQ4R,EAAa,GAAGS,WItLtDzN,OAKAgJ,EAAA,KAAAC,EAAA7N,GAAAsS,GAAAxG,IJ0LU6E,EI1LV4B,EAAArN,OAAA6L,OJ2LUnE,EAAahI,EAAS0C,SAAWqK,EAAY9O,KAAK8N,EAAU,SAAS6B,EAAe1P,MIxL9F8J,EAAAhN,KAEAgO,IAAAhO,UAEAiO,KAAAjO,UAKAwP,MAAAgD,OACAA,QAAAA,QJoLYG,WInLZ,WJqLc3S,EAAQa,WAAWmM,EAAW6F,SAAS7S,EAAQa,WIjL7DmE,EAAA8L,MAAAA,EAAAA,SAAA9Q,EAAAc,YAAA,IAAAd,EAAAkL,MACAnF,EAAA7C,aAAAA,EAAAA,SAAAA,EAAAA,aAGA8B,EAKAwN,EAAAhR,MAAAsR,GJ8KYP,EI5KZQ,QAAA/F,GJ8KUhI,EAAS8L,SAAW5N,EAAM4N,UAAW,EI3K/C/K,EAAA7C,GAEA+B,EAAA+N,kBAEAxR,QAAAwL,QAAAA,OAAAuC,EJ2KY0D,EI3KZN,MAAA3F,EAAAuF,EAAAC,EAAAU,GAGAD,EAAAjT,MAAAkE,EAAAqO,EAAAC,GAAArS,KAAA+S,GJ4KUnN,EI1KVf,GJ2KUC,EAAM,WIzKhB8H,GAAAA,EAAAA,KJ2Kc4F,WAAY,YIvK1B3S,EAAAmL,WACAiC,UAAAA,EAAAA,SJ0KgBpI,EAASoN,QIrKzBrF,OAGA/M,EAAAgM,WJwKYoB,OASJpI,EIrKR+G,MAAAA,WJwKU,MAFAD,cIrKVnE,GJsKUoE,EAAa,MIpKvB/L,EAAAmE,OAAAwD,EAAAA,MAAAA,UAKAkJ,EAAAzE,WAAAA,WACA,QAAApH,GAEAA,EAAAA,QAGAhF,EAAAqS,MAAA1K,OJ2JmB3C,EAAS2C,OAQpB,IIhKR0K,GJiKYjG,CACJpH,GI/JRqN,KAAA,SAAAc,GJgKU,GI/JVnO,EAAA8L,SJ+JU,CACA5N,EAAMgD,MAAMlG,EAAQH,YAAc,eAAgBmF,EI5J5DoO,IAAAA,IAAAD,CAIA/G,SAAAA,UAAAY,EAAAA,eAAAA,QAAAA,WAAAA,EAAAA,gBAEAqF,EAAArF,EAAAqG,aAAArO,IAIAiO,IJ0JUG,EAAQD,EACR/G,EAAaY,EIrJvB8D,OAAA9L,IACAe,QAAA7C,QAAAA,OAAAA,EAGAlD,EAAAkE,MAAAA,EAAA8I,GJsJciG,EAASK,MAAMtG,GAAY7M,KAAK8L,IAGpCjH,EAAS8L,SAAW5N,EAAM4N,UAAW,EACrC/K,EAAW7C,GIjJrBlD,EAAAiM,UAAAA,OAAAA,GACA/I,IAEAlD,EAAAmM,WAAAnH,OAAAA,GJmJYsI,OAeJtI,EI7IRA,OAAA0H,SAAAA,GJ8Ic9G,GACFA,EAAIc,iBI1IhBsG,EAAA8D,SJ6IY9L,EAASsO,QIzIrBtT,EAAAoL,SJ8IQpG,EI1IRhF,MAAAuL,WJ2IUyB,EAAW,GAAGoF,SAEhBpN,EIvIRgI,WAAA,SAAA8E,GAGA9R,EAAA+K,UAAA/K,GJuIQgF,EIrIRuO,YAAAC,SAAA3K,GAEA7I,EAAAuT,SAAAhI,GJsIQvG,EAASgO,gBAAkB,WIhInChG,GAAAA,EAAAA,CAIA,GAAAyG,GAAAA,EAAAhG,UACAiG,EAAA1G,eACA2G,EAAA3G,EAAAA,KAAA2B,EAGA3J,KAGA+F,EAAAwI,EAAA1Q,QAAA2Q,EAAA,KAAA5S,EAAAmK,WJ4HUiC,EI1HV4G,SAAAA,EAAAnG,UJ2HU,IIzHVgG,GAAAI,IACA9I,EAAAA,EAAA8I,KAAAA,eJ0HcF,EIzHd3G,EAAA6G,KAAAA,eJ2HU,IADA7O,EIzHV+F,UAAA8I,EAAAA,UAAAhR,EAAA7C,EAAAuL,SAAAC,UAAAxL,EAAAuL,UJ0HcgI,EAAW,CIvHzB,GAAAM,GAAAA,EACA9I,EAAAA,EAAA/F,EAAAoL,UJyHgB,UIxHhBvH,KAAAgL,IAAAA,EAAAJ,OAAAjE,EAAAkE,EAAAE,OACA7I,EAAAA,EAAAlI,QAAA,SAAA,OJyHuB,MAAMgG,KAAKgL,IAAsBJ,EAAgBzF,IAAM2F,EAAYC,EAAiB5F,MItH3GhB,EAAA8G,EAAAD,QAAAA,MAAAhB,WAIAkB,OAAAA,KAAAC,IAAAjJ,EAAA0I,KAAAA,EAAAC,EAAAC,KACAM,EAAAF,EAAAA,QAAAhJ,OAAAA,SJsHuB,QAAQlC,KAAKgL,IAAsBJ,EAAgBjE,MAAQkE,EAAWE,EAAiB9F,QInH9G9I,EAAAiI,EAAApK,QAAA+C,QAAAA,SAEAZ,EAAA2C,YAAAA,GAAAA,SAAAA,GJsHU,GAAIoM,GAAcC,EAAoBjJ,EAAW0I,EAAiBC,EAAUC,EAC5EM,GAAeF,EAAahJ,KAE9B/F,EInHRY,SAAA,SAAAA,GACAuN,KAAA/S,EAAAA,OAAA+S,EAAAA,WACAvN,EAAAe,OJoHYf,EAAIe,oBAGR3B,EIlHRhF,cAAAqL,SAAAA,GAAA3E,KAAAd,EAAAc,QJoHYtG,EAAQ,GAAG+S,OInHvBvN,EAAA5F,oBJuHQgF,EIrHRA,yBAAA,SAAAY,GACAxF,EAAAiL,yBJsHYzF,EAAIc,iBAEF1G,EAAQsL,0BACV1F,EAAIe,kBIjHhB0F,EAAAA,SACA7K,EAAAC,GAAAA,OJqHYrB,EInHZA,GAAAmM,QJiKQ,IIzGRY,IAAA,CJkTQ,OAAOnI,GAET,QAASe,GAAW7C,GIxD1BgF,EAAAA,SAAAhF,EAAAgR,OAAAhR,EAAAgR,MAAArM,SAAA3E,EAAAqE,UAGAe,QAAAA,GAAA6L,EAAA/T,GACA8C,MAAA1B,SAAApB,SAAAA,GAAAoO,GAAA4F,iBAAAD,IJxeM,GIzONE,GAAArP,6BAAA9B,KAAAlD,EAAAkD,UAAAiO,WAEA3E,EAAAF,eAAAA,GAAA8E,UAAAA,EACA7D,EAAAvN,QAAAmE,QAAA3C,EAAAG,SJwwBM,OIvDN2S,OJyDKpM,UIvDLhF,aAAAA,UAAAA,YAAAA,OAAAA,SAAAA,WAAAA,QAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJwDI,OACEoF,SIxDN7G,MJyDMyB,OIxDN,EJyDMD,KAAM,SAAkBC,EAAO9C,EAASiI,EAAMkM,GIrDpD,GAAA/L,GACAhH,GACA0B,MAAA1B,EJwDQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,gBAAiB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,oBAAqB,OAAQ,cAAe,MAAQ,SAASI,GACtNL,QAAQ8E,UAAU+B,EAAKxG,MAAO7B,EAAQ6B,GAAOwG,EAAKxG,KAExD,IIpDR2G,GAAA3G,eJqDQL,SIpDRA,SAAA8E,OAAA+B,aAAA,SAAAxG,GACA7B,QAAA6B,UAAAqB,EAAAsR,KAAA/L,EAAAA,KAAAA,EAAAA,MJqDYzI,EAAQ6B,IAAO,KI/C3BL,QAAAA,SAAA8E,eAAAmO,SAAA,eAAA,UAAA,SAAA5S,GACA,GAAA2G,GAAAA,KAAAA,EAAAK,OAAA4L,GAAAA,cAAA5S,EAAA+G,MAAA,EACA5I,SAAA8K,UAAAzC,EAAAI,MJmDYzI,EIlDZ6B,GAAAqB,EAAAsR,MAAAnM,EAAAI,MJqDQ,IAAIgM,GAAarU,EAAQiI,KAAK,cI9CtC7G,SAAAkT,UAAAA,KACAxR,EAAA2F,KAAA4L,GJgDYzU,EAAQ8K,QAAS,EI3C7B9K,EAAAwB,OAAA8E,GAGApD,EAAA1B,eAAAkI,WJ8CUxG,EI7CV+B,MAAA,IJ+CQoD,EAAKsM,SAAS,QAAS,SAASlL,GAC9B,GAAIjI,QAAQ8E,UAAUmD,KAAcvG,EAAMwR,eAAe,SAAU,CACjE,GAAIhL,GAAWxG,EAAM+H,KACrB/H,GAAM+H,MAAQuG,EAAKC,YAAYhI,GI3C3CkL,QAAArO,UAAAoD,IACAD,EAAAA,WACA9B,GAAAA,EAAAA,uBJiDQU,EI1CRsM,SAAAnT,WAAAiI,SAAAA,GACAjI,GAAAQ,EAAAkB,UJ2CYoR,EI1CZ3M,SAGAU,EAAA7G,WJ2CU0B,EI1CV+B,OAAAoD,EAAAuM,UAAA,SAAAnL,EAAAC,GACAlI,QAAA8S,SAAAA,GJ2Cc9S,QAAQQ,OAAOkB,EAAOuG,GIxCpCvG,EAAA+H,MAAAxB,EAIApB,QAAAwM,UAAAnL,IACAxG,EAAAqG,WACA+K,GAAA9S,EAAA8E,sBJ2Ca,GAED+B,EIxCZiM,QJyCUpR,EAAMqG,OAAOlB,EAAKwM,OAAQ,SAASpL,EAAUC,GACtC4K,GAAY9S,QAAQ8E,UAAUmD,KAC/BjI,QAAQG,SAAS8H,KAAWA,IAAaA,EAASqL,MAAM,wBIrCxEzM,KAAA,EACAnF,EAAAqG,OAGA+K,EAAA9S,UJyCY6G,EIrCZiM,WJsCUpR,EAAMqG,OAAOlB,EAAK+C,UAAW,SAAS3B,EAAUC,GACzC4K,GAAY9S,QAAQ8E,UAAUmD,KAC/BjI,QAAQG,SAAS8H,KAAWA,IAAaA,EAASqL,MAAM,0BIlCxEzM,KAAA,EACAnF,EAAAqG,YAAAgC,GAEA+I,EAAAS,YAAAtL,MAQAvG,EAAA2H,UACA3H,EAAAoR,OAAAA,EAAAA,SAAA1J,SAAAA,GACA5K,GAAAwB,QAAA8E,UAAAmD,IACA6K,EAAAS,YAAAtL,KJkCQ6K,EAAUtP,EAAS5E,EAASJ,GAC5BkD,EAAM2H,IAAI,WAAY,WKx5B9BpK,GAAA6T,EAAA1J,UAIAhK,EAAAI,KACAH,EAAA,YL25BEW,QKp5BFuC,OAAA,6BAAA,oCAAA,uCAAA,2BAAAC,SAAA,cAAA,WLq5BI,GKp5BJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,OACAuB,YAAA,aAEA6Q,UAAA,cACAC,YAAA,iCACAC,QAAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAC,EACAnP,SAAA,OACAoP,WAAA,YACAC,SAAAA,KACAC,gBAAA,KACAC,WAAAA,EACAC,UAAAL,EAAAA,GACAM,UAAAN,EAAAA,GACAO,OAAAA,ELo5BMN,SAAU,EKj5BhBzU,WAAA,EAEA2U,WAAAtB,EACAuB,cAAA,EACAC,OAAAjV,iCLk5BMkV,SKj5BNlV,mCLk5BMmV,cAAe,QAEjB/U,MK/4BJ0D,MAAAsR,UAAAhR,YAAA5E,aAAA4B,OAAApB,iBAAAwE,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GLq5BM,QK94BN6Q,GAAAC,EAAAA,EAAAC,GAcA,QAAAC,GAAAA,GACAC,GAAAA,GAAAC,IAAAC,EAAAA,UACAC,OAAAA,IAAAF,MAAAA,KAAAC,MAAAA,EAAAA,UAAAE,GAAAA,GLsnCQ,QK31BRC,GAAAjR,EAAAA,GL41BU,GAAIkR,GK31BdC,EAAAxW,CL41BU,IK31BVA,EAAA,GAAAqK,gBAAAmM,CL41BY,GAAIF,GK31BhBlV,EAAAiG,GAAAA,iBACArH,GAAAyW,UAAAvM,GACAlK,EAAA0W,UAAAtM,YAAAmM,GL41BYD,EAASK,QAAQ,YAAaJ,GAC9BD,EAASjR,aKz1BrBuR,GAAAA,GAAAA,kBACA5W,EAAA,GAAAgS,kBAAAA,EAAAA,GL21BqB5Q,QAAQiG,YAAYrH,EAAQ,GAAGkK,kBKt1BpD2M,EAAAjB,GAAAA,eAAA/D,EACA+D,EAAA/D,GAAAA,aAAA0E,GL01BQ,QKv1BRvW,KLw1BUA,EKv1BV,GAAAgS,QLglBQ,GAAI4D,GAAchR,EAAS5E,EAASoB,QAAQQ,UAAWpB,EAAUwE,IK54BzER,EAAAsS,EAAAC,MAEAnX,EAAAgW,EAAAhW,SACAkD,EAAA8S,EAAAoB,OL64BYC,EAAOrX,EAAQqX,KKx4B3BC,EAAAA,SAAAC,EAAApB,EAAAhB,GACA,MAAAqC,GAAAxX,WAAA4V,EAAAsB,EAAAA,EAAA/B,IAMAsC,EAAAC,EACAC,EAAArB,EAAAsB,aAAAA,EAAAA,GAAAA,OAAAA,GAAAA,ML04BYtB,EAAYpV,EAAW2W,YAAcL,EKv4BjDrB,GAEAE,KAAAyB,EAAAC,WACAvB,SAAAwB,EAAAD,WAAAC,GACAC,OAAAC,EAAAH,aACAN,OAAAU,EAAAJ,aACAJ,YAAAS,EAAAL,mBAGA7U,EAAAmV,EAAAxC,kBAAAA,EAAAA,WAAAA,GACA3S,EAAAlD,EAAA8V,YAAAA,GAIA5S,EAAA6U,EAAArS,cAAAA,GACAsQ,EAAAvQ,EAAAC,cAAAA,GLo4BYyS,EAAgBJ,EAAeI,cAAchC,GKl4BzDjT,EAAAoV,EAAA5W,YAAAgE,GACAsQ,EAAAA,EAAAtU,OAAAgE,ELo4BQxC,GAAMmV,QAAUrY,EAAQ6V,OKl4BhC3S,EAAAqV,UAAAA,EAAAzC,SLo4BQ5S,EKn4BR8S,QAAAwC,SAAAA,EAAAjB,GLo4BUvB,EAAYvQ,OAAO8R,EAAM7R,IAE3BxC,EK/3BR1B,WAAAiX,SAAAlB,EAAArI,GLg4BU8G,EK/3BVA,WAAAuB,EAAAA,ILi4BQrU,EK/3BRmT,gBAAAE,SAAAA,GLg4BUP,EK/3BVuB,eAAAmB,ILi4BQ1C,EK/3BR2B,OAAAJ,SAAAK,GLg4BcpW,QAAQiX,OAAOlB,KAAUrI,MAAMqI,EAAKoB,YK93BlD3C,EAAA4C,MAAAA,ELg4BYpX,QK/3BZQ,OAAAgU,GACAA,KAAAA,EAAA4C,WLg4BcX,OAAQV,EAAKmB,aACbjB,OAAQF,EAAKG,aK73B3B1B,YAAAvQ,EAAAmS,oBAGA1W,EAAA2W,UL83BsB7B,EAAY6C,UK33BlC7C,EAAAyC,UL+3BQzC,EK13BR9U,OAAA+E,SAAAA,EAAAA,EAAAA,GACAjG,EAAAqV,aAAAyD,MAAA5X,EAAA2W,WAAAc,aACAzT,EAAA2S,WAAA,UAAA7X,EAAAwX,YAAA,GAAAuB,MAAA,GAAAA,MAAA,KAAA,EAAA,IL43BevX,QAAQiX,OAAOlB,KAAOA,EAAO,GAAIwB,MAAKxB,IAC7B,IAAV7R,EAAaxE,EAAW2W,WAAWmB,SAASzB,EAAKhB,YAAgC,IAAV7Q,EAAaxE,EAAW2W,WAAWoB,WAAW1B,EAAKmB,cAAkC,IAAVhT,GAAaxE,EAAW2W,WAAWqB,WAAW3B,EAAKG,cACzMxW,EAAWkF,cAAc5E,QAAQ2X,KAAKjY,EAAW2W,aKx3B3D7B,EAAAwC,UACAxY,EAAAkB,YAAA2W,GACA3S,EAAA,WL03Bc8Q,EAAYrO,MAAK,MAIvBqO,EKz3BR9U,eAAA+E,SAAAA,GL03BU,GAAK/E,EAAW2W,aAAc3I,MAAMhO,EAAW2W,WAAWc,WAA1D,CKl3BV,GAAAS,IAAAA,GAAAA,EAAA/J,YAAArP,UACAkB,GAAAmY,WAAAA,SAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IACAnY,EAAAmV,cAAAA,QAAAA,KAAAA,EAAAA,aACAnV,EAAA+E,YLu3BQ+P,EKr3BR9L,OAAAA,WLs3BU,GKr3BVqN,GAGA+B,EAFA3O,EAAAuL,EAAAA,SAAA4B,SAAAA,EAAAA,OAAAA,EAAAA,IACA1N,ILu3BU,KAAK0C,EAAI,EAAGA,EAAI9M,EAAQqG,OAAQyG,IAC9BuJ,EAAO,GAAI0C,MAAK,KAAM,EAAG,EAAG3C,EAASC,MAAQ+C,EAAWtM,GAAK9M,EAAQyV,UKp3BjF4D,EAAAE,MACAtB,KAAAA,EACAtN,MAAAuL,EAAAlW,EAAAqG,GACA4R,SAAAjC,EAAAwD,OAAApD,EAAA6B,YAAAmB,EAAAtM,GACAyM,SAAArP,EAAAA,YAAAA,EAAAA,ILw3BU,IKp3BVoP,GADAlP,ILu3BU,KAAK0C,EAAI,EAAGA,EAAI9M,EAAQqG,OAAQyG,IAC9BmL,EAAS,GAAIc,MAAK,KAAM,EAAG,EAAG,EAAG3C,EAAS6B,QAAUmB,EAAWtM,GAAK9M,EAAQ0V,YKp3BxF6D,EAAAE,MACAhC,KAAAA,EACA9M,MAAAuL,EAAAlW,EAAAqG,GACAoR,SAAAzB,EAAAwD,OAAAxD,EAAAyB,YAAA2B,EAAAA,GACAK,SAAAvP,EAAAA,YAAAA,EAAAA,ILw3BU,IKp3BVoP,GADAlP,ILu3BU,KAAK0C,EAAI,EAAGA,EAAI9M,EAAQqG,OAAQyG,IAC9B2K,EAAS,GAAIsB,MAAK,KAAM,EAAG,EAAG,EAAG,EAAG3C,EAASqB,QAAU2B,EAAWtM,GAAK9M,EAAQ2V,YKn3B3F8D,EAAAC,MACAnC,KAAAE,EACA9M,MAAAyN,EAAAX,EAAAU,GACAuB,SAAAxP,EAAAqP,OAAAzM,EAAAA,YAAAA,EAAAA,GLq3BcwM,SKp3BdtD,EAAA2D,YAAAlC,EAAA,ILu3BU,IAAIiC,KKn3BdxW,KAAAA,EAAAwW,EAAAA,EAAAA,EAAAA,OAAAA,IACAtB,EACAlV,EAAA0W,MAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,KAEA1W,EAAA8U,MAAAA,EAAAA,GAAAA,EAAAA,IAIAhC,GAAAA,KAAA6D,EACA3W,EAAA8S,YAAAwD,ELo3BUtW,EKl3BV0W,OAAArD,ELm3BUrT,EAAM4W,MKl3BhBpU,EAAA8T,OAAAH,EAAAD,GAAA7B,MAAAhB,WAAA,GLm3BUrT,EKl3BV8U,cAAAU,ELm3BU1C,EKl3BVtQ,UAAA,GLo3BQsQ,EAAY6D,YAAc,SAAStC,EAAM7R,GACvC,QAAKsQ,EAAYwD,QAAwC,IAAV9T,EKh3BzDsQ,EAAA2D,aAAA3D,EAAAtQ,MAAAA,WACAqU,IAAAA,EACArU,EAAAgT,eAAA1C,EAAAwD,MAAAd,aACAnB,IAAAwC,EACAxC,EAAA7R,eAAAsQ,EAAAwD,MAAA9B,aADAqC,SLq3BQ/D,EKj3BR+D,YAAApB,SAAAA,EAAAvC,GLk3BU,GAAI2D,EAQJ,OKx3BVA,KAAArU,ELk3BYqU,EAAexC,EAAKoB,UAA8B,IAAlBvC,EAAS6B,OAAiC,IAAlB7B,EAASqB,OK/2B7E,IAAAuC,EACAD,EAAAhE,EAAAA,UAAA,KAAAK,EAAAC,KAAA,IAAAD,EAAAqB,OACAwC,IAAAjE,ILi3BY+D,EKh3BZxC,EAAAoB,UAAA,KAAAvC,EAAAC,KAAA,IAAAD,EAAA6B,QLk3BiB8B,EAAiC,EAAlB/Z,EAAQsV,SAAeyE,EAAiC,EAAlB/Z,EAAQuV,SK72B9ES,EAAAA,aAAAiE,SAAAvY,EAAAgE,GACAsQ,WAAAkE,EAAAA,cACAlE,EAAAkE,eAAA3D,EAAAA,GAEAP,EAAAkE,WAAAxC,EAAAA,ILk3BQ1B,EK/2BRiE,eAAA,SAAAvY,EAAAgE,GLg3BU,GK/2BVwU,GAAAjB,GAAAA,MAAAM,EAAAlK,OAAArP,GLg3BcqZ,EK/2Bd3T,EAAAA,WACAwU,EAAAhB,EAAAO,aLg3BcA,EAAUS,EAAQxC,YK92BhCjS,KAAAuQ,ELg3BYkE,EAAQlB,SAASK,EAAQhK,SAASrP,EAAQyV,SAAU,IAAM/T,GK72BtE4W,IAAAA,EACA4B,EAAAC,WAAAA,EAAAA,SAAAA,EAAAA,WAAAA,IAAAA,GACA,IAAAzU,GACAyU,EAAAA,WAAApB,EAAA1J,SAAA+G,EAAAC,WAAArW,IAAAA,GLg3BUgW,EK92BVmE,OAAAA,EAAA5D,GAAAA,ILg3BQP,EK92BRsC,WAAA,SAAA5W,EAAAgE,GL+2BU,GK92BVyU,EACAnY,KAAAR,GL+2BY2Y,EK92BZA,GAAAA,MAAAzB,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,QL+2BYlX,QAAQQ,OAAOoU,GACbC,KK92Bd8D,EAAA5D,cAEAH,IAAApU,GL+2BYmY,EK92BZA,GAAAA,MAAAzC,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,WAAAA,EAAAA,QL+2BYlW,QAAQQ,OAAOoU,GACb6B,OAAQkC,EAAWzB,gBAEF,IAAVhT,IK52BrBsQ,EAAAvP,GAAAA,MAAAA,KAAA,EAAA,EAAAb,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,YAEApE,QAAAsJ,OAAAwB,GACA3F,OAAAA,EAAAA,gBL+2BUqP,EK32BVoE,UL62BQpE,EAAYvP,aAAe,SAASb,GAGlC,GK72BV,UAAAwU,EAAAA,OAAAC,SAAAA,eAAAzU,EAAAc,iBL42BUd,EAAIe,kBACA6F,EAAS,CKz2BvBwJ,GAAAA,GAAApO,QAAAxH,QAAAwF,EAAAA,OACAA,YAAAwU,EAAA,GAAA9N,SAAAzD,gBACAnC,EAAAA,EAAAA,UAIA0T,EAAA/S,eAAA,WL22BQ2O,EAAYpO,WAAa,SAAShC,GKr2B1C,GAAAsU,mBAAAlE,KAAAA,EAAAA,WAAAwD,EAAAA,WAAAA,EAAAA,OAAA,CAGA,GAFA5T,EAAAyT,iBACAzT,EAAA0U,kBACAJ,KAAAX,EAAAA,QAEA,WADAvD,GAAAuE,MAAAA,EAGA,IAAAC,GAAAA,GAAAzB,MAAA/C,EAAAwD,OACAiB,EAAAA,EAAAlE,WACAmE,EAAAtC,EAAAA,EAAAwB,GAAAvT,OAGAoU,EAAAA,EAAA/B,aACA6B,EAAAlT,EAAAiQ,EAAAA,GAAAA,OLq2BcmC,EAAUS,EAAQxC,aKh2BhCiD,EAAAzE,EAAAoE,EAAAA,GAAAA,OACAM,EAAA,EACAhV,EAAAyB,UAAAuT,KAAAhV,EAAAyB,SACAzB,EAAAyB,EAAAuT,EAAAvT,EAAA,EAAAuS,CACAiB,KACAvD,KAAAwD,EAAAA,QAAAxD,EAAAc,EAAAd,EAAAA,EAAAA,EAAAA,EAAAc,EAAAA,KAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GLm2BU,IKj2BV8B,IAAAb,EAAAA,GAEAiB,EAAAA,CACA,MAAAK,EAAAA,UAAAL,MACAhD,KLg2Bc1R,EKh2BdyB,UAAAiQ,EAAA,ELi2BU,IKh2BV4C,GAAAU,IAAA3B,GAAA5J,EAEAkL,EAAAL,IAAAK,IAAArC,GAAA7R,IAAAA,GAAAA,CACAiU,KAAAK,GLg2BYT,EK/1BZlB,SAAA6B,EAAAD,EAAAvL,SAAArP,EAAAyV,SAAA,KACAyE,EAAAhB,EAAAO,EAAAmB,GAAA5a,OAEA+a,GAAA7E,EAAAA,IACAoE,IAAAK,GL+1BYT,EK91BZjB,WAAA6B,EAAAF,EAAAvL,SAAArP,EAAA0V,WAAA,KACA6E,EAAAE,EAAAzE,EAAAwC,GAAAA,OACAmC,GAAAL,EAAAE,EAAAA,IL+1BqBK,GK71BrB7E,EAAAA,WAAAkE,EAAA5C,EAAAA,SAAAtX,EAAA2V,WAAA,KACAqF,EAAAL,EAAAT,EAAAS,GAAAtU,OACAzB,GAAA2C,EAAAA,EAAAA,EAAAA,EAAAA,IL+1BqBuT,IK11BrBE,GAAAA,EAAA3U,iBACAsU,GAAAtU,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IL61BU2P,EK31BVU,OAAAtW,EAAA6a,GAAAA,GL41BUD,EK31BVnE,EAAA,GAAA8D,EAAA,IL41BU/V,EK31BVkS,WL+2BQ,IKv1BR1W,GAAAuO,EAAAsD,ILw1BQ+D,GKv1BR3N,KAAA,WLw1BU,MKv1BVjI,IAAAJ,EAAAgX,WLw1BY5W,EAAQuO,KAAK,OAAQ,YKt1BjCsI,GAAAA,IAAAA,qBAAAA,eAGAiE,IACAlF,EAAApL,KAAAA,OAAA,QACAxK,EAAAiU,KAAAA,WAAAW,QACA5U,EAAAyM,GAAAA,QAAAmK,QAEAkE,MAGA,IAAAC,GAAAnF,EAAAxO,OACAwO,GAAAxO,QAAA,WACA6M,GAAAjU,EAAAiI,WACA8S,EAAAA,IAAAA,QAAAA,GLu1BUD,IAEF,IAAIC,GKn1BZ/a,EAAAA,ILo1BQ4V,GAAYxO,KAAO,YKl1B3BgF,GAAApM,EAAAiI,KAAA,aAAAjI,EAAAiI,KAAA,cLo1BU8S,IKj1BVjW,EAAAkW,WACApF,EAAAtO,UAAAyL,EAAAA,SAAAA,GAAAA,EAAAA,aAAAA,YAAAA,EAAAA,cACA6C,EAAAA,UACAA,GAAAtO,EAAAA,GAAAsO,UAAAtO,EAAA8E,aAEA,GAAApM,ILo1BQ,IKl1BRgb,GAAAjI,EAAAA,IAkBAkB,OLi0BQ2B,GAAYrO,KAAO,SAASwL,GKh1BpC6C,EAAAA,WLk1BcA,EAAYtO,UAAUsO,EAAYtO,SAASmF,IAAIL,EAAU,aAAe,YAAawJ,EAAYvP,cK90B/GwP,EAAAA,UACAA,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAOA/N,EAAAiL,KAGAkB,ELkhBM,GK/4BNA,GAAAzP,6BAAA1B,KAAAA,EAAAA,UAAAA,WACAsJ,EAAAxM,eAAAiR,GAAAA,UAAAA,CAgYA1I,OA/XA3H,GAAAoV,OAEApV,EAAAyW,KAAArX,EAAAqX,oBA4XA/O,EAAA1H,SAAAA,EACA2H,ML00BKL,UKt0BLlI,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GLu0BI,GAAIY,GKt0BRsC,EAAAA,SLu0BQmR,EAAW,6BAA6BxL,KAAK/D,EAAQuW,UAAUC,UACnE,QACEhT,SKt0BN9G,MLu0BM+G,QAAS,UACTtF,KKp0BNuF,SAAAA,EAAApI,EAAAiI,EAAAnH,GLy3BQ,QKpzBRA,GAAAqa,GAEA,GAAAC,QAAAA,OAAAC,GAAA,CLozBU,GKnzBVC,GAAAxM,MAAAlP,EAAAsV,UAAA,GAAAyD,MAAA0C,EAAA9C,WAAAgD,YAAA,KAAA,EAAA,IAAA3b,EAAAsV,QLozBciG,EAAarM,MAAMlP,EAAQuV,UAAY,GAAIwD,MAAK0C,EAAW9C,WAAWgD,YAAY,KAAM,EAAG,IAAM3b,EAAQuV,QKlzBvHrU,EAAA2W,GAAA4D,CLozBUva,GAAW0a,aAAa,OAAQJ,GKhzB1Cta,EAAA2a,aAAAC,MAAAJ,GAEAxa,EAAAqW,aAAAA,MAAAA,GAEAwE,ILkzBU7a,EAAW2W,WAAa4D,IA+C1B,QAASO,KACP,OAAQ9a,EAAW2W,YAAc3I,MAAMhO,EAAW2W,WAAWc,WAAa,GAAKzC,EAAWhV,EAAW2W,WAAY7X,EAAQkV,YKn7BnI1T,GAAAA,IACA0B,MAAA1B,ELs0BQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,WAAY,aAAc,aAAc,SAAU,gBAAiB,SAAU,WAAY,eAAgB,KAAM,cAAe,cAAe,eAAiB,SAASI,GAC9YL,QAAQ8E,UAAU+B,EAAKxG,MAAO7B,EAAQ6B,GAAOwG,EAAKxG,KAExD,IKl0BR2G,GAAA3G,eLm0BQL,SKl0BRA,SAAA8E,OAAA+B,YAAA,YAAA,YAAA,gBAAA,SAAAxG,GACA7B,QAAA6B,UAAAqB,EAAAsR,KAAA/L,EAAAA,KAAAA,EAAAA,MLm0BYzI,EAAQ6B,IAAO,KK7zB3BL,QAAAya,SAAAjG,eAAA5V,SAAAc,eAAAlB,UAAAA,SAAAA,GACAA,GAAAA,GAAAic,KAAAhL,EAAAA,OAAAA,GAAAA,cAAAA,EAAAA,MAAAA,EAEAoG,SAAArX,UAAAqX,EAAAA,MACAnB,EAAAA,GAAAhT,EAAAsR,MAAA+C,EAAApB,OAKA9N,IAAArI,EAAAgV,WAAApU,EAAAoU,aAAAhV,EAAAkV,WAAA,QL8zBQ,IK7zBRhS,GAAAmF,EAAAjI,EAAAqJ,EAAAC,EL8zBQ1J,GK7zBRic,EAAAA,QL8zBQ,IK7zBR5E,GAAA7V,EAAAG,KACAuU,EAAAzM,SAAA8N,EAAApB,EAAAhB,GL8zBU,MK7zBV8G,GAAAzU,WAAAA,EAAAA,EAAAA,EAAAA,GL+zBYa,GK7zBZ4T,QL8zBU/Y,EAAMqG,OAAOlB,EAAKwM,OAAQ,SAASpL,EAAUC,GACtCuS,GAAeza,QAAQ8E,UAAUmD,KAClCjI,QAAQG,SAAS8H,KAAWA,IAAaA,EAASqL,MAAM,2BK1zBxEoH,KAAAC,EACAhG,EAAAnW,OL6zBcic,EAAWtU,SAIjB,IAAIuU,GKxzBZjL,GLyzBUkF,OKxzBVnW,EAAAic,WLyzBU5E,KKxzBV+E,GL0zBQ5a,SAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQ8E,UAAU+B,EAAKxG,KKrzBrCqB,EAAAqG,SAAAC,EAAAA,SAAAC,GAEAwS,EAAAjW,SAAA9E,GAAA2W,EAAAA,oBAAAA,EAAAA,GACA3I,MAAA+M,EAAAhL,SAAApP,KAAAoa,EAAArD,SAEAwD,EAAAA,EAAAX,gBLwzBQvY,EKpzBRsY,OAAAA,EAAAE,QAAAA,SAAAH,EAAAA,GACAra,EAAA0a,OAAAA,EAAA/D,cACA3W,GLk0BQA,EK5yBRua,SAAAA,QAAAA,SAAAA,GL6yBU,GK5yBVva,EL6yBU,KK1yBV6a,EAEAK,MLyyBYlb,GAAW0a,aAAa,QAAQ,GKzyB5CQ,IL4yBU,IKzyBV7E,GAAA2E,QAAAG,OAAAA,GAAAZ,EAAAzb,EAAAmV,MAAA4G,EAAA7a,EAAA2W,WL0yBU,QKzyBV4D,GAAAvF,MAAAqB,EAAAnC,YL0yBYlU,EAAW0a,aAAa,QAAQ,GKxyB5CM,IL2yBUE,EKzyBVzD,GACA1D,WLyyBcjV,EKzyBdA,UACAuX,EAAAA,EAAAoB,qBAAA8C,EAAAzb,EAAAmV,UAAA,GACAe,EAAAjB,EAAAA,EAAAG,iBAAApV,EAAAkV,cL2yBUqC,EAAO2E,EAAWG,qBAAqBnb,EAAW2W,WAAY7X,EAAQmV,UAAU,GKxyB1FoC,WAAAvX,EAAA+Y,SL0yBmBxB,EAAKoB,UKtyBxB,SAAA1O,EAAAA,SAEAsN,EAAAA,UAAAA,IACApN,QAAA3I,EAAAiG,SACA6U,EAAAA,cAEA/E,GAAApN,MAAAA,OLwyBQjJ,EKtyBRgb,YAAAK,KAAApS,SAAAA,GLuyBU,GAAIoN,EAaJ,OAXEA,GKvyBZA,QAAA9P,YAAA0C,IAAA,OAAAA,EACAmS,IACA9a,QAAA2I,OAAAA,GLuyBmBA,EKnyBnB+R,WAAArE,EAAAA,SACAmE,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,iBLqyB0C,SAArBhc,EAAQiV,SKjyB7BhP,GAAAA,MAAA,IAAAA,GLoyBmB,GAAI8S,MAAK5O,GK9xB5BjJ,EAAAA,WAAA2W,EAAA3I,qBAAA2I,EAAAc,EAAAA,ULiyBiBqD,MAET9a,EK9xBR+a,QAAAA,WACAjc,EAAAA,IAAAgc,MLmyBQ9Y,EAAM2H,IAAI,WAAY,WMl3C9BpK,GAAAwb,EAAArR,UAIAhK,EAAAI,KACAH,EAAA,YNq3CEW,QMh3CFgb,OAAAA,yBAAAA,SAAAA,OAAAA,WAEA,GAAAC,GAAAA,KAAAA,UACA5b,UAAA2b,UNg3CMjc,SAAU,mBM72ChBmc,SAAAxb,WACAyb,YAAA3b,UAIAQ,KACAib,EAAAnW,SAAAsW,EAAA/a,GN62CW2a,EAAU3a,KAAM2a,EAAU3a,GAAOgb,IMx2C5CvX,EAAAwX,KAAAA,WAAA7L,SAAA0L,EAAAA,EAAAA,GAEAI,GAAAA,GAAAC,IAKAD,GAAAE,SAAAA,QAAAA,KAAAA,GAEAF,QAAAG,SAAA,YAAAC,WAAAA,eAAAA,SAAAA,GACA3b,QAAAiG,UAAAA,EAAAuV,MAAAI,EAAAA,SAAAvb,GAAA+a,EAAA/a,MNs2CMyD,EAAO+X,UAAYN,EAAK9L,SAASyL,SACjCpX,EMp2CN0X,aAAAG,EAAAA,SAAAA,YNq2CMJ,EAAKC,OAAS1X,EAAO0X,UMl2C3BD,EAAAO,2BAAAH,EAAAA,wBNo2CMJ,EMn2CNG,MAAAxX,SAAAsX,GACAnW,QAAAA,YAAAmW,EAAAI,OAAAA,UACA9X,EAAAiY,WAAAA,EAAAA,MAAAA,GNq2CQR,EMn2CRQ,OAAAA,KAAAR,INq2CMA,EAAKO,QMn2CXzW,SAAAA,GNo2CQ,GAEI0W,GAFA7X,EMn2CZqX,EAAAC,OAAAQ,QAAAL,GACAI,EAAAA,EAAAR,OAAAC,OAMAO,GAFAR,QAAAU,SAAA/X,GAEA6X,EAAAA,OAAAjM,IAAA,SAAA6L,GAGAI,MAAAA,GAAAA,ON+1CaC,QM91Cb9X,GNg2CwBqX,EAAKC,OAAOI,QAE5BL,EM51CRA,OAAAW,OAAAX,EAAAC,GN61CYtX,EM51CZ6X,EACAR,IN61CmBrX,IAAU6X,GAAeA,IAAgBR,EAAKC,OAAO3W,QAC9DkX,IMz1CVR,GAAAK,GAAA1b,EAAAA,EAAAA,OAAAA,OACAqb,EAAAE,WAAAA,EAAAA,OAAAA,GAAAU,MAAAC,GN61CUb,EAAKW,cAGTX,EM11CNW,WAAAV,EAAAI,WAAAS,SAAAd,GN21CQA,EAAKC,OAAOI,QAAU1b,EMx1C9Bqb,EAAAe,2BAAAA,QAAA,SAAAC,GACAH,ON41CMb,EAAKiB,UAAY1Y,EAAO0Y,UAAY,SAASH,EAAOI,GAClD,MAAOlB,GAAKC,OAAOI,UAAYS,EAAMF,MAAQZ,EAAKC,OAAOI,UAAYa,GMt1C7ElB,EAAAmB,YAAAA,EAAAA,YAAAA,SAAAA,EAAAA,GACAtd,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UACAsd,EAAAhd,WAAAA,IN41CIF,MAAK0D,KAAO,WMp1ChBwD,GAAAA,KAOAhF,OALAgb,GAAAtd,SAAAsd,EAEAA,EAAAhd,WAAAA,EACAqH,EAAAA,cAAAkU,EACA0B,EAAAA,SAAA3B,EACA0B,KNq1CKhW,UMn1CLnI,UAAA,UAAAsI,WAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GNo1CI,GMn1CJzH,GAAAyH,EAAA9H,QNo1CI,QMl1CJ0C,SAAA,WAAAmF,UNo1CM+V,YMl1CNC,ENm1CMlb,OMl1CNmb,ENm1CMnd,YM/0CNod,SAAA,WAAAA,SAAAxe,EAAAA,YNg1CMC,YM/0CNwe,SAAAA,EAAAD,GNg1CQ,MAAOjW,GAAK9H,UAAYK,EAASL,UAEnC0C,KM10CNob,SAAApB,EAAAA,EAAAA,EAAAuB,GN20CQ,GM10CRJ,GAAAhY,EAAAiY,GN20CYA,EAAaG,EAAY,EAa7B,IMp1CRvU,KAAAmU,EAAAA,QAAAlU,EAAAoU,SAAAnU,GNy0CU+T,EMv0CVG,cAAAX,EAAAvT,OAAAA,GNy0CYiU,IACFC,EAAWpB,2BAA2B/S,KAAK,WMp0CrDuU,EAAAC,cAAAL,EAAArB,OAAAI,WAMAiB,EAAApB,YAAAA,KAAAA,SAAA/S,GNm0CY,MMl0CZyU,GAAAA,WAAAC,GNk0CmBzU,KAGPsU,EM/zCZC,aAAA,CNg0CU,GAAIC,GAAqBE,EAAOJ,EAAMC,aACtCL,GAAWpB,2BAA2B/S,KAAK,WACzCyU,EAAmBC,OAAO1b,EAAOmb,EAAWrB,OAAOI,WMzzC/Dla,EAAAqG,OAAAkV,EAAAC,aAAA,SAAAjV,EAAAC,GACAnB,EAAAmV,WAAAjU,KACA,SN+zCOvB,UMrzCPyM,UAAA,UAAA,WAAAjL,OAAAA,SAAAA,EAAAA,EAAAA,GNszCI,OACEnB,SAAW,YAAa,WACxBrF,OMnzCNA,ENozCMD,KMjzCNob,SAAApN,EAAApQ,EAAA4d,EAAAD,GAwBAM,QAAAA,KN2yCU,GAAIpZ,GAAQ2Y,EAAWrB,OAAOQ,QAAQta,EACtC+P,GAASoL,EAAWL,UAAU9a,EAAOwC,GAAS,WAAa,eAAetF,EAASie,EAAWpN,SAAS0L,aAlBzG,GMjzCRvc,GAAAyS,EAAAwL,ENkzCQje,GAAQyS,SAAS,YM/yCzB4L,EAAA9J,SAAA,QAAA,SAAAlL,EAAAA,GACAvG,EAAAoW,MAAAA,EAAApW,YAAAuG,KAIA4U,EAAAA,KAAAnB,EAAAha,KAGAA,EAAA+N,SAAApQ,WACAwd,EAAAA,SAAAf,EAAApa,SAAAA,WAGAub,EAAA9J,SAAAmK,WAAAA,SAAAA,EAAAA,GACA5b,EAAAwC,SAAA2Y,EAAArB,MAAAA,KN6yCQqB,EAAWnB,MAAMha,GMzyCzBmb,EAAAA,IAAAA,WAAApB,WACA6B,EAAAA,QAAAA,KChNAtd,EAAAyb,2BAAA/S,KAAA,WAIAtJ,MAEAE,SPigDEU,QO7/CFuC,OAAA,yBAAA,yBAAA,wCAAAC,SAAA,UAAA,WP8/CI,GO7/CJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,SACAuB,YAAA,UACA4a,UAAA,cACAC,YAAAA,yBACAC,QAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,gBAAA,EACAC,MAAAA,EACA/S,UAAA,oCP8/CM0S,YAAa,gCO3/CnBne,QAAA0D,MAGA2a,SAAAhL,OACAiL,UAAA9S,EAEA+S,cAAAE,WP0/CMD,cOx/CN7Z,yBPy/CM8G,QOt/CNzM,EPw/CIgB,MOr/CJ0D,MAAAxB,UAAAoC,YAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GPw/CM,QOp/CNpC,GAAAsC,EAAAA,EAAAA,GPq/CQ,GAAIG,MOn/CZzC,EAAAsC,QAAAA,UAAA5E,EAAAwE,EPq/CQO,GAAUX,EAAS5E,EAASJ,EOn/CpCkD,IAAAA,GAAAwc,EAAA1f,MACAkD,GAAAyc,YACAzc,EAAA0c,SACA1c,EAAA2c,gBAGA3c,EAAA4c,gBPq/CQ5c,EOn/CRyC,YAAAJ,EAAAG,SPo/CQxC,EAAMyc,oBAAsB3f,EAAQgf,gBAAkBhf,EAAQ+e,SAC9D7b,EAAM0c,eAAiB5f,EAAQwf,cOj/CvCtc,EAAAyC,SAAA3F,EAAA0F,QPm/CQxC,EOl/CRA,UAAAmC,EAAAga,SPm/CQnc,EOl/CRyC,UAAAF,SAAAC,GPm/CUxC,EAAMmC,aAAa,WACjBM,EAAQJ,SAASG,MAGrBxC,EAAMyC,QAAU,SAASD,EAAOE,GO/+CxC1C,EAAA8a,aAAA,WACArY,EAAAA,OAAAqY,MPm/CQ9a,EO/+CR4C,WAAAgH,WPg/CU,MO/+CV5J,GAAA8a,cPi/CQ9a,EAAM8a,UAAY,SAAStY,GACzB,MAAOC,GAAQqY,UAAUtY,IO5+CnCxC,EAAA6c,WAAAA,WACA,IAAA,GAAAjT,GAAA,EAAAA,EAAA5J,EAAAiC,SAAAkB,OAAAyG,IACA5J,EAAA8a,UAAAlR,IACA5J,EAAAyC,QAAAmH,IAOAnH,EAAAA,YAAA,WACAzC,IAAAA,GAAAiC,GAAAA,EAAAA,EAAAU,EAAAA,SAAAA,OAAAA,IACAF,EAAAqa,UAAAA,IP4+Cc9c,EAAMyC,QAAQmH,IAIpBnH,EO1+CRzC,OAAAsC,SAAAiY,GP2+CUva,EAAMiC,SO1+ChBU,EP2+CUF,EO1+CVzC,sBP4+CQyC,EO1+CR3F,SAAAif,SAAAzZ,GAUAtC,MAVAlD,GAAAigB,UP4+CgBta,EAAQqY,UAAUtY,GACpBxC,EO5+CdsC,aAAAiY,OAAAva,EAAAsC,aAAAgY,QAAA9X,GAAA,GP8+CcxC,EAAMsC,aAAa0E,KAAKxE,GAEtB1F,EAAQif,MAAM/b,EAAMsC,aAAayZ,KAAK,SAASgB,EAAGC,GO1+ClEva,MAAAF,GAAAya,KP8+CYhd,EAAMsC,aAAeE,EO3+CjCya,EAAA3a,cP++CQG,EO7+CR3F,OAAA+e,SAAArZ,GP8+CU,KO7+CVxE,QAAAA,YAAAkF,IAAAlD,EAAAsC,GAAAA,GAAAtC,EAAAwC,SAAAA,QP6+CU,CAGA,GAAIhE,GAAQwB,EAAMiC,SAASO,GAAOhE,KAClCwB,GO7+CVid,OAAAjd,WP8+CYyC,EAAQJ,SAASG,GACb1F,EO7+ChB+e,SACA7d,EAAAlB,cAAAkD,EAAAsC,aAAA8L,IAAA,SAAA5L,GACAxE,MAAAA,SAAAkF,YAAAA,EAAA1E,SAAAR,IACA,KP++CuBgC,EAAMiC,SAASO,GAAOhE,UAG3B1B,EAAQyM,OO1+C1BvG,EAAAlG,cAAAH,IAAAqB,EAAAwE,YAAAC,EAAAA,GAEA3F,EAAAmG,cAAAT,GP6+CcC,EAAQgC,UAGZzE,EOx+CV1B,MAAAA,EAAA4e,YAAAzW,UAAAA,EAAAjE,EAAAC,GACAzC,QAAAsC,UAAAA,EAAAtE,WAAAyI,QAAA2H,WAAA5P,EAAAA,WPy+CY1B,EOx+CZmG,SAAAR,EAAA0a,EAAA3e,KP2+CQiE,EOx+CRzC,mBAAAsC,WPy+CcxF,EAAQ+e,SACNvd,QOx+ChB4e,QAAAlf,EAAAyI,aACAzG,EAAA1B,aAAAN,EAAAyI,YAAAA,IAAAzG,SAAAiC,GACAjC,MAAAsC,GAAAA,UAAAG,KP2+CczC,EAAMsC,gBOp+CpBM,QAAAA,UAAA5E,EAAAyI,cAAAzG,EAAAiC,SAAAkB,OACAnD,EAAAlD,aAAAoE,EAAAlD,UAAAA,EAAAyI,aPy+CczG,EAAMsC,iBAIZG,EOr+CR3F,WAAA+e,WPs+CU,MOr+CV/e,GAAAkD,WAAAsC,EPw+CiBtC,EAAMiC,SAASkB,QAAUnF,EAAW4I,WAAWzD,QAAUrG,EAAQoE,UAF/DlB,EAAMiC,SAASkB,QAI1BV,EOp+CRD,UAAAA,SAAAA,GACA,MAAA1F,GAAA0F,SACAlE,EAAAgF,aAAArB,QAAAO,QAEAA,EAAAA,eAAAA,GAGAC,EAAAc,UAAAA,SAAA/E,GAEAkE,GAAAc,EACAd,KAAAe,EAAAA,EAAAA,SAAAA,OAAAA,MAEA6F,QAAAhG,OAAAtD,EAAAiC,SAAAO,GAAAhE,MAAAA,KPm+CU,MOj+CV4e,IPm+CQ3a,EOh+CRc,aAAA8Z,SAAAnG,GPm+CU,GAFAxU,EOh+CVc,iBPi+CUd,EAAIe,kBACA6F,EOh+Cd8T,CPi+CY,GO/9CZC,GP+9CgBnG,EAAW5Y,QAAQpB,QAAQwF,EAAIkF,OAEnC,IAA4B,MAAxBlF,EAAIkF,OAAOwB,SO79C3B,IP89Cc,GAAIiU,GAAkBnG,EAAS7H,UO99C7C+N,GAAAC,EAAAla,OAAA,GACAgU,MAAA7Y,EAAA8e,GAAAjG,WPg+CkBiG,EO/9ClBC,GPi+CgBA,EAAkBA,EAAgBhO,QO39ClD3K,GACApG,QAAApB,QAAAyI,GAAAjD,eAAA,SAGAA,EAAAc,eAAAA,WPi+CQf,EO39CRiC,WAAAD,SAAAA,GP49CU,GAAK,eAAekB,KAAKjD,EAAIyB,SAK7B,MO79CV0X,KAAAnZ,EAAA5F,UACA4F,EAAAc,iBP09CYd,EAAIe,mBOr9ChB3G,EAAAqH,UAAA7B,IAAAI,EAAA1C,QAIAqE,EAAAA,OPs9CevH,EAAQ+e,UAA6B,KAAhBnZ,EAAIyB,SAAkC,IAAhBzB,EAAIyB,aOh9C9DrH,EAAAwd,WPo9CgC,KAAhB5X,EAAIyB,SAAkBnE,EAAMsC,aAAe,EAAGtC,EAAMsC,eAAyC,KAAhBI,EAAIyB,SAAkBnE,EAAMsC,aAAe,EAAGtC,EAAMsC,aAAetC,EAAMiC,SAASkB,OAAS,EAA4B,KAAhBT,EAAIyB,SAAkBnE,EAAMsC,aAAetC,EAAMiC,SAASkB,OAAS,EAAGnD,EAAMsC,eAAyBhE,QAAQiG,YAAYvE,EAAMsC,gBAAetC,EAAMsC,aAAe;AOj9CvWG,EAAA6a,YALAC,EAAAhb,OAAAvC,EAAAsC,eP09CQG,EOl9CR+a,MAAAA,WPm9CU,GOl9CV5V,GAAAA,EAAAsH,UAAAA,SPm9CU,OAAOuO,GAAGnD,QAAQ,SAAW,GAAKmD,EAAGnD,QAAQ,YAAc,GAAKmD,EAAGnD,QAAQ,SAAW,GO78ChG7X,EAAAwV,iBAAA3T,SAAAA,GACA,OAAA7B,EAAA,GAAAib,cAAAC,UACA1F,EAAAA,iBACA4C,EAAA/d,2BACA2F,EAAAA,OAAA+B,SPk9CQ,IO78CR/B,GAAA+B,EAAAA,IP88CQ/B,GO78CR3F,KAAAA,WP88CUmb,IACInb,EAAQ+e,UACVpZ,EO78CZ+B,SAAAmL,SAAA,mBAGA3N,EAAAkW,WACAzV,EAAAgC,SAAA4E,GAAAC,EAAA,aAAA,YAAA7G,EAAAc,cACAzG,EAAA+e,UACA7b,EAAAsC,GAAAA,UAAAG,EAAAiC,aAEAjC,GAAAA,GP88CQ,IO58CRvF,GAAAyM,EAAAlF,IAoBA,OPy7CQhC,GAAQgC,KAAO,YO38CvByT,EAAA2D,UAAAvd,QAAAiG,YAAAvG,EAAAyI,eP68CYzG,EAAMsC,iBAERG,EAAQ+B,SAASmF,IAAIL,EAAU,aAAe,YAAa7G,EAAQc,cOx8C7EgZ,EAAA7e,UACAR,EAAAqf,IAAAA,UAAAA,EAAAA,YAMAvX,GAAA,IAIAvC,EPsvCM,GOp/CNzC,GAAAiC,6BAAAA,KAAAA,EAAAA,UAAAA,WACAqH,EAAAuS,eAAAja,GAAA0J,UAAA6F,CAgQApR,OADAsF,GAAA3H,SAAAA,EACA6e,MPq8CKvX,UOl8CLhF,YAAAA,UAAAA,SAAAA,KAAAA,UAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GPm8CI,GAAItC,GOn8CRue,EAAAve,QPo8CI,QACE0H,SOp8CN7G,MPq8CM8G,QOp8CN/G,UPq8CMyB,KAAM,SAAkBC,EAAO9C,EAASiI,EAAMnH,GOj8CpD,GAAAsH,IACAhH,MAAAC,EACA0d,YAAA7Y,EAAA+B,YPo8CQ7G,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,cAAe,iBAAkB,YAAa,gBAAiB,UAAW,WAAY,gBAAiB,YAAa,KAAM,OAAQ,YAAa,cAAe,cAAe,UAAY,SAASI,GACtVL,QAAQ8E,UAAU+B,EAAKxG,MAAO7B,EAAQ6B,GAAOwG,EAAKxG,KAExD,IOh8CR2G,GAAA3G,ePi8CQL,SOh8CRA,SAAA8E,OAAA+B,YAAA,iBAAA,QAAA,SAAAxG,GACA7B,QAAA6B,UAAAqB,EAAAsR,KAAA/L,EAAAA,KAAAA,EAAAA,MPi8CYzI,EAAQ6B,IAAO,KO17C3BL,QAAAA,SAAA8E,eAAAwa,SAAA,eAAA,SAAA,YAAA,SAAAjf,GACA,GAAA2G,GAAAA,KAAAA,EAAAK,OAAAiY,GAAAA,cAAAjf,EAAA+G,MAAA,EACA5I,SAAA+e,UAAA1W,EAAAI,MP87CYzI,EO77CZ6B,GAAAqB,EAAAsR,MAAAnM,EAAAI,MPg8CQ,IAAIqY,GAAe1gB,EAAQiI,KAAK,gBO/6CxC,IAXAjI,QAAAkG,UAAAgG,KACAyU,EAAA3gB,KAAAA,GACA2gB,EAAAxR,UAAA,EAEAwR,EAAAvO,SAAApS,GAOAJ,WAAAyF,EAAAA,GAAAE,SAAAvF,cAAAJ,CAEA,GAAAyF,GAAAgb,CACArgB,GAAAmP,IAAAyR,UAAAA,QPu7CU5gB,EAAUoB,QAAQpB,QAAQ,gFOn7CpC2gB,EAAA7X,MAAAA,GPs7CQ,GOn7CRH,GAAAa,EAAA1I,EAAAA,WAEAuE,EAAAO,EAAAoD,EAAAA,EAAAA,EACAlI,GAAAA,SPm7CUd,EAAQ,GAAG4gB,iBAAiB,OAAQvb,EAAO+a,iBO96CrDtf,IAAAA,GAAA+f,EAAA/W,OAAA,GAAArH,QAAA,OAAA,IAAAM,MPi7CQD,GO/6CRhC,OAAA+E,EAAAA,SAAAA,EAAAA,GPg7CU8C,EAAca,SAAS1G,EAAOhC,GAAYf,KAAK,SAASiJ,GO56ClElI,EAAA+E,OAAAA,GAEA/E,EAAAkJ,cAEA3E,GP66CQvE,EO56CRlB,qBAAAwB,KAAA4e,WP66CUlf,EO56CVkJ,YP86CQlJ,EO56CR+E,QAAAP,WP66CU,GAAI0E,GO36Cd1E,CP66CUD,GO56CV2E,qBP66CcpK,EO56Cd+e,UAAAvd,QAAA4e,QAAAlf,EAAAyI,cP66CYS,EO56CZA,EAAA8W,YAAA5P,IAAA,SAAA5P,GP86Cc,MADAgE,GAAQD,EAAO4a,UAAU3e,GO36CvCgE,QAAAD,EAAAH,OAAAH,SAAAO,GAAAiF,QACAjF,OAAAD,QAAA4a,WP86CcjW,EO76CdA,EAAA1E,QAAA1F,EAAAyF,WAAAN,EAAAO,WP66CyB0E,EAAS/D,OAAS,KAAOrG,EAAQuf,eAAiB3e,EAAS2e,eAE3DnV,EAAS8W,KAAK,QOx6CvCxb,EAAAhE,EAAAA,UAAA2E,EAAAsD,aP46CYS,EAAW1E,QAAeD,EAAOH,OAAOH,SAASO,GAAOiF,OOv6CpEzH,EAAAN,MAAAwH,GAAApK,EAAAmf,cAAAnf,EAAAkf,WAAAte,EAAAse,aAEAlf,EAAA+e,WACAtZ,EAAA0b,SAAA,SAAAzf,GP06CY,OAAQA,GAA0B,IAAjBA,EAAM2E,SAG3BnD,EAAM2H,IAAI,WAAY,WQj0D9BpK,GAAAgF,EAAAmF,UAKAwW,EAAApgB,KAEAJ,EAAAI,YRk0DEQ,QQ5zDFkD,OAAAA,4BAAA,kCAAA,sCAAA2c,SAAAtc,aAAAmJ,WR6zDI,GQ3zDJkT,GAAAE,KAAA9f,WACAZ,EAAAY,KAAAA,UACA+f,SAAAC,IAIAC,SAAAnV,IRyzDM6B,OQxzDN,IR0zDInN,MQvzDJ0D,MAAAgd,UAAAA,YAAAtc,aAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GR2zDM,QQrzDNuc,GAAAC,EAAAA,GACA,MAAAC,GAAAD,GAAAA,UAAAxhB,EAAA,GAAAJ,SAAA2R,gBAAAA,EAAAA,cRuzDM,QQnzDNyP,GAAAU,GRozDQ,GQnzDR9hB,GAAAohB,QAAAS,UAAAA,EAAAA,ERozDa7hB,GAAQI,UAASJ,EAAQI,QAAUohB,EQjzDhD,IAAAO,GAAAA,EAAAA,EAAAA,QAAAA,QAGAC,EAAAA,EAAAA,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SAAAA,EAAAA,EACA,IAAAC,EAAAA,GAEA,MADAd,GAAAe,GAAAA,UACAC,EAAAA,EAEA,IACAC,GAEAC,EAOAthB,EAGAuhB,EACAC,EACAb,EACAL,EACAK,EAjBAa,KAKAvb,EAAAA,EAAAA,oBAEA8a,IA+JA9e,ORqpDQ8e,GQxyDRM,KAAAA,WACAL,KAAAA,QAAAA,EACAC,EAAAA,EAAAld,KAAAA,cAAA/E,EAAAuhB,UACAc,EAAAA,EAAAA,KAAAA,cAAAA,EAAAA,UAGAV,EAAAE,GAAAA,QAAA7gB,KAAAyhB,4BRuyDUnB,EQtyDVO,GAAAA,SAAAE,GRuyDUJ,EAASpV,GAAG,SAAUiW,GACtBH,EAAwBd,EAASvgB,KAAK0hB,aAAc1iB,EAAQuhB,UQnyDtEQ,EAAAhd,EAAA8F,IAAA,qBAAAwX,GAGArhB,EAAA8gB,EAAAA,IAAAA,wBAAAA,GACAO,IACAR,IRmyDYT,EAAMS,GAAYE,IAGtBA,EQhyDRlV,QAAA,WACAmV,KAAAA,UACAC,KAAAA,QAAAA,IRmyDUN,EAAS9U,IAAI,QAAS7L,KAAKyhB,4BAC3BnB,EAASzU,IAAI,SAAU0V,GQ9xDjCR,EAAAY,IAAAA,SAAAA,GAGAX,IAGA/a,IAGAqb,SAGArb,GAAAA,KR0xDQ8a,EQrxDRjV,cAAAqV,WRsxDU,GQrxDVA,EAAA1a,ORqxDU,CAGA,GAFAR,GQrxDVmb,EAAAD,EAAAA,YAAAR,EAAAhT,KAAA,eAAA,ERsxDU2T,EQrxDVrb,KAAAkb,IAAAA,EAAArV,YAAA8V,EAAAjU,KAAA,iBACA1H,EAAAkb,EAAAlb,GAAAA,WAAAkb,IAAAA,EAAA,GAAArX,OACA,MAAAiX,GAAAc,iBAAAV,EAAArV,GRuxDU,KAAK,GAAIA,GAAIqV,EAAe9b,OAAQyG,KQlxD9CiV,IAAAA,QAAAU,YAAAA,EAAA3V,GAAAhG,YAAA,OAAAqb,EAAArV,GAAAhG,WAGAgc,IAAAH,EAAA7V,GAAAhC,URkxDgB7D,EAAYkb,EAAerV,GAAGhG,WQ7wD9Cib,EAAAc,EAAAA,IAAA5b,EAAA7G,EAAAA,EAAAA,GAAAA,WACA,MAAAgiB,GAAAS,iBAAAV,EAAArV,MRixDQiV,EQ9wDRnB,2BAAA,WR+wDUkC,WQ9wDVxW,EAAAsU,cAAAmC,IRgxDQhB,EAAWc,iBAAmB,SAASziB,GACrC,GAAIgiB,EAAc,CAChB,GAAIxB,GAAgBmB,EAAWiB,mBAAmBZ,EQ7wD9DA,KACAhiB,EAAAyS,OAAAiB,YAAA,UACAxH,EAAAlM,EAAA2iB,OAAAzW,OAAAlM,EAAA2iB,EAAAxQ,OAAAA,SAAAA,SAAA,OACAnS,EAAAmS,OAAAA,SAAAM,SAAAiB,YAAA,WAKAsO,EAAAF,EAAA7d,OR8wDUjE,EQ7wDV2iB,OAAAjY,SAAAA,UACAwB,EAAAlM,EAAA2iB,OAAA,OAAAzW,EAAAlM,EAAA2iB,OAAAxQ,SAAAA,SAAA,OR8wDYnS,EAAQ2iB,OAAOxQ,SAASA,SAASM,SAAS,WAG9CkP,EQzwDRkB,mBAAAzU,SAAA0U,GR0wDU,MQzwDVC,GAAArc,OAAAmc,SAAAA,GACA,MAAAjjB,GAAAA,SAAAmjB,IR0wDa,IAELpB,EQvwDR3T,aAAAtH,WRwwDUtF,QQtwDVC,QAAAygB,EAAAhC,SAAAA,GACA,GAAA+C,GAAAnc,EAAAA,cAAAA,EAAAA,ORuwDYqc,GAAerc,UAAYmc,EAAgB/U,EAAWC,OAAO8U,GAAejV,IAAM,KQpwD9FuU,EAAAA,QAAAA,OAAAA,EAAAA,YAAAA,EAAAA,WAAAA,EAAAA,EAAAA,UAIAR,EAAAqB,EAAAtY,OAAAA,SAAAiY,GACAb,MAAAhY,QAAAgY,EAAAA,YAAApX,KAAAA,SAAAA,EAAAA,GAAAiY,MAAAA,GAAAA,UAAAA,EAAAA,YRuwDUR,KAEFR,EQrwDRsB,aAAAA,SAAAA,EAAAA,GACAnB,EAAAA,MACApX,OAAAoX,ERswDYa,OQrwDZM,KRwwDQtB,EAAWuB,eAAiB,SAASxY,EAAQiY,GAE3C,IAAK,GQtwDfb,GRswDmBpV,EAAIoV,EAAgB7b,OAAQyG,KQnwD/CiV,GAAAA,EAAAjV,GAAAhC,SAAAgC,GAAAA,EAAAA,GAAAA,SAAAA,EAAAA,CACAoV,EAAAA,CRqwDc,OAGJA,EAAgBzE,OAAO4F,EAAU,IAEnCtB,EAAWxc,SAAW,SAASuH,GQ1vDvC5E,EAAA4E,GAAA+F,SAAA,WAGAvK,EAAA2J,OACA8P,ER0nDM,GQrzDNT,GAAAthB,QAAAwB,QAAAQ,GACA4gB,EAAA5iB,QAAAI,QAAAJ,EAAAI,KAAAohB,oBACAA,EAAAI,QAAAtV,QAAAtM,EAAAI,SAAAsO,KRq7DM,OQ1vDNxL,OR4vDKgF,UQ3vDL1G,eAAA,aAAA,WAAAK,aAAAA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GR4vDI,OACEyG,SAAU,MACVrF,KQ1vDNsgB,SAAAxB,EAAA/hB,EAAAA,GACAujB,GAAAA,IAEArgB,MAAA2H,ER2vDQrJ,SQzvDR+hB,SAAAD,SAAAA,UAAAxY,SAAA1K,GACAmjB,QAAA3Y,UAAAA,EAAAA,MAAAA,EAAAA,GAAAA,EAAAA,KR2vDQ,IQzvDR5K,GAAA+hB,EAAA/hB,ER0vDQujB,GQzvDRA,aAAAvjB,EAAA8K,OAAA1K,GR0vDQ8C,EAAM2H,IAAI,WAAY,WAChB0Y,IACFA,EAAUD,eAAetjB,EAAQ8K,OAAQ1K,GQnvDrD8H,EAAA0C,WAGAtC,EAAA,KACArH,EAAA,YRuvDOiH,UQnvDPsb,mBAAA,aAAAnb,WAAA,aAAAmb,aAAA,SAAAze,EAAAwc,EAAArT,EAAA6T,GRovDI,OACEzZ,SAAU,IACVrH,QAAS,SAAkBb,EAASiI,GAClC,GAAI9E,GAAWnD,EAAQ,GAAGgU,iBAAiB,eS/+DnD5S,SAAAf,QAAA8C,EAAA,SAAAkgB,GAIA7iB,GAAAA,GAAAA,QAAAA,QAAAA,EACAC,GAAA0R,SAAAlK,KAAA,eAAA,IAAAA,KAAA,cAAAmb,EAAAnb,KAAA,gBTk/DE7G,QS1+DFzB,OAAAA,0BAAA,2BAAAiE,SAAA,WAAA,WT2+DI,GS1+DJxB,GAAAA,KAAA5B,UACAmD,UAAA,UACAG,YAAA,GACAtB,WAAA,EACAqI,QAAA,EACAyY,UAAA,QACAvf,YAAA,2BACAgH,iBAAA,ET2+DMpH,QAAS,QSx+Df/C,UAAA0D,EAEA9B,MAAA,ETy+DMqI,MSt+DNjL,GTu+DM0jB,QSr+DNC,GTs+DMxf,MSn+DNnE,ETo+DMmL,WSn+DNwY,ETq+DI3iB,MSl+DJ0D,MAAAif,WAAAA,SAAAA,GTm+DM,QAASC,GAAexjB,EAASgF,GS/9DvC,GAAApF,GAAA4jB,QAAAA,UAAAA,EAAAA,GTi+DYD,EAAW3e,EAAS5E,EAASJ,ESt9DzCsI,OALAJ,GAAAwb,UAEAG,EAAAA,OAAAA,QAAA/e,EAAA+e,SAGAvb,EAEArF,MAAA2gB,OT49DK1b,USx9DLlI,aAAAA,UAAAA,OAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GTy9DI,GAAI6jB,GSz9DR3gB,EAAAA,uBAAAA,EAAAA,UT09DI,QACEoF,SS19DN7G,MT29DMyB,OS19DN,ET29DMD,KAAM,SAAkBC,EAAO9C,EAASiI,GSv9D9C,GAAAG,GACAhH,GACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,kBAAAI,YAAAA,YAAAA,QAAAA,UAAAA,OAAAA,YAAAA,cAAAA,YAAAA,KAAAA,cAAAA,cAAAA,aAAAA,SAAAA,GACA4G,QAAAnC,UAAAzE,EAAA6G,MAAAC,EAAAA,GAAA9G,EAAA+G,KTw9DQ,ISt9DR5I,GAAAkD,eTu9DQ1B,SAAQC,SAAU,OAAQ,YAAa,aAAe,SAASI,GACzDL,QAAQ8E,UAAU+B,EAAKxG,KAAS2G,EAAiBK,KAAKR,EAAKxG,MAAO7B,EAAQ6B,IAAO,KSl9D/FL,QAAAA,SAAA8E,eAAAmO,SAAA,eAAA,UAAA,SAAA5S,GACA,GAAA2G,GAAAA,KAAAA,EAAAK,OAAA4L,GAAAA,cAAA5S,EAAA+G,MAAA,EACA5I,SAAA8K,UAAAzC,EAAAI,MTq9DYzI,ESp9DZ6B,GAAAqB,EAAAsR,MAAAnM,EAAAI,MTu9DQ,IAAIgM,GAAarU,EAAQiI,KAAK,cSj9DtC7G,SAAAC,UAAAgT,KACApM,EAAAQ,KAAA4L,GACApM,EAAAsM,QAAA9S,ETo9DY7B,ESl9DZwB,OAAA8E,GTq9DQ9E,QAAQC,SAAU,QAAS,WAAa,SAASI,GAC3CwG,EAAKxG,IACPwG,EAAKsM,SAAS9S,EAAK,SAAS4H,EAAUC,GACpCxG,EAAMrB,GAAO2P,EAAKC,YAAYhI,GAC1BjI,QAAQ8E,UAAUoD,IS/8DpCrB,EAAA,WACAkB,GAAAua,EAAA9Q,wBAMA3K,EAAA7G,WTi9DU0B,ESh9DV2gB,OAAAA,EAAAA,UAAA,SAAApa,EAAAC,GACAlI,QAAAuiB,SAAAA,GTi9DcviB,QAAQQ,OAAOkB,EAAOuG,GS98DpCvG,EAAAwgB,QAAAja,EAIApB,QAAAwM,UAAAnL,IACAxG,EAAA,WACA6gB,GAAAviB,EAAA8E,sBTi9Da,GAED+B,ES98DZ0b,QT+8DU7gB,EAAMqG,OAAOlB,EAAKwM,OAAQ,SAASpL,EAAUC,GACtCqa,GAAYviB,QAAQ8E,UAAUmD,KAC/BjI,QAAQG,SAAS8H,KAAWA,IAAaA,EAASqL,MAAM,wBS38DxEzM,KAAA,EACAnF,EAAAqG,OAEAwa,EAAAviB,UTg9DY6G,ES58DZ0b,WT68DU7gB,EAAMqG,OAAOlB,EAAK+C,UAAW,SAAS3B,GAC/Bsa,GAAYviB,QAAQ8E,UAAUmD,KAC/BjI,QAAQG,SAAS8H,KAAWA,IAAaA,EAASqL,MAAM,0BSz8DxEzM,KAAA,EACAnF,EAAAqG,YAAAgC,GAEAwY,EAAAhP,YAAAtL,MAQAvG,EAAA2H,UACA3H,EAAA6gB,OAAAA,EAAAA,SAAAnZ,SAAAA,GACA5K,GAAAwB,QAAA8E,UAAAmD,IACAsa,EAAAhP,YAAAtL,KTy8DQsa,EAAUJ,EAASvjB,EAASJ,GAC5BkD,EAAM2H,IAAI,WAAY,WUzmE9BpK,GAAAsjB,EAAAnZ,UAIAhK,EAAAI,KACA2b,EAAA,YV4mEEnb,QUtmEFf,OAAA,4BAAAuD,SAAA,UAAA,WVumEI,GUvmEJpD,GAAAA,KAAAA,UVwmEM+b,YAAa,SACbqH,UAAW,mBUpmEjB9b,QAAAA,EAIAlH,MAAA0D,KAAA,WACA4D,OACArF,SAAArC,MVsmEKsH,UUjmEL1G,YAAA8E,UAAAzE,YAAAA,UAAAA,SAAAA,EAAAA,EAAAA,GVkmEI,GAAIjB,GAAWqjB,EAAQrjB,QACvB,QACE0H,SU9lEN,IV+lEMrF,KU7lEN,SAAAyG,EAAAA,EAAAA,EAAAA,GV8lEQ,GU5lER1J,GAAAkkB,QAAA9jB,KAAAQ,EV6lEQY,SU3lERA,QAAAC,OAAAyiB,KAAAA,GAAAC,SAAAA,GAEA3iB,QAAA4iB,UAAA5iB,EAAApB,MAAA+jB,EAAAA,GAAAA,EAAAA,MV4lEQjhB,EU1lERqG,OAAAvJ,WV2lEU,MU1lEVqkB,GAAAC,QV2lEW,SAAS7a,EAAUC,GACpB,GU1lEVwa,GAAA9jB,EAAAmkB,GAAAF,iBAAA,MAAArkB,EAAAgkB,UAAA,IV2lEUxiB,SUzlEVgjB,QAAA3b,EAAAY,SAAA0a,GV0lEY,GUzlEZC,GAAAvR,QAAA7S,QAAA2c,GV0lEgB0H,EUzlEhBD,EAAA/b,KAAArI,EAAAgkB,WAAAnhB,QAAA,IAAA,MACAuhB,GAAAtQ,SV0lEcuQ,EAAU,IAAMA,EAAU,IAE5B,IAAIG,GAAS,GAAID,QAAOF,EAAS,IAC7BG,GAAO3b,KAAKY,GACd2a,EAAUvR,SAAS7S,EAAQ2c,aWjpEzClc,EAAAqT,YAAA9T,EAAA2c,sBX0pEEnb,QWhpEFuJ,OAAA,wBAAA,sBAAA,sCAAA/G,SAAA,SAAA,WXipEI,GWhpEJjE,GAAAiB,KAAAJ,UACAL,UAAA,UACAiC,kBAAA,UACAyB,YAAA,GACA7D,YAAA,QACAqkB,YAAA,QACAvgB,UAAA,MACAtB,YAAA,uBACA4E,SAAA,GACAkd,iBAAA,EACAC,WAAA,EXipEMvkB,QAAS,KW9oEfY,UAAA0D,EAEAR,UAAAzC,EACAmB,MAAAihB,EACArc,MAAAod,EAEAF,KAAAG,KACAF,OAAAG,KX+oEI9jB,MW5oEJ0D,MAAAqgB,UAAAA,aAAAA,cAAAA,WAAAA,WAAAA,OAAAA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GXupEM,QAASC,GAAa5f,GAyIpB,QAAS8N,KWnlEjB+R,EAAAtd,MAAA3H,EAAAH,YAAA,QAAAolB,GACAzjB,QAAAsP,UAAA9Q,EAAAgM,SAAAxK,QAAA+E,WAAAvG,EAAAgM,SAEAhM,EAAAkG,OAAAlG,GXqlEUklB,EAAa7c,KAAK,cAAe,SWllE3C6c,EAAA5e,GAAAA,QX6mEQ,QWzkERtG,KX0kEUkD,EWzkEV0hB,MAAAA,EAAAvc,YAAA,QAAA4c,GX0kEczjB,QAAQ8E,UAAUtG,EAAQmM,SAAW3K,QAAQ+E,WAAWvG,EAAQmM,SAClEnM,EAAQmM,OAAO8Y,GWvkE3BL,EAAA9Q,UAAA9T,QAAAc,IX0kEY8jB,EAAY9Q,YAAY9T,EAAQc,YAAc,SAC1Cd,EAAQykB,UWvkExBG,EAAAO,KAAAA,cAAAA,UAIAnlB,EAAAolB,WXwkEYR,EWrkEZxkB,YAAA0P,EAAAhP,YAAA6O,SAAAA,EAAAvP,WXwkEQ,QAAS+kB,KACP,GAAIE,GAAoB,8HWlkElC,IAAA7W,EAAA8W,cAAAA,CACA,GAAA9W,GAAAoS,MAAAA,UAAAvc,OAAAkhB,KAAAL,EAAA,GAAA9Q,iBAAAiR,GAAA,SAAAjlB,GACA,MAAAglB,GAAAD,YAAAA,GAAAA,EAAAA,aAAAA,GAAAA,IAAAA,EAAAA,eAEA,OAAAK,IXskEQ,QWlkER9f,GAAA8I,GXmkEU,GWlkEVA,EAAA4W,cAAA,CXmkEY,GAAIA,GAAYD,GAChB,IAAIC,IAActlB,EAAW,MWhkEzC2M,KACAwY,EAAAnU,MAAA2U,UAAAC,QAAAH,KAAAH,GXmkEY,IAAI1f,GWjkEhB0f,EAAA5H,QAAAhP,EAAAoS,cACAqE,OAAAzd,GAAAA,EAAAA,IA+CA,QAAAme,KACA3lB,EAAAykB,WACAS,EAAArY,GAAAA,QAAA+Y,GACAC,EAAAhZ,GAAAA,QAAA+Y,GACAC,EAAAhZ,GAAAA,QAAAiZ,IAIA,QAAA/Y,KACA/M,EAAAkE,WACAghB,EAAA3Y,IAAA,QAAA0Y,GACAC,EAAArY,IAAA,QAAAoY,GXsjEYY,EAAgBhZ,IAAI,QAASiZ,IAGjC,QWpjER9lB,KACAklB,EAAAA,WACAA,EAAArY,GAAAA,QAAAoY,EAAAA,UXqjEYC,EAAa3Y,GAAG,UAAW0Y,EAAOrd,aAGtC,QWjjERhC,KACA5F,EAAAykB,WACAQ,EAAA7S,IAAAA,QAAAA,EAAAA,UXkjEY8S,EWjjEZrY,IAAA,UAAAoY,EAAArd,aXojEQ,QAASge,GAAoBhgB,GW/iErCA,EAAAkgB,SAAAA,EAAAA,gBACApf,WAAAA,EAAAA,SXijEYue,EAAO7S,QW7iEnB6S,EAAAA,QXkjEQ,QAASa,GAAoBlgB,GW5iErCA,EAAAmgB,iBX+iEQ,QW7iERA,KX8iEcd,EAAOnU,UAA6B,OAAjBoU,IW3iEjCS,IACAT,KX8iEca,IACFA,EAAW/U,WW1iEvB+U,EAAAd,MAMAC,IAEAhiB,EAAAA,SXuiEYgiB,EAAeD,EAAOvd,SAAW,MWl6E7C,GAAA1H,MACA8kB,EAAAA,EAAAzV,SAAArP,QAAA2kB,UAAA/jB,EAAAwE,GACA4gB,EAAAA,EAAAA,SAAAlB,EAAA7jB,QAAAjB,GXuoEYkD,EAAQ+hB,EAAO3f,OAAStF,EAAQkD,OAASlD,EAAQkD,MAAMiO,QAAUpM,EAAWoM,MWjoExF8T,GAAAjlB,SAAA2R,EAAA3R,YAEAilB,EAAAgB,UAAA,QAMAjmB,EAAAA,SX8nEU8kB,EAAmBzV,SAASrP,EAAQ2kB,OAAQ,IW1nEtDzhB,EAAA4hB,EAAA,IX6nEQG,EW3nERA,IAAAtd,EAAAA,IAAAA,EAAAA,SAAAA,EAAAA,QAAAA,KAAAA,OAAAA,GX4nEQsd,EAAOgB,YAAc,aACrBxkB,GAAU,QAAS,WAAa,SAASI,GW1nEjDqkB,EAAArkB,KAAAqB,EAAArB,GAAA2P,EAAAC,YAAAzR,EAAA6B,OX6nEQqB,EW3nER+hB,MAAAzd,WX4nEUtE,EAAMmC,aAAa,WACjB4f,EAAOtd,UAGXzE,EW3nER+hB,MAAAxY,WX4nEUvJ,EAAMmC,aAAa,WACjB4f,EAAOzd,UWrnEnBtE,EAAAgiB,QAAAA,WACAhiB,EAAA6iB,aAAAA,WACAF,EAAAA,YX2nEQZ,EW1nERnU,SAAA5N,EAAA4N,UAAA,CX2nEQ,IW3nER7C,GAAAkY,EAAA3W,EX8nEYqW,EAAkBrkB,QAAQpB,QAAQ,eAAiBJ,EAAQc,YAAc,eA4P7E,OWz3ER6K,GAAA4D,KACAwC,SAAAA,QACAkT,IAAAA,MX+nEUhX,KAAM,MW5nEhBgX,OAAAhT,MAGAzC,MAAAxP,QX6nEQ2L,EW3nERsZ,KAAAzd,SAAAA,GX4nEUuK,EAAchR,EACdkkB,EAAOhT,SWvnEjBgT,EAAAra,KAAAA,WAGAwb,EAAAA,MAGAljB,EAAA2iB,aAAA,WACAA,EAAAA,UXynEQZ,EAAOra,QAAU,WWjnEzBqa,IACAA,IAEAY,EAAAtT,SACAsT,EAAArT,MXmnEUtP,EWjnEVqP,YXmnEQ0S,EAAOzd,KWjnEf,WXknEU,IWjnEVyd,EAAAjlB,SXinEU,CACA,GWjnEVuS,GACAC,CX0oEU,IAxBIhR,QWjnEd2Q,UAAAnS,EAAAiE,YXknEYsO,EWjnEZA,EAAAtO,UXknEYuO,EWjnEZA,EAAAxS,UAAAI,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,UAAAA,GAAAA,WAAAA,MXmnEgBJ,EAAQiE,WW9mExBihB,EAAAA,EAAAkB,EAAAA,WAIAL,EAAAA,EAAAd,IAAA3f,EAAA6L,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,GAAAA,WAAAA,OAIAnR,EAAAykB,KAEAS,EAAAA,EAAA3V,SACAsW,GAAAtW,IX4mEUwW,EW5mEVM,EAAAL,OAAAA,OX6mEUd,EAAeD,EAAOvd,SAAWqK,EAAY9O,KAAK8iB,EAAY,SAASnT,EAAe1P,MW1mEhG2hB,EAAAA,WX4mEYK,EAAa3V,KWzmEzBrM,UAAAgD,EAAA,GAAArG,IX4mEYgmB,EAAgBtW,KWzmE5B/N,UAAA8E,EAAA9E,GAAA8Q,IX4mEYuS,MWvmEZnS,EAAAA,MAAA1S,EAAAH,YAAA,eAAAolB,GAAAqB,iBXymEU,CWrmEVpB,QAAAA,UAAArS,EAAA7S,eAAAumB,QAAAA,WAAAA,EAAAA,eXymEYvmB,EAAQsS,aAAa2S,GAEvBC,EWtmEV9kB,KXumEYsS,QAAS,UWnmErBG,SAAAhS,EAAAA,WACAb,EAAAA,aXqmEYklB,EWpmEZW,SAAAhT,EAAA7S,aAEAklB,EAAAA,MAAArS,EAAA7S,EAAAa,OXqmEYW,QAAQpB,QAAQmC,EAAY,gBAAiB2iB,EAAa,KAAKrS,SAASkS,EAAW/kB,EAAQ0kB,OWjmEvGzR,EAAAvG,YXomEgB1M,EAAQykB,UW/lExBjjB,EAAAglB,SAAAxmB,EAAAymB,mBXkmEYvB,EWhmEZrS,SAAA7S,EAAAa,YXkmEcb,EAAQykB,UW9lEtBQ,EAAAnU,MAAAA,EAAAA,EAAA,MAIA1C,QAAA8W,QAAAA,OAAA,EACArB,EAAAA,MAAAA,EAAAtR,EAAAC,EAAAU,GX+lEYD,EAASvG,MAAMwY,EAAc3S,EAAQC,GAAOrS,KAAK+S,GWxlE7D+R,EAAAjlB,SAAAykB,EAAA3T,UAAA,EX2lEU/K,EW1lEV6e,EX2lEU,IAAIxW,GAAK8W,EAAa,EWxlEhCrB,GAAAhjB,WACA+jB,EAAAA,UAIA8B,EAAAA,SAAAA,EAAAA,YAAAA,SACA3Z,EAAAA,UACAkY,EAAA7S,KAAAA,cAAAA,QAGApS,EAAAkT,WACAhQ,EAAAlD,SAAAH,EAAAA,YAAAolB,SAAAA,EAAAA,WXwlEUyB,IACA3Z,IWplEVmY,EAAAA,WX+lEQD,EAAOtd,KAAO,WWjlEtBud,EAAAA,WAEAD,EAAAA,MAAAgB,EAAAA,YAAAhB,eAAAgB,GAAAK,mBXolEc9kB,QW9kEd8E,UAAAtG,EAAAqT,eAAA7R,QAAA+E,WAAAvG,EAAAqT,eACAJ,EAAAA,aAAAiS,GAGAA,EAAAT,KAAAA,cAAA,QAEAI,EAAAA,aAAAA,kBAAAA,GAAAA,aAAAA,EAAAA,cACA5R,QAAAK,QAAAuS,OAAAA,EX6kEY5S,EAASK,MAAM4R,EAAcjZ,GW1kEzClG,EAAA7C,MAAAA,GAAAA,KAAAA,GAIAgK,EAAAA,WX2kEY2X,IWxkEZ5R,EAAAhH,MAAAA,IAEAgZ,EAAAzjB,SAAA8E,EAAAtG,UAAAmM,EX0kEUpG,EWzkEVoG,GX0kEUwZ,IWxkEVzY,OA8CA+X,EAAA7S,OAAA,WACA8S,EAAAA,SXikEYD,EAAOtd,OWzjEnBsd,EAAA0B,QX8jEQ1B,EAAO7S,MAAQ,WACb8S,EAAa,GAAG9S,SAElB6S,EW1jERjlB,SAAAkE,SAAA0B,GACAyB,KAAAzB,EAAAA,OAAAqf,EAAAnU,WX2jEYmU,EWzjEZ2B,OX0jEYhhB,EWzjEZe,oBX4jEQse,EAAOrd,WWxjEfwd,SAAAD,GXyjEU,GAAInlB,EWxjEd4F,UACAwf,IXwjEgBxf,EWxjEhBwf,QAAAA,CXyjEc,GAAIwB,GWxjElBtB,EAAA1f,EAAAihB,SXyjEc,IWxjEdzB,IAAAhT,EAAAA,CXyjEoBxM,EAAIc,gBAAgBd,EAAIc,iBACxBd,EAAIe,iBAAiBf,EAAIe,iBAC7B,IAAIye,GAAYD,GACZvf,GAAIihB,SACNzB,EAAUA,EAAU/e,OAAS,GAAG+L,QWrjElDpS,EAAAykB,GAAAA,WXgnEeQ,EAET,QAASlf,GAAW7C,GW9hE1BgF,EAAAA,SAAAhF,EAAAgR,OAAAhR,EAAAgR,MAAArM,SAAA3E,EAAAqE,UAGAe,QAAAA,GAAA6L,EAAA/T,GACA8C,MAAA1B,SAAApB,SAAAA,GAAAoO,GAAA4F,iBAAAD,IX8uDM,GW5oEN2S,GAAAtlB,QAAAC,QACAslB,EAAAjiB,EAAA+e,uBAAA/e,EAAAge,WX6oEU8B,EAAcpjB,QAAQpB,QAAQ0E,EAAQ0J,SAASE,MW1oEzDmW,EAAAG,EAEAF,EAAAG,KAGAe,EAAA/U,KACA8T,GACA+B,GAAA5jB,WAEA6jB,GAAA,WXi7EM,OW5hEN/mB,OX8hEKkI,UW9hEL9H,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GX+hEI,OACEkI,SAAU,MACVpF,OWhiEN1B,EXiiEMyB,KWhiEN,SAAAqD,EAAAzE,EAAA7B,EAAA6B,GXiiEQ,GAAI7B,IW7hEZkD,MAAAlD,EACAA,QAAAumB,EX+hEU/e,MAAM,EW1hEhBhG,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAAI,kBAAAA,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,YAAAA,oBAAAA,KAAAA,cAAAA,cAAAA,cAAAA,aAAAA,OAAAA,UAAAA,SAAAA,GACAL,QAAA8E,UAAA+B,EAAAxG,MAAAA,EAAA2G,GAAAA,EAAAK,MAIArH,EAAAC,aACAzB,EAAAyI,YAAA5G,EAAAmlB,WX4hEQ,IW1hERhnB,GAAAkD,eX2hEQ1B,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQ8E,UAAU+B,EAAKxG,KAAS2G,EAAiBK,KAAKR,EAAKxG,MAAO7B,EAAQ6B,IAAO,KAEvFL,QWxhER6G,SAAA,eAAA,SAAA,eAAA,UAAA,SAAAxG,GXyhEU,GWxhEVwG,GAAAsM,KAAA9S,EAAA6G,OAAAe,GAAAA,cAAAC,EAAAA,MAAAA,EACAxG,SAAArB,UAAA4P,EAAAA,MXyhEYzR,EAAQ6B,GAAOqB,EAAMsR,MAAMnM,EAAKI,OWnhE5CjH,QAAA6G,SAAA,QAAA,WAAA,SAAAxG,GACAqB,EAAAqG,IACAlB,EAAA7G,SAAAkC,EAAAA,SAAA+F,EAAAC,GACAlI,EAAAA,GAAAQ,EAAAkB,YAAAuG,OX0hEYpB,EWthEZ4e,SXuhEU/jB,EAAMqG,OAAOlB,EAAK4e,QAAS,SAASxd,EAAUC,GWnhExDwd,QAAAjC,SAAAjlB,GAEAA,QAAAkE,OAAAA,EAAAuF,GAEArJ,EAAAsjB,QAAAtR,IXqhEa,EW7gEblP,IAAAA,GAAA+hB,EAAAjlB,EACAA,GAAAknB,WACAlnB,EAAAA,YAAA,WACAknB,EAAA,GAAA9U,UXkhEQhS,EAAQmM,GAAGlE,EAAKtE,SAAW,QAASmjB,EAAMza,QAC1CvJ,EAAM2H,IAAI,WAAY,WYphF9BiI,GAAAA,EAAA0T,UACAhlB,EAAA,KAIAqiB,EAAAA,YZuhFMriB,QY1gFNsR,QAAA0T,MAAA,GAAAhlB,QAAAsR,QAAAqU,IAAA,IZ2gFI3lB,QY1gFJ4lB,OAAAA,MAAAA,QAAAzV,SAAAA,UAAAA,WAAAA,SAAAA,EAAAA,GZ2gFM,GAAIkS,GAAwB/e,EAAQ+e,uBAAyB/e,EAAQuiB,6BAA+BviB,EAAQwiB,yBYxgFlHF,EAAAxJ,EAAAA,sBAAAA,EAAAA,4BAAAA,EAAAA,yBAAAA,EAAAA,kCACA2J,IAAAriB,EACAsiB,EAAAD,EAAA,SAAA3J,GZ0gFQ,GYzgFR1Y,GAAAA,EAAAuiB,EZ0gFQ,OAAO,YACLL,EAAqBzV,KYrgF/B,SAAA6V,GZwgFQ,GAAIC,GAAQviB,EAAS0Y,EAAI,OAAO,EAChC,OAAO,YaxiFfnd,EAAA4R,OAAAoV,IAQAzmB,OboiFMwmB,GAAIE,UAAYH,EapiFtB7iB,KbwiFElD,QajiFFf,OAAAT,0CAAAoF,SAAAA,gBAAAA,WbkiFI,GajiFJ4D,GAAAA,KAAA2e,UbkiFMnD,Oa/hFN1P,+KbiiFI9T,Ma/hFJ0D,MAAAkjB,SAAAA,KAAAA,SAAAA,EAAAA,GbgiFM,Qa9hFNC,GAAAA,EAAAA,GbgkFQ,QathFRnmB,GAAAwB,EAAA5B,GbuhFU,MathFV8H,GAAAkI,IAAA,SAAAwD,EAAApP,GbuhFY,GavhFZhE,GAAAgE,EAAAiF,IAIA3B,ObshFY1H,GAAOsmB,GAAa9S,EACpBnK,EAAQmd,EAAU5kB,EAAO5B,GACzBI,EAAQqmB,EAAQ7kB,EAAO5B,IavhFnCqJ,MAAA3B,Eb0hFctH,MAAOA,EathFrBsmB,MAAAA,KAnDA,GAAAC,MAEAF,EAAAA,QAAAA,UAAAA,EAAAA,EACA/e,GAAAY,UAEAZ,IAAAA,GACAA,EACA8e,EACAF,EACAC,EACAI,EACAF,CCxBAzb,OdqjFQtD,Ga5hFR6V,KAAA/J,Wb6hFU9L,EAAcM,OAASwL,EAAQzM,EAAKyM,MAAM9U,EAAQwkB,Qa1hF5Dxb,EAAAY,EAAAA,EAAA,IAAAkL,EAAA5R,IACA0kB,EAAA1lB,EAAA0H,IAAA1G,EAAAA,Gb4hFU2kB,Ea1hFVrmB,EAAA4e,Gb2hFU6H,Ea1hFV7e,EAAAA,EAAAA,IAAAA,Ib2hFU2e,EAAUlJ,EAAO/J,EAAM,GAAKA,EAAM,GAAK8S,GACvChe,Ea1hFVZ,EAAA2e,EAAAA,Kb4hFQ3e,EAAcY,SAAW,SAAS1G,EAAOhC,GACvC,MAAOiB,GAAGD,KAAK0H,EAAS1G,EAAOhC,IAAaf,KAAK,SAASiJ,GAKxD,Ma7hFZJ,SAAAgB,QAAAA,KACA9G,MAEA8F,EAAA8e,QAAA5kB,EAAAA,OAAAA,EAAAA,EAAAA,Mb0hFmB8F,EAAc2e,WAGzB3e,EathFR1H,aAAAA,SAAAA,GbuhFU,GathFV4B,KbwhFU,OADAA,GathFVxB,GAAAA,EACAJ,EAAAsmB,IC3DAhK,EAAAA,OAOAtR,Ed8lFM,MAAO0b,OAGXxmB,QcrlFFpB,OAAAA,wCAAA8nB,QAAA,aAAA,WdorFI,QcliFJC,GAAAC,GdmiFM,GAAIA,GAAahoB,EAAQioB,cczhF/Bta,EAAA3N,EAAAA,cAAAkoB,CACA,IAAA5mB,EAAAtB,EAAAuP,aAAAA,MAAAA,GAAAA,eACA,MAAA2Y,IAAAhc,EAAA6b,EAAA,SAAA,WAAAvK,EAAArO,IAAA4Y,EAAA,aACAzmB,EAAA6N,EAAA4Y,Yd4hFM,Oc1hFNzmB,IAAAtB,EAAAqO,gBdq7EI,GcrlFJ/M,MdslFQ4K,EcrlFRic,EAAAA,SAAAC,SAAApoB,EAAAud,GdslFM,McrlFNjc,GAAA6mB,UAAAC,EAAApoB,SAAAuO,gBAAAA,EAAAA,cd4sFI,OArHAiP,GAAGrO,IcrlFP7N,SAAAtB,EAAAuO,EAAAA,GdslFM,GAAIjN,EAQJ,OANEA,GctlFRtB,EAAAqoB,adslFgBroB,EAAQsoB,aAAa/Z,Gc7kFrC4Z,EAAAC,iBACAG,EAAAvoB,iBAAAuN,GAAAA,GAEAvN,EAAAwoB,MAAAja,GAEAZ,KAAA4a,EAAA5a,WAAA3N,IAAAuP,EAAAA,GdglFIiO,EAAGzP,Oc9kFPwa,SAAA1a,Gd+kFM,GAAI0a,GAAUvoB,EAAQuN,wBAClBya,EAAahoB,EAAQioB,acpkF/BzK,QACA9P,MAAA+a,EAAAA,OAAAA,EAAAA,YACA9a,OAAA+a,EAAAA,QAAAA,EAAAA,aACA9a,IAAA+a,EAAAA,KAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,EAAAA,gBAAAA,WAAAA,GACA9a,KAAA+a,EAAAA,MAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,KdwkFIpL,EcrkFJzO,UAAA8Z,SAAAA,EAAAA,EAAAA,GACA,GAAAna,GACAoa,EACA5Z,EAGAR,EACA1O,EdokFU+oB,EcjkFVC,EACAL,EAAAxZ,EAAAA,IAAAnP,EAAA,YACA+oB,EAAAvL,QAAAxd,QAAAA,GACA6oB,IAKAA,YAAAA,IACAJ,EAAAA,MAAAjL,SAAA9O,YdgkFMsa,Ec9jFNP,EAAAA,OAAAA,Gd+jFME,Ec9jFNnL,EAAArO,IAAAnP,EAAA,Od+jFM+oB,Ec9jFN5X,EAAAA,IAAAA,EAAAwX,Qd+jFME,Gc9jFNE,aAAA5X,GAAA,UAAAzC,KAAAia,EAAAI,GAAA3L,QAAA,Wd+jFUyL,Gc5jFVJ,EAAAtiB,EAAAA,SAAAvG,GACAA,EAAAA,EAAAulB,Id8jFQuD,EAAUD,EAAY5a,Oc1jF9BqB,EAAAtB,WAAAA,IAAAob,Ed6jFQN,EAAUvX,WAAW4X,IAAe,Gc1jF5C7Z,QAAArB,WAAAA,Kd6jFQjO,EAAUA,EAAQulB,KAAKnlB,EAAS0M,EAAGsc,IczjF3C7D,OAAAvlB,EAAAoP,Md4jFQE,Ec3jFRtB,IAAAhO,EAAAgO,IAAAob,EAAApb,IAAAgb,GAEA,OAAAhb,EAAAsB,Od4jFQA,Ec3jFRrB,KAAAqB,EAAArB,KAAAmb,EAAAnb,KAAA6a,Gd6jFU,SAAW9oB,GACbA,EAAQoP,MAAMmW,KAAK2D,EAAS5Z,GcjjFpC4Z,EAAAG,KAAArb,IAAAsB,EAAAtB,IAAA,KAAAC,KAAAqB,EAAArB,KAAA,QdyjFI2P,EcpjFJ9O,SAAA1O,SAAAA,GdqjFM,GcziFNkpB,GACAD,EAVAlb,GdmjFQH,IcjjFR,EAGAsb,KAAAA,EA4BA,OduhF0C,UAAhC1L,EAAGrO,IAAInP,EAAS,Yc1iF1BipB,EAAAA,EAAArb,yBd6iFQsb,EAAiBC,EAAoBnpB,GcxiF7C+N,EAAAyP,EAAAzP,OAAA/N,GACA0N,EAAA1N,EAAA0P,UACA/B,EAAA4B,EAAAA,OAAAA,IAEA1B,EAAAA,KAAAob,EAAAA,IAAAA,EAAA9Z,kBAAA,Gd0iFQ8Z,EAAiBpb,MAAQ2P,EAAGrO,IAAI+Z,EAAgB,mBAAmB,Kc/hF3Exb,MAAAsa,EAAAhoB,YACA2N,OAAAoa,EAAAA,aACAna,IAAA1B,EAAA6b,IAAAA,EAAAna,IAAA4P,EAAArO,IAAA6Y,EAAA3Z,aAAAA,GACAR,KAAAka,EAAAA,KAAAA,EAAAA,KAAAA,EAAA5Y,IAAAnP,EAAAmP,cAAA4Y,Kd8iFIvK,Ec1hFJ7P,OAAArM,SAAAA,EAAAA,Gd2hFM,GAAIA,GAAQtB,EAAQuP,YAMpB,OcvhFN7B,GACApM,GAAAA,EAAAtB,IAAAA,EAAA0P,aAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAEApO,GAAAkc,EAAArO,IAAAnP,EAAA,cAAA,GAAAwd,EAAArO,IAAAnP,EAAA,iBAAA,GAAAwd,EAAArO,IAAAnP,EAAA,kBAAA,GAAAwd,EAAArO,IAAAnP,EAAA,qBAAA,GAEAsB,GdohFIkc,EclhFJ9P,MAAApM,SAAAA,EAAAA,GdmhFM,GAAIA,GAAQtB,EAAQ0P,WevtF1B,ODuMAwY,GdkhFQ5mB,GAASkc,EAAGrO,IAAInP,EAAS,cAAc,GAAQwd,EAAGrO,IAAInP,EAAS,eAAe,Ge3tFtFsB,GAAAkc,EAAA4L,IAAAA,EAAAC,eAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,mBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,oBAAAA,GAEA/nB,GAEAkc,If+tFEpc,Qe7tFFf,OAAAoQ,sCAAAqX,QAAA,YAAA,WAAA,SAAAhjB,Gf8tFI,Me7tFJA,UAAAmN,EAAAxB,EAAAA,Gf8tFM,GAAIA,GAAU,IACd,Oe7tFNA,Yf8tFQ,Ge7tFRA,GAAA7P,KACA0oB,EAAAD,UACAD,EAAA5lB,IAAA8lB,CAkBA,Of4sFY7Y,IACF3L,Ee7tFVmN,OAAAxB,Gf+tFQA,Ee7tFRjN,EAAA+lB,Wf8tFU9Y,EAAU,Ke5tFpBA,Gf8tFY2Y,EAAK5lB,MAAM+lB,EAASD,IettFhCxB,GAAA,GACA0B,GACA/Y,EAAAA,MAAA8Y,EAAAD,GAEA7Y,Of2tFOqX,QextFPrX,YAAA,WAAA,SAAA3L,GfytFI,MextFJ,UAAAlF,EAAA6pB,EAAAA,GfytFM,GAAIhZ,GextFVjN,If0tFM,OADK5D,KAASA,MevtFpB6Q,WfytFQ,GextFRA,GAAA7P,KACA0oB,EAAA1pB,SfytFa6Q,KACC7Q,EAAQ6pB,WAAY,GACtBL,EextFZM,MAAAH,EAAAD,Gf0tFU7Y,EAAU3L,EAAS,WACjB2L,EAAU,KACN7Q,EAAQ+pB,YAAa,GgB3wFrCtpB,EAAAmD,MAAA+lB,EAAAD,IAOAM,GAAA,ShB4wFExoB,QgBvwFFR,OAAAyY,wCAAAzV,SAAA,eAAA,kBAAA,SAAAimB,GhBwwFI,QgBvwFJC,KhBwwFMlpB,KAAKgpB,KAAO,KgBrwFlBG,KAAAA,MAAA1E,EAAAzkB,KAAAkpB,IAAAA,EhBwwFMlpB,KAAKqY,MAAQ,EgBvwFnB8Q,KAAAA,QAAA1E,EAAAzkB,KAAAyY,QAAA/X,EhB0wFMV,KAAKkpB,aAAe,EAwCtB,QgBhxFJE,MhBixFI,QgBhxFJriB,GAAAqJ,GhBixFM,OgBjxFNlC,MAAApC,WAAAA,KAAAA,SAAAA,GhBmxFI,QAASud,GAAuBtiB,EAAOrG,GgB9wF3C,IAAAd,GAHA0pB,GAAAviB,EAAA1B,OhBmxFUkkB,EAAM7oB,EAAM8oB,WAAWpZ,cgBhxFjCxQ,EAAAI,EAAAA,EAAAJ,EAAAA,IACAuV,GAAAA,EAAArJ,GAAAsE,gBAAAmZ,EACAE,MAAA3d,EAKA,UhB6tFIqd,EgB3wFJ5Q,UAAA7X,gBAAAA,SAAAA,GhB4wFMV,KAAKkpB,aAAexoB,GAEtByoB,EgB7wFJ9Q,UAAA3X,WAAAA,SAAAA,GhB8wFMV,KAAKyY,QAAU/X,GAEjByoB,EgB/wFJnpB,UAAAqY,WAAAA,SAAAA,GhBgxFMrY,KAAKuY,QAAU7X,GAEjByoB,EgBjxFJO,UAAAhpB,SAAAA,SAAAA,GhBkxFMV,KAAKqY,MAAQ3X,GAEfyoB,EgBnxFJQ,UAAAjpB,SAAAA,WhBoxFM,MAAOV,MAAKqY,OAEd8Q,EgBrxFJH,UAAAtoB,QAAAA,SAAAA,GhBsxFMV,KAAK0pB,IAAMhpB,GAEbyoB,EgBtxFJH,UAAAY,SAAAA,SAAAA,GACA5pB,KAAA2pB,MAAAjpB,GhBwxFIyoB,EgBtxFJ9Q,UAAA3X,YAAA6U,SAAAA,GACAvV,KAAAuY,KAAAA,GhBwxFI4Q,EgBtxFJD,UAAAA,SAAAtS,SAAAA,GAaA,MAZA5W,MAAAgpB,KAAAhpB,EAAAA,chBuxFMA,KAAK2pB,MAAQjpB,EAAMmpB,WgBpxFzBV,KAAAA,IAAA1E,EAAAA,UACAzkB,KAAAqY,MAAAN,EAAA/X,WhBsxFMA,KAAKuY,QAAU7X,EAAMgX,agBnxF3B1X,KAAA8pB,QAAAX,EAAA1E,aAEAzkB,KAAAkpB,aAAAE,EAAAA,kBAGAW,MhBmxFIZ,EAAU1E,UAAUuF,OAAS,WgB/wFjC,MAAAX,IAAAA,MAAAA,KAAAA,KAAAA,KAAAtiB,MAAArG,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,QAAAA,KAAAA,QAAAA,KAAAA,chBkxFI,IgBhxFJopB,GAAAppB,EAAA8oB,UAkBA5pB,EAAAub,KAAAA,UhB8wFMhG,OgB3wFN8U,YhB4wFMR,QgB3wFNS,EhB6wFIlqB,MAAK0D,MgB3wFT1E,UAAAyqB,aAAA,SAAAU,EAAAC,GhB4wFM,GgB3wFNC,GAAA,SAAAjmB,GhB25FQ,QgB5uFRkmB,GAAAnV,GACA,GAAAoV,GAAAA,EAAAC,EACA,OAAAC,GAAAC,GhB8uFQ,QgB3uFRlqB,GAAA2U,GhB4uFU,GgB3uFVwV,GAAAC,EAAAzV,GACA0V,EAAAC,EAAAD,QAAAA,MAAAA,QhB4uFcP,EgB3uFd,kBAEAC,EAAAC,EAAAnlB,MAAAyG,GhB2uFc2e,EgB1uFd5f,OAAA4f,KAAAA,GhB2uFcM,IAWJ,OAVAvqB,SAAQC,QAAQ8pB,EAAa,SAASM,GgBzuFhDE,GAAAA,EAAAF,GhB2uFcA,EAAOC,EAAuBD,OAE9B,KAAK,GAAI/e,GAAI,EAAGA,EAAI2e,EAAaplB,OAAQyG,IgBvuFvD+e,EAAAG,EAAAA,MAAAA,EAAAC,IAAAA,KAAAA,KAAAA,EAAAA,IAaAF,GAAAH,KAAAA,KhBguFiBG,EAAe7K,KAAK,IAE7B,QgB7tFR+K,GAAAA,GhB8tFU,MAAOA,GAAKppB,QAAQ,MAAO,UAAUA,QAAQ,KAAM,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,OAAQ,SAEtO,QgB5tFR4oB,GAAAC,GACA,MAAAQ,SAAAC,KAAAA,GhB8tFQ,QgB1tFRD,GAAAD,GhB2tFU,MAAOA,GAAKppB,QAAQ,WAAY,MAElC,QAASupB,GAAoBD,GgBrtFrC,IAAA,GAFAV,GAAAY,OAAAlW,KAAAA,GACA+V,EAAAI,EACAC,EAAAA,EAAAA,EAAAA,EAAAL,OAAAA,IhBytFYA,EAAKA,EAAGrgB,MAAM,KAAOiB,EAAI,KAAKoU,KAAK,IAAM+J,EAAUQ,EAAa3e,IAAM,IgBrtFlF,OAAA2e,IAAAA,QAAAA,IAAAe,EAAAd,KAAAT,MhBytFQ,QgBvtFRwB,GAAAA,GACA,GAAAC,GAAAA,EAAAA,EACA,OAAAC,GAAAA,GhBytFQ,QgBvtFRC,GAAAA,GhB+tFU,IgB5tFV,GAEAD,GACAE,EAEAD,EhBqtFcC,EgB1tFdpB,EAAAgB,OAAAK,KAAAA,GACAJ,EAAAD,GAAAA,QAAA,cAAA,KAOAG,KhBotFqE,QAAnDH,EAAcK,EAAYC,KAAKZ,KgBjtFjDhQ,EAAAlK,EAAAA,GACA0a,EAAAxQ,EAAAA,GhBmtFY0Q,EAAgBG,EAASL,GgB/sFrCC,EAAAK,KAAAA,EhBktFU,OAAOL,GAzMT,GgBttFRzQ,GACA+Q,EAtDAC,EAAA1C,QAAAzoB,UAAApB,EAAAwE,GACAgoB,KACAC,GACAC,IAAA,WACAC,GAAAvtB,aACAigB,EAAAjgB,EAAAyqB,OAAA,cAAA,mBACA+C,GAAAA,aACAC,EAAAA,EAAAtC,OAAAuC,cAAAC,mBACAC,GAAA,mBACAC,EAAA7tB,EAAAyqB,OAAA,iBAAA,oBACAqD,GAAAA,oBACAC,EAAAA,EAAA5C,OAAAuC,eAAAM,iBACAC,EAAAA,QACAC,KAAAluB,EAAAyqB,iBAAA0D,IAAAjN,KAAA,KACAkN,IAAAA,EAAAV,iBAAAC,SAAAzM,KAAA,KACAmN,GAAA,yBACAC,EAAAtuB,EAAAyqB,OAAA,yBAAA,2BhB4wFUqD,KAAM3C,EAAQuC,iBAAiBa,MAAMrN,KAAK,KgBzwFpD6M,IAAAf,EAAAA,iBAAAA,WAAAA,KAAAA,KACA9B,GAAAA,gBACA7gB,EAAAA,EAAA6O,OAAAA,eAAAA,iBACAsV,KAAA1D,gCACAO,GAAAP,WACAqC,EAAArC,EAAA7R,OAAAA,wBAAAA,kBAEAoU,GACAC,IAAAxC,EAAA9R,gBACAuU,GAAAzC,EAAA9R,WACAwU,EAAAA,EAAApD,WACAqD,GAAAA,EAAArD,WACAwD,EAAAA,EAAA9C,WACA+C,GAAA/C,EAAA2D,SACAxO,EAAA6K,EAAA9R,ShB2wFUsU,GgB3wFVxC,EAAAzR,ShB4wFUkU,EgB5wFVzC,EAAA9pB,ShB6wFUwsB,KAAMpD,EgB5wFhB0D,IAAAA,EhB8wFUF,GgB9wFV9C,EAAA9pB,QhB+wFU6sB,EAAG/C,EAAM2D,QgB9wFnBV,EAAAA,SAAArsB,GAAA,GAAA2X,GAAAqV,KAAAA,WAAArE,EhBixFY,OAAOrpB,MAAKgY,SAAStX,EAAMoT,MAAM,OAASuE,EAAQ,GAAKA,IAEzDyU,KgBlxFV,SAAAY,GhBmxFY,MAAO1tB,MAAK0tB,SAASrE,EAAuBc,EAAQuC,iBAAiBa,MAAO7sB,KAE9EqsB,IgBpxFV,SAAAW,GhBqxFY,MAAO1tB,MAAK0tB,SAASrE,EAAuBc,EAAQuC,iBAAiBM,WAAYtsB,KgBnxF7F2sB,GAAA,SAAA3sB,GAAA,MAAAV,MAAA2a,SAAAA,EAAAja,EAAA,IACA4sB,EAAA,SAAA5sB,GAAA,MAAAV,MAAAU,SAAA,EAAAA,EAAA2E,IhB0xFU+nB,KAAMtD,EAAMnP,YgBtxFtB0S,GAAAM,SAAAA,GACAzB,MAAAA,MAAAA,YAAAA,IAAAA,EAAAA,IAGA/Q,EAAAA,SAAAyS,GACAD,MAAAE,GAAAA,GAAAA,IAAAD,IAAAzS,EAAAA,OAAAyS,KAAAA,YAAAA,IAAAA,EAAAA,GAAAA,KAAAA,YAAAA,EAAAA,ICnHA,OjB84FQzS,GgBrxFRwS,KAAA9lB,WhBsxFUsT,EAAYyS,QAAUzD,EAAQuC,iBAAiB1tB,EAAQmW,SAAWnW,EAAQmW,OgBnxFpFgG,EAAAA,EAAAA,EAAA2S,SAEA5B,EAAA/W,EAAAgV,EAAAuC,UhBqxFQvR,EgBnxFR4S,QAAA5Y,SAAA0Y,GACA,MAAAG,SAAAA,OAAA7Y,IAAAkW,MAAAA,EAAAlW,WACAtQ,EAAAA,KAAAkpB,IhBqxFQ5S,EgBlxFR5E,MAAAuX,SAAA5f,EAAA4f,EAAAnW,EAAAxD,GACAgB,IAAArJ,EAAAjH,EAAAQ,iBAAA8P,IAAAA,GACA3U,QAAAwtB,OAAAliB,KAAAkiB,EAAAA,EAAAzX,EAAA1R,GAAAsW,EAAAyS,QAAAzZ,GhBmxFU,IAAI4Z,GAAc5Y,EAAS0Y,EAAgB1Y,GAAUwY,EgBhxF/DzU,EAAA8Q,EAAAA,EAAAA,GAAAA,EAGA3b,EAAAkI,EAAAwV,KAAA7S,EhBgxFU,KgB/wFVrU,EAAA,OAAA,CAGA,KAAA,GhB6wFc0R,GAAOuX,IAAa5f,MAAM4f,EAASnW,YAAa,GAAIwR,IAAY8E,SAASH,IAAY,GAAI3E,IAAY8E,SAAS,GAAIlW,MAAK,KAAM,EAAG,EAAG,IgB7wFjJmB,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,IhB+wFgB8U,EAAaliB,IAAIkiB,EAAaliB,GAAGyY,KAAKhO,EAAM1R,EAAQiH,EAAI,GgB3wFxE,IAAAyK,GAAAA,EAAAA,QAEA,OAAA7V,UAAAA,EAAAgpB,IAAA,MAAAxQ,EAAAgV,WAGAhV,GhB8wFQiC,EgB5wFR5E,oBAAA4X,SAAAztB,EAAA2E,GhB6wFU,GAAIkR,EACJ,IgB5wFV,UAAAA,EAAA7V,ChB6wFY,GAAI0tB,GAAQ,GAAIrW,KAChBxB,GgB5wFZ,GAAAwT,MAAAA,EAAArpB,cAAA0tB,EAAAvE,WAAAuE,EAAAF,WAAA,YAAArtB,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,YAAAA,EAAA,UAGA0V,GAFA/V,QAAA6N,SAAA3N,IAAAA,EAAAoT,MAAA,UhB6wFgBpT,EgB5wFhBF,MAAAA,KACAK,GAAAA,MAAAH,EAAAytB,OAAA3Z,EAAAA,EAAAA,OAAAA,IAEA,GAAAuD,MAAArX,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,IAGA6V,EAAAA,GhB4wFmB,GAAIwB,MAAK1J,SAAS3N,EAAO,KgBzwF5C2tB,QAAAA,SAAAA,IAAA3tB,IAAAA,EAAAG,OACAsV,YAAAA,IAAAA,EAAAA,KAAAA,EAAAA,GAGA,GAAA4B,MAAAA,EhB2wFU,OgBzwFV5B,IhB2wFQgF,EgBzwFRkT,oBAAA3tB,SAAAia,EAAAA,GhB0wFU,GAAIxE,EgBlvFd,OhBovFYA,GgB1wFZtV,QAAAsV,GACA,GAAA4B,OAAA4C,YAAA,KAAA,EAAA,GACAQ,QAAAA,SAAAza,IAAAqX,EAAAjE,MAAA,UhB0wFmB,GAAIiE,MAAKrX,EAAMytB,OAAO,EAAGztB,EAAM2E,OAAS,IAAIsV,YAAY,KAAM,EAAG,GgBvwFpFxE,EAAAA,GhBywFmB,GAAI4B,MAAK1J,SAAS3N,EAAO,KAAKia,YAAY,KAAM,EAAG,GgB7vFtE2T,QAAAA,SAAAA,IAAA/X,IAAA7V,EAAA6V,OACA,YAAAA,IAAA/B,EAAAA,KAAAA,EAAAA,GhBgwFmB2G,EAAYI,MAAM7a,EAAO,GAAIqX,MAAK,KAAM,EAAG,EAAG,KgBnvFjEoD,EAAAE,qBAAA,SAAA9E,GACA,MAAAA,IAIAA,EAAApC,SAAAA,EAAAA,WAAA,GAAAoC,EAAAhB,WAAA,EAAA,GACAgB,GAJA,MhB4vFQ4E,EAAYE,qBAAuB,SAAS9E,EAAMpC,EAAUoa,GgBrvFpE,MAAAhY,IAYA2U,GAAAI,QAAAA,IACA/U,EAAA6U,GAAAA,MAAAA,EAAAA,WhB8uFY7U,EAAK0B,WAAW1B,EAAKmB,cAAgB6W,KAAY,GAAKhY,EAAKiY,sBgB1uFvE7D,GhBsuFmB,MiBr9FnB3qB,EAAAyuB,OACAtE,EAKAnqB,OAAA0uB,QjByhGEluB,QiBrhGFmuB,OAAAA,2CAAAtY,QAAAA,kBAAAA,UAAAA,aAAAA,SAAAA,EAAAA,GjB+hGI,QiBhhGJuY,GAAA1a,GjBihGM,MAAO,wCAAwC6X,KAAK5W,GAAQvN,MAAM,GAVpE5H,KiBrhGJyuB,iBAAA/B,WjBshGM,MAAOvC,GAAQxZ,IAEjB3Q,KiBphGJ0uB,kBAAA,SAAAvZ,EAAAkB,GjBqhGM,MAAO8T,GAAQuC,iBAAiBvX,IAAWA,GAE7CnV,KiBlhGJ2uB,cAAAC,SAAA1a,GjBmhGM,MAAOiW,GAAQuC,iBAAiBC,UAKlC3sB,KiB9gGJ8W,YAAA8X,SAAA1a,GjB+gGM,MAAO0a,GAAgB1a,GAAY,IAErClU,KiB5gGJkX,cAAA0X,SAAA1a,GjB6gGM,MAAO0a,GAAgB1a,GAAY,IAErClU,KiB1gGJmX,cAAAyX,SAAA1a,GjB2gGM,MAAO0a,GAAgB1a,GAAY,IAErClU,KiBxgGJgX,cAAA4X,SAAA1a,GjBygGM,MAAO0a,GAAgB1a,GAAY,IAErClU,KiBvgGJoX,YAAAgT,SAAAjV,GjBwgGM,QAASyZ,EAAgB1a,GAAY,IE/jG3C1T,KAAAA,OAAA,SAAA0T,GAGA,QAAArR,EAAA1B,GAAAP,IFikGIZ,KElgGJkV,WAAA3V,SAAAgX,EAAApB,EAAAnW,EAAAA,GFmgGM,MElgGNmB,GAAAoW,EAAApB,EAAAhB,OFqgGE3T,QAAQf,OAAO,0BAA2BovB,QAAQ,cAAehsB,GAwFjErC,QGzpGFuC,OAAA,2BAAA,2BAAAC,SAAA,YAAA,WH0pGI,GGzpGJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,WACAuB,YAAA,WH0pGM4G,UAAW,cGvpGjB/J,YAAA,6BAEA+C,QAAAyd,QACAvd,WAAA6rB,EAEA5rB,UAAA6rB,EHupGMntB,MGrpGNotB,EHspGM7rB,MGnpGNnE,EHqpGIgB,MGjpGJgvB,MAAAA,UAAA5vB,aAAAJ,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GHopGM,QG9oGN+vB,GAAA1oB,EAAAjC,GH2rGQ,QAAS6qB,GAAYrqB,GGrnG7BsC,GAAAA,EAAA4C,SAAA1K,EAAA,GAEA,MAAAwF,GAAAkF,SAAA1K,EAAA,IAAA4vB,EAAAroB,OHukGQ,GG9oGRqoB,MACAhwB,EAAAwB,QAAAQ,UAAApB,EAAAwE,EH+oGQ4qB,GAAU1qB,OAAStF,EAAQkD,OAASlD,EAAQkD,MAAMiO,QAAUpM,EAAWoM,OACvE6e,EG9oGRhrB,EAAA6D,EAAAxB,EH+oGQ,IG9oGRzB,GAAAc,EAAAA,QH+oGQspB,GG9oGRrpB,WAAAA,SAAAA,GAGA,GAAAupB,MAAAA,KAAA1uB,EAAAA,SAEA,WADAwuB,GAAA3pB,MH+oGU,IG5oGV,UAAAypB,KAAAA,EAAAA,SH4oGU,CACAlqB,EAAIc,iBGzoGdd,EAAAA,iBAGAsqB,IAAAA,GAAAxqB,QAAA0M,QAAAA,EAAAA,SAAAA,GAAAA,iBAAAA,sBHyoGU,IAAK8d,EAAM7pB,OAAX,CGnoGV,GAAAmB,EACAwoB,SAAAxoB,QAAA0oB,EAAA,SAAA9hB,EAAAtB,GACAtF,GAAAA,EAAAA,KAAAA,EAAAA,YAAAA,EAAAA,KAIAtD,KAAA0B,EAAA5F,SAAAgwB,EAAAA,EAAAtoB,IAAA,KAAAsoB,EAAAtoB,SAAAhC,EAAAsqB,EAAApoB,OAAAA,EAAAA,IAAAA,QAAAA,YAAAA,KAAAA,EAAAA,GHmoGUsoB,EGloGV1O,GAAAjV,GAAA,GAAA6F,UHooGQ,IGloGR5K,GAAA2oB,EAAAC,IHmoGQJ,GAAUxoB,KAAO,WGhoGzBA,IACAwoB,EAAAroB,WACAqoB,EAAAA,UAAAA,EAAAtoB,UAAAsoB,EAAAtoB,SAAA6E,GAAA,UAAAyjB,EAAApoB,YACA4Z,EAAAxhB,GAAAkE,QAAAA,IACAsd,GAAAA,GACA2O,EAAAC,SAAA,aAAAD,EAAArc,SAAAA,QHmoGQ,IAAInM,GAAOqoB,EAAUroB,IG/nG7BqoB,GAAAplB,KAAAolB,WACAA,EAAAplB,WACA4W,EAAAtd,UAAA+rB,EAAAA,UAAAA,EAAAA,SAAAA,IAAAA,UAAAA,EAAAA,YACArlB,EAAAA,IAAAA,QAAAA,GHioGculB,EAASC,SAAS,aAAaD,EAASrc,YAAY,QG5nGlEnM,KH+nGQ,IG7nGRiD,GAAAE,EAAA1K,OAiBA8C,OH6mGQ8sB,GAAUplB,QAAU,WG3nG5B4W,EAAAwO,IAAAA,QAAAA,GH6nGUplB,KG/mGVolB,EHkkGM,GGjpGNxO,GAAA2O,QAAA/vB,QAAAmS,EAAAA,SAAAA,MAIAyd,EAAApoB,QAAA6d,UAAA7f,iBAAAA,QAAAA,UAAAA,uBAAAA,QAAAA,UAAAA,oBAAAA,QAAAA,UAAAA,mBAAAA,QAAAA,UAAAA,gBHksGM,OGlnGNyqB,OHonGKnoB,UGlnGL,cAAAooB,UAAAA,OAAAC,YAAA,SAAAzrB,EAAA0M,EAAAwe,GHmnGI,OACE1nB,SAAU,MACVpF,OGlnGN,EHmnGMjC,QGlnGNovB,SAAA9vB,EAAA+vB,GHmnGQ,IGlnGRD,EAAAtwB,WAAAA,CHonGU,IADA,GGlnGVuwB,GAAAE,EAAAC,GAAAA,YHmnGiBH,GAAwC,IAAzBA,EAAYC,UAChCD,EAAcA,EAAYA,WG7mGtCtwB,IAAAA,EAAAA,UAAAA,MAAAA,KAAAA,QAAAA,kBAAAA,IACAkD,EAAAA,SAAAA,EAAAA,UHgnGYmtB,EAAOtwB,YAAcD,EG9mGjC0B,EAAAC,WAAAgvB,YAAAH,IHknGQ,MG7mGR9nB,UAAAtF,EAAA9C,EAAAiI,GACA7G,GAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAAI,YAAAA,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,KAAAA,aAAAA,SAAAA,GACA4G,QAAAnC,UAAAzE,EAAA6G,MAAAC,EAAAA,GAAA9G,EAAA+G,KH6mGU,IG3mGV5I,GAAAkD,eH4mGU1B,SAAQC,SAAU,OAAQ,aAAe,SAASI,GAC5CL,QAAQ8E,UAAU+B,EAAKxG,KAAS2G,EAAiBK,KAAKR,EAAKxG,MAAO7B,EAAQ6B,IAAO,KAEvFL,QGzmGV+H,SAAAlB,eAAA,SAAAoB,eAAAC,UAAAA,SAAAA,GH0mGY,GGzmGZxG,GAAAwgB,KAAAja,EAAAA,OAAAA,GAAAA,cAAAA,EAAAA,MAAAA,EACAjI,SAAA8E,UAAA+B,EAAAI,MH0mGczI,EAAQ6B,GAAOqB,EAAMsR,MAAMnM,EAAKI,OGlmG9CvF,EAAAqG,YHsmGYrG,EGrmGZqG,OAAAmnB,EAAAA,WAAApqB,SAAAmD,EAAAC,GACAxG,EAAA1B,QAAAG,IACA,EHumGU,IAAI+uB,GGrmGdV,EAAA5vB,EAAAJ,EHsmGcqI,GGrmGdqoB,QHsmGYxtB,EAAMqG,OAAOlB,EAAKwM,OAAQ,SAASpL,EAAUC,GACtCgnB,GAAalvB,QAAQ8E,UAAUmD,KAChCjI,QAAQG,SAAS8H,KAAWA,IAAaA,EAASqL,MAAM,yBGlmG1EjK,KAAA,EACA6lB,EAAAA,OAEAA,EAAA/oB,UHumGUzE,EAAM2H,IAAI,WAAY,WAChB6lB,GAAUA,EAAS9lB,UkB3xGnCnK,EAAA,KAIAG,EAAAI,alB+xGEQ,QAAQf,OAAO,8BAA+BuD,SAAS,YAAa,WkBvxGtE,GAAA9C,GAAAA,KAAAF,UACAH,UAAAG,cAGA+b,gBAAAvb,EACAA,YAAAC,KlBuxGMkvB,gBkBtxGNrqB,ElBuxGMsqB,eAAe,GkBlxGrBpvB,EAAAC,KAAAP,WAAA,SAAAoE,EAAAoC,EAAAkV,GlB20GM,QkB9vGNiU,GAAAC,GlBgwGQ,IAAK,GADDD,GAAgB9T,EAAK+T,SAAS1T,QACzBtQ,EAAI,EAAGA,EAAI+jB,EAAcxqB,OAAQyG,IACpCpH,EAAQmrB,EAAc/jB,KkB5vGpC+jB,EAAAnvB,GAAAA,EAAAA,GAAAA,GAEAmvB,EAAArT,KAAA9b,EAAAA,SAAA2E,SlB8vGYwqB,EAAc/jB,GAAKiQ,EAAK+T,SAASzqB,OAAS,GAIhD,QkB5vGNyqB,GAAA1T,GlB6vGQ,GAAI2T,GAAchU,EAAK+T,SAAS1T,OAChC,OAAO2T,GAAYvT,QAAQ9b,QAE7B,QkB3vGNqb,GAAA6T,GlB4vGQ,GkB1vGR7T,GAAA+T,EAAA1T,SAAAK,QAAAD,QAAA9b,ElB2vGYgE,SkBxvGZqX,EAAAA,SAAA+T,QAAA1T,OAAAI,EAAA9b,GlB4vGM,QAASsvB,GAAatvB,GACfqb,EAAK9L,SAAS2f,ekBtvG3BlsB,EAAAA,SAAA0Y,QAAAK,OAAA,EAAA,GAEAwT,EAAArwB,SAAAA,QAAAA,QAAAA,SACAqwB,EAAAA,SAAA/vB,QAAAA,KAAAA,GlBuqGM,GkBpxGN6b,GAAAvb,IlBqxGMub,GkBpxGNA,SAAA9L,QAAApP,KAAAjB,GlBqxGMY,QAAQC,SAAU,YAAa,iBAAkB,cAAe,iBAAkB,iBAAmB,SAASI,GACxGL,QAAQ8E,UAAUsW,EAAO/a,MAAOkb,EAAK9L,SAASpP,GAAO+a,EAAO/a,KkBjxGxEkb,IAAAA,GAAA+T,eAEA/T,SAAAkE,SAAAA,iBAAAA,iBAAAA,iBAAAA,SAAAA,GAEAiQ,QAAAA,UAAAtU,EAAA/a,KAAAzB,EAAAA,KAAAA,EAAAA,MACA2c,EAAAoU,SAAAjnB,IAAA9J,KlBoxGM2c,EkBjxGNA,YlBkxGMA,EAAK+T,YkB/wGX/T,EAAAqU,wBlBixGMrU,EkBhxGNmU,gBAAAC,SAAA3T,GAEAT,EAAAoU,SAAA1T,KAAAA,IAEAV,EAAAsU,gBAAAA,SAAAjxB,GACA2c,EAAArX,SAAAqX,KAAA+T,IlBixGM/T,EkB5wGNqU,kBAAAR,SAAAA,GlB6wGQ,GkB3wGRU,GAAAA,EAAAlxB,SAAAA,QAAAA,ElB4wGQ2c,GAAKoU,SAAS1T,OAAO/X,EAAO,IAE9BqX,EkBxwGNA,kBAAAkE,SAAAxf,GlBywGQ,GkBxwGRmc,GAAAA,EAAAA,SAAAA,QAAAA,ElBywGQb,GAAK+T,SAASrT,OAAO/X,EAAO,GACxBqX,EAAK9L,SAAS2f,ekBrwG1B7T,EAAAK,GAEAmU,EAAA7vB,GlBuwGQqb,EkBtwGRA,qBAAArb,QAAAA,SAAAA,GlBuwGUkc,OAGJb,EkBtwGNiU,SAAAA,QAAAtvB,EAAAA,SAAAA,mBAAAA,GlBuwGMqb,EAAKW,WAAapY,EAAOoY,WAAa,SAAShc,GkBpwGrDqb,QAAAkE,QAAAA,GACArD,EAAAA,SAAAA,QAAAA,GlBswGoBb,EAAK9L,SAASugB,gBAAkBC,EAAS/vB,GACnD4vB,EAAe5vB,GkBlwGzBsvB,EAAA/f,GlBswGQ8L,EAAKkE,qBAAqBxf,QAAQ,SAASmc,GkBnwGnDA,OlBuwGMb,EkBjwGN2U,eAAA3U,WACA,MAAAA,GAAAjQ,SAAAA,cACApH,EAAAmrB,SAAAA,QlBmwGgD,IAAjC9T,EAAK+T,SAAS1T,QAAQ/W,OAAe0W,EAAK+T,SAAS1T,QAAQ,OkBntG1Epc,MAAA0D,KAAA,WACA6D,GAAAA,KlBsvGM,OkBrvGNrH,GAAAA,SAAAN,EACAqC,EAAA/B,WAAAkH,EAEAgW,KlBovGKlW,UkBjvGLkW,cAAA,UAAA,WAAA,YAAA,SAAAtZ,EAAAmO,EAAAge,GlBkvGI,OACE1oB,SkB/uGN6V,WAAAhY,clBgvGMlF,YAAc,SAAU,WAAY,SAAU+vB,EAAU/vB,YACxD+B,KkB7uGNmb,SAAAnU,EAAAC,EAAAuU,EAAAtU,GlB8uGQ,GkB5uGRiU,GAAAgC,EAAAjW,GlB6uGYwnB,EkB1uGZjU,EAAAvT,ElB2uGYiU,KACFuT,EkB1uGVd,qBAAAc,KAAAD,WlB2uGYtT,EkBzuGZ5c,cAAAqvB,EAAAa,oBlB2uGUtT,EkBvuGVuT,YAAAjU,KAAAA,SAAAvT,GlBwuGY,GAAI3I,QAAQ4e,QAAQjW,GAClBwnB,EkBvuGdd,WAAAA,OACAc,ClBwuGc,GAAId,GAAgBc,EAAeD,gBAC/BlwB,SAAQ4e,QAAQyQ,GkBtuGlC1mB,EAAAA,QAAAA,EAAAA,SlBwuGkBwnB,EAAejU,WAAwB,EAAbvT,GAEnB0mB,IAA+B,EAAb1mB,GAC3BwnB,EAAejU,WAAwB,EAAbvT,GkB9tG1C5B,MAAA4B,WlBsuGOjC,UkBztGP2C,mBAAA,WlB0tGI,OACEtC,SAAW,YAAa,eACxBtF,KkBxtGN2uB,SAAAA,EAAAxxB,EAAAqe,EAAAD,GlBytGQ,GkBxtGRmT,GAAArY,EAAA,ElBytGQlZ,GkBxtGRsF,KAAAA,cAAAmsB,YlBytGQF,EkBxtGRA,gBAAAjsB,GlBytGQxC,EkBxtGRA,IAAAid,WAAAA,WlBytGUwR,EAAeP,kBAAkBhxB,IkBrtG3CA,IAAAA,GAAAwxB,WACAxxB,IAAAA,EAAAkZ,SAAA,CACA,GAAAqN,GAAAA,EAAAkL,kBAAA,uBAAApT,EAAAoT,iBAAApT,EAAAoT,iBAAAF,EAAAR,SAAA3T,QAAApd,EACAwxB,GAAAA,WAAAA,EAAAA,GACA7T,EAAArX,UlB0tGQtG,GAAQmM,GAAG,QAASqlB,GACpBxxB,EAAQ0xB,KAAK,mBAAoB,SAAS/T,GACxB,KAAZA,EAAE4I,OACJiL,IkBntGZ1pB,EAAAA,kBAEA,KAAA6V,EAAA4I,OAAA,IAAA5I,EAAA4I,OACApe,EAAAA,uBlBwtGKL,UkB5sGL9H,oBAAAuxB,WAAA1gB,SAAApQ,GlB6sGI,OACE0H,SkB1sGNopB,YAAAI,elB2sGM9uB,KkBxsGNC,SAAAA,EAAA9C,EAAAqe,EAAAD,GlBktGQ,QAASM,KACP,GAAIpZ,GkBvsGdA,EAAAmB,SAAA2W,QAAApd,GACA4xB,EAAAL,EAAAD,iBlBwsGcM,EAAS,akBrsGvB/e,SAAA+e,QAAA5xB,GlBusGgByG,EAAO2W,QAAQ9X,UkBpsG/BisB,EAAA1Q,YlBusGqBvb,IAAUmB,IkBpsG/BiY,EAAAA,YlBusGU7L,EAAS+e,GAAQ5xB,EAASuxB,EAAe1gB,SAAS0L,aApBpD,GkBxsGRgV,GAAAN,EAAAA,ElBysGQjxB,GAAQyS,SAAS,YkBtsGzB8e,EAAA7S,SAAAA,WACA1e,EAAAsF,SAAAisB,EAAAb,SAAAtT,WlBysGQmU,EkBvsGRI,gBAAA3xB,GlBwsGQ8C,EkBvsGR1B,IAAAA,WAAAqF,WlBwsGU8qB,EkBvsGVnU,kBAAApd,KCnQAoB,EAAAyf,qBAAA/W,KACA,WAMAtJ,MAIAE,SnBq9GEU,QmBj9GFyC,OAAA,6BAAA,oCAAA,uCAAA,2BAAAD,SAAA,cAAA,WnBk9GI,GmBj9GJE,GAAAlD,KAAAJ,UACAgC,UAAA,UACAuB,YAAA,aAEA6Q,UAAA,cACAid,YAAA,iCACAC,QAAAA,QACA/c,WAAA,EACAgd,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,SAAAA,OACAC,WAAAA;AACAC,SAAAA,KACApd,gBAAA,KACAqd,UAAAld,KACAmd,YAAAnd,MACAod,WAAA,OACAC,iBAAA,YACAC,gBAAA,OACAC,cAAAA,EACAC,WAAA,EACAC,UAAAzd,EAAAA,GACA0d,UAAA1d,EAAAA,GACA2d,UAAA,EnBi9GMN,QAAS,EmB98Gf7xB,UAAA0D,EAEAquB,mBAAA,GACAC,UAAAxmB,EACAymB,UAAAryB,EAEAsyB,SAAAE,mCnB88GMD,UmB58GNE,oCnB88GIryB,MmB58GJ0D,MAAA1E,UAAAqzB,YAAApiB,aAAAA,OAAAA,iBAAAA,kBAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GnBg9GM,QmBz8GNoiB,GAAAC,EAAAC,EAAAA,GAqKAF,QAAAA,GAAAjlB,GACAA,EAAAhE,SAAAiK,EAAAW,YAAA5G,EAAAmJ,MnBi7GQ,QmB/6GRnX,KnBg7GUA,EmB/6GV,GAAAgS,QAxKA,GAAAgE,GAAAkd,EAAAld,EAAAA,QAAAA,UAAAA,EAAAA,IACAlT,EAAAlD,EAAA4yB,MACA1vB,EAAAswB,EAAAN,SACAhwB,EAAAuwB,EAAAzzB,MACAkD,GAAAwwB,YAAA1zB,EAAAgzB,WAAAA,EAAAA,QACA9vB,IAAAA,GAAAlD,EAAAizB,EACAI,GAAAM,OAAAN,EAAAnwB,KAIAA,IAAAA,GAAAyC,EAAA4R,QnBu8GQrU,GmBt8GRoW,MAAAA,EAAAsZ,UnBu8GQ1vB,EmBt8GRmwB,UAAA5tB,EAAA8R,SnBu8GQrU,EAAMuwB,WAAazzB,EAAQmzB,UmBr8GnCjwB,EAAA0wB,UAAAA,EAAAZ,SnBu8GQ9vB,EmBt8GRmwB,UAAAO,EAAAlyB,QnBu8GQ,IAAIiyB,GAAUN,EAAYQ,OAAO3wB,EAAM4wB,MmBr8G/C5wB,GAAA6wB,QAAAA,SAAAxc,EAAA+B,GACA+Z,GnBu8GUA,EAAY5tB,OAAO8R,IAErBrU,EmBt8GRlD,YAAAqV,SAAA3T,GnBu8GU2xB,EmBt8GVA,YAAA3xB,InBw8GQwB,EAAM6wB,YmBt8Gd,WnBu8GUV,EmBt8GVA,SAAAnwB,EAAA6V,MAAA,GAAAsa,EAAAQ,OAAAxtB,SnBw8GQnD,EAAM8wB,UAAY,WmBr8G1BC,EAAAA,WACAZ,EAAAhe,QAAAA,GACAge,EAAAa,OAAAA,GAAAnb,QnBw8GYsa,EmBt8GZ5tB,OAAA,GAAAsT,OAAA,InBy8GQ7V,EAAM+wB,OAAS,WmBl8GvBZ,EAAArtB,WAEAqtB,EAAA5a,QAAAlB,GACA8b,EAAA7Z,OAAAA,OnBo8GY6Z,EAAY5tB,OAAO,MAAM,ImB77GrC4tB,EAAAc,OAAAA,SAAAA,GACAn0B,QAAAo0B,OAAAA,KAAAC,MAAAA,EAAAA,aACAhB,EAAA7Z,MAAAtW,EACA1B,EAAAC,OAAAA,KAAAyB,EAAA4J,InBk8GUumB,EAAYza,QAAO,IAErBya,EmB97GR7xB,oBAAA,SAAA6yB,GnB+7GUr0B,EmB97GVwB,mBAAAN,CnB+7GU,KmB97GVA,GAAAA,GAAAA,EAAA2W,EAAAA,EAAAA,KAAAxR,OAAAkR,EAAAA,EAAAA,InB+7GY/V,QAAQC,QAAQyB,EAAMwW,KAAK5M,GAAIumB,EAAYiB,iBAG/CjB,EAAY5tB,OAAS,SAAS8R,EAAMuB,GmB77G5CtX,QAAAsyB,OAAAA,GACA5yB,QAAAkF,OAAAA,EAAA5E,cAAA+V,MAAAA,EAAAA,WAAAA,aACArW,EAAA+E,WAAAA,GAAAA,MAAAA,InBi8GY/E,EmB/7GZmyB,WAAA,MnBi8GenwB,EAAM4wB,OAAShb,GAClB5X,EmBh8GZkF,cAAA5E,QAAA2X,KAAA5B,IACA/V,EAAAQ,UAAAgoB,EAAAzS,YAAAqT,GAAAD,EAAApT,WAAAA,EAAA2X,MAAAA,OnBu8GY1tB,QAAQQ,OAAOoU,GACb4T,KAAMzS,EAAKqT,cmBl8GzByI,MAAAa,EAAAA,WAEAhxB,KAAA4wB,EAAAS,YAEAlB,EAAAza,QAAAA,EAAAA,MAAAA,GnBm8GYya,EAAYza,WAGhBya,EmB97GRmB,QAAA,SAAAb,GACAA,EAAAA,MAAApO,EnB+7GUoO,EAAUN,EAAYQ,OAAO3wB,EAAM4wB,OmB57G7CT,EAAAoB,UnB+7GQpB,EmB77GR5xB,OAAAyB,SAAAwW,GnB87Gc8a,KAAa,GAAQb,EAAQe,QAC7BF,KAAa,GAAUb,EAAQe,QmB37G7CrB,EAAAA,MAAAxZ,KAAAA,InB87GQwZ,EAAYoB,gBAAkB,WmB17GtCpB,IAAAA,GAAAA,GAAAiB,EAAAA,EAAAA,EAAAA,KAAAjuB,OAAA+H,EAAAA,EAAAA,IACAA,QAAAkL,QAAAqa,EAAAgB,KAAAA,GAAAvmB,InB87GQilB,EmB17GRuB,YAAAA,SAAAA,GAIA,MAAAza,GAAAA,WAAApB,InBy7GQsa,EmBx7GRlZ,eAAA0a,SAAAA,GnBy7GUzmB,EmBz7GVuc,SAAAxQ,EAAA2a,WAAAA,EAAAA,OnB27GQzB,EAAYO,YAAc,SAASlyB,GmB17G3C2xB,GAAAA,GAAAza,EAAAA,MnB47GcuB,EAAa,GAAIpB,MAAKA,KAAKgc,IAAI3e,EAAS4T,MAAQ4K,EAAM5K,MAAQ,GAAKtoB,EAAO0U,EAASuU,OAASiK,EAAMjK,OAAS,GAAKjpB,EAAO,GmBz7GrI2xB,SAAAA,OAAA5sB,GAEAb,KAAAc,EAAAA,iBACAd,MAAAe,EAAAA,cAEA4Q,KAAA/K,EAAAwoB,enB07GU3B,EmBx7GVjZ,UnB07GQiZ,EAAY5sB,aAAe,SAASb,GAGlC,GAFAA,EmBx7GVwU,iBnBy7GUxU,EAAIe,kBACA6F,EAAS,CmBt7GvB6mB,GAAAA,GAAAzrB,QAAAxH,QAAAwF,EAAAA,OACAA,YAAAwU,EAAA,GAAA9N,SAAAzD,gBACAnC,EAAAA,EAAAA,UAGA0T,EAAA/S,eAAA,WnBy7GQgsB,EmBt7GRzrB,WAAA,SAAAhC,GnBu7GU,GmBt7GV1C,mBAAA2F,KAAAjD,EAAAyB,WAAAzB,EAAAihB,WAAAjhB,EAAAqvB,OnBs7GU,CAGA,GAFArvB,EAAIc,iBACJd,EAAIe,kBACgB,KAAhBf,EAAIyB,QAQN,YmB/7GZnE,EAAA4wB,MAKAlvB,EAAAA,OAAA2C,WnBu7GgB8rB,EAAYa,QAAQhxB,EAAM4wB,MAAQ,KAHpCT,EAAY1rB,MAAK,GmB16G/BvH,GAAA80B,UAAA9iB,GnBm7GUxN,EAAY2C,WAQd,ImB/6GRnH,GAAAuO,EAAAsD,InBg7GQohB,GmB/6GRhrB,KAAA,WnBg7GU,MmB/6GVjI,IAAAJ,EAAAgX,WnBg7GY5W,EAAQuO,KAAK,OAAQ,YmB96GjCsI,GAAAA,IAAAA,qBAAAA,eAGAiE,IACAmY,EAAAzoB,KAAAA,OAAA,QACAxK,EAAAiU,KAAAA,WAAAW,QACA5U,EAAAyM,GAAAA,QAAAmK,QAEAkE,MAGA,IAAAC,GAAAkY,EAAA7rB,OACA6rB,GAAA7rB,QAAA,WACA6M,GAAAjU,EAAAiI,WACA8S,EAAAA,IAAAA,QAAAA,GnB+6GUD,IAEF,ImB16GRC,GAAAnb,EAAAkE,InB26GQmvB,GmB16GRjzB,KAAA,YnB26GeoM,GAAWpM,EAAQiI,KAAK,aAAejI,EAAQiI,KAAK,cACzD8S,IACAjW,EAAS,WmBx6GnBkW,EAAAiY,WACAA,EAAA1rB,SAAA4E,GAAA4G,EAAAA,aAAAA,YAAAA,EAAAA,cACAkgB,EAAAA,UACAA,EAAA3rB,GAAAA,UAAA8E,EAAA5E,cAEAxH,GAAAA,InB26GQ,ImBz6GRgb,GAAAjI,EAAAA,IAmBA,OnBu5GQkgB,GAAY1rB,KAAO,SAASwL,GmBv6GpCkgB,EAAAA,WnBy6GUA,EAAY3rB,SAASmF,IAAIL,EAAU,aAAe,YAAa6mB,EAAY5sB,cmBr6GrF2sB,EAAAA,UACAhzB,EAAAgzB,IAAAA,UAAAA,EAAAA,YAMAlrB,EAAAiL,KAKAkgB,EnBkuGM,GmB58GNhf,GAAAgf,6BAAA/tB,KAAAA,EAAAA,UAAAA,WACAkH,EAAAomB,eAAA5yB,GAAA4yB,UAAA5yB,CA4OAiD,OAxOArC,GAAA0yB,OAAA6B,EAAAA,KAAA9B,EAAAA,oBAuOA9qB,EAAA3H,SAAAA,EACAwyB,MnBi6GKlrB,UmB95GLhF,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GnB+5GI,GAAImR,GAAW,6BAA6BxL,KAAK/D,EAAQuW,UAAUC,UACnE,QACEhT,SmB/5GN9G,MnBg6GM+G,QAAS,UACTtF,KmB75GNuF,SAAAA,EAAApI,EAAAiI,EAAAnH,GnBw9GQ,QmB14GRk0B,GAAAC,GnB24GU,MmBz4GVC,IAAAC,EAAAlvB,OACAmvB,EADA,KnBq5GQ,QmBx4GRt0B,GAAAqa,GAEA,GAAAC,QAAAta,OAAAA,GAAA,CnBw4GU,GAAIwa,GAAaxM,MAAMsmB,EAAWvkB,SAASyhB,UAAY+C,EAAW9c,WAAa6c,EAAWvkB,SAASyhB,QmBp4G7GxxB,EAAA2a,MAAAC,EAAA7K,SAAA8K,UAAAA,EAAAA,WAAAA,EAAAA,SAAAA,QAEAxE,EAAAA,GAAAA,CAEArW,GAAA6a,aAAA,OAAAP,GnBo4GUta,EmBn4GVA,aAAA0a,MAAAF,GnBo4GUxa,EmBh4GV0a,aAAA,MAAAL,GnBi4GcC,IAASta,EAAW2W,WAAa4d,IAmDvC,QAASC,KACP,OAAQx0B,EAAW2W,YAAc3I,MAAMhO,EAAW2W,WAAWc,WAAa,GAAKzC,EAAWhV,EAAW2W,WAAY7X,EAAQkyB,YmBhiHnI1wB,GAAAA,IACA0B,MAAA1B,EnB+5GQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,eAAgB,YAAa,YAAa,YAAa,OAAQ,YAAa,UAAW,WAAY,YAAa,qBAAsB,KAAM,cAAe,cAAe,WAAY,YAAc,SAASI,GACxaL,QAAQ8E,UAAU+B,EAAKxG,MAAO7B,EAAQ6B,GAAOwG,EAAKxG,KAExD,ImB35GR2G,GAAA3G,enB45GQL,SmB35GRA,SAAA8E,OAAA+B,YAAA,YAAA,YAAA,WAAA,YAAA,SAAAxG,GACA7B,QAAA6B,UAAAqB,EAAAsR,KAAA/L,EAAAA,KAAAA,EAAAA,MnB45GYzI,EAAQ6B,IAAO,KmBt5G3B7B,QAAAA,SAAAw1B,eAAAvkB,SAAAA,eAAAA,UAAAA,SAAAA,GAEA,GAAAoD,GAAAA,KAAArU,EAAAgV,OAAAA,GAAAhV,cAAAkyB,EAAAA,MAAA,EAEA7a,SAAArX,UAAAqX,EAAAA,MAEAnB,EAAAA,GAAAhT,EAAAsR,MAAA+C,EAAApB,MAIA,IAAA+F,GAAAC,EAAAA,EAAAA,EAAAA,EnBs5GQnc,GmBt5GRA,EAAAkyB,SAAA7a,GAAAA,EAAAA,YAAAA,EAAAA,WAAAA,anBw5GQ,ImBx5GRoT,GAAAzqB,EAAAyyB,KnBy5GYvc,EAAa,SAASqB,EAAMpB,GmBt5GxC,MAAAtB,GAAAqB,WAAAqB,EAAApB,EAAAkB,IAEA6E,EAAAsZ,GnBw5GUrf,OmBv5GV3U,EAAAG,WnBw5GU0V,KmBv5GV5N,EnBw5GUghB,OmBv5GV+K,EAAAhuB,cnBy5GYa,GmBv5GZmtB,QnBw5GUtyB,EAAMqG,OAAOlB,EAAKwM,OAAQ,SAASpL,EAAUC,GACtC8rB,GAAeh0B,QAAQ8E,UAAUmD,KAClCjI,QAAQG,SAAS8H,KAAWA,IAAaA,EAASqL,MAAM,2BmBp5GxErT,KAAA,EAEAD,EAAA8E,OAGAkvB,EAAAvkB,UnBu5GQzP,QAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQ8E,UAAU+B,EAAKxG,KmB/4GrCL,EAAAA,SAAA8E,EAAA+B,SAAA6pB,GACA7pB,EAAA4I,SAAApP,GAAAqa,EAAAzS,oBAAAA,EAAAA,GACA+rB,MAAAvkB,EAAAihB,SAAAzoB,KAAAA,EAAAA,QAAAA,GnBi5GcksB,EAA0Bz0B,EAAW2W,gBmB14GnDrW,QAAA8E,UAAA+B,EAAA6pB,aAIA7pB,EAAAsM,SAAA0gB,aAAAC,SAAAA,GACAE,EAAAF,SAAAA,WAAA7rB,IAIAvG,EAAA1B,OAAA8E,EAAAA,QAAAsvB,SAAAA,EAAAlsB,GACAxG,EAAAqG,OAAAqsB,EAAAA,cnB24GW,GAKCp0B,QAAQ8E,UAAU+B,EAAKutB,gBACzB1yB,EAAMqG,OAAOlB,EAAKutB,cAAe,SAASL,EAAgBH,GmBv4GpEG,EAAAI,EAAAF,GACAL,EAAA3c,EAAA2c,GACA1Z,GACAH,EAAAA,oBAAAtK,KnBs5GQ/P,EmBh4GRu0B,SAAAA,QAAAA,SAAAA,GnBi4GU,GmBh4GVv0B,EnBi4GU,KmB93GV6a,EAEA4Z,MnB63GYz0B,GAAW0a,aAAa,QAAQ,GmB73G5C+Z,InBg4GU,ImB73GVpe,GAAA2E,EAAAG,MAAAA,EAAAoZ,EAAAz1B,WnB83GU,QmB73GVy1B,GAAAvf,MAAAqB,EAAA4a,enB83GYjxB,GAAW0a,aAAa,QAAQ,IAGlC+Z,EmB73GVhd,GACAsZ,WnB63GcjyB,EmB73GdA,UACAuX,EAAAA,EAAAoB,qBAAA8c,EAAAz1B,EAAAmV,UAAA,GACAe,EAAA+b,EAAAA,EAAAE,iBAAAnyB,EAAAkyB,cnB+3GU3a,EAAO2E,EAAWG,qBAAqBnb,EAAW2W,WAAY7X,EAAQmV,UAAU,GmB53G1FoC,WAAAvX,EAAA+Y,SnB83GmBxB,EAAKoB,UmB13GxB,SAAA1O,EAAAA,SAEAsN,EAAAA,UAAAA,IACApN,QAAA3I,EAAAiG,SACA6U,EAAAA,cAEA/E,GAAApN,MAAAA,OnB43GQjJ,EmB13GRgb,YAAAK,KAAApS,SAAAA,GnB23GU,GAAIoN,EAiBJ,OAfEA,GmB33GZA,QAAA9P,YAAA0C,IAAA,OAAAA,EACAmS,IACA9a,QAAA2I,OAAAA,GnB23GmBA,EmBn3GnB,WAAAnK,EAAAmV,SACAjU,EAAA2W,MAAAN,EAAAA,KAAAA,EAAAA,iBACA,SAAAvX,EAAAiyB,SACA/wB,GAAA2W,MAAAqE,IAAArE,GAEA6d,GAAAA,MAAAA,GAIA,QAAAx0B,EAAA+E,SAEA7F,EAAAs1B,WAAAA,EAGAx0B,EAAAw0B,WAAAA,EAAAA,qBAAAA,EAAAA,EAAAA,UnBk3GiBA,MAETx0B,EmB92GRs0B,QAAAA,WACAx1B,EAAAA,IAAA01B,MASA1xB,EAAAA,IAAA,WAAA,WAQA6H,GAAA6Y,EAAAA,UACAmR,EAAAA,KACAL,EAAAnvB,YnBu2GOrC,SAAS,kBAAmB,WmBh2GnC,QAAA8xB,GAAAC,EAAA5I,GnBm2GM,ImBl2GN,GAAA0I,MnBk2GaG,EAAI3vB,OAAS,GmB/1G1BrF,EAAA0D,KAAAsxB,EAAAvY,OAAA,EAAAiH,GnBk2GM,OmB91GNxhB,GnBg2GI,QmB71GJmU,GAAAA,EAAArX,GnB81GM,OmB71GNkW,EAAAA,EAAAA,GAAAiX,EnB+1GInsB,KAAK0D,MAAS,iBAAkB,cAAe,OAAQ,SAASqT,EAAgBoE,EAAa3K,GAC3F,MmB71GN0K,UAAAA,GnB81GQ,GmB91GR/F,GAAAnW,EAAAkyB,OAAA7a,EAAAA,EAAAA,SAAAoT,EAAAzqB,EAAAyyB,KnBi2GYvc,EAAa,SAASqB,EAAMpB,GmB/1GxC,MAAA8f,GAAAle,WAAA4X,EAAAA,EAAAtY,IAEA6e,EAAAA,GAEA/f,OAAAG,EAAA6f,WACA9e,KAAAjB,EAAA4T,OAAA1T,EAAAsU,eAAArT,EAAA2X,EAAAA,cAAAA,GnBm2GYkH,EAAiBH,EAAYrtB,MAAM5I,EAAQ8yB,WAAWuD,OAAOJ,EAAYrtB,MAAM,EAAG5I,EAAQ8yB,YmBj2GtGS,EAAAA,EAAAA,YAAAA,+BAAAA,EAAAA,KAAAA,qCAAAA,SACApd,EAAAnW,EAAAoyB,QAAAA,EAAAA,UAAAA,EAAAA,oBAAAA,YAAAA,EAAAA,WAAAA,GAAAA,OACAvmB,GACA+oB,KAAAA,EAAAA,cnBm2GUjK,MmBn2GVA,EAAAE,WnBo2GUtT,KAAMjB,EAAU4Y,WmBl2G1BqE,InBq2GUpd,OmBp2GV3U,EAAAQ,UnBq2GU6J,MmBr2GVme,EnBs2GU4K,OACEjK,MmBv2GZpT,GnBy2GUvR,OmBx2GVmwB,SAAAvd,EAAAA,InBy2GiB5X,KmBx2GjB0zB,OAAAxF,GAAAA,EAAA9Y,gBAAAmB,EAAA2X,MAAA3X,EAAAsT,aAAAzU,EAAAuU,OAKAvU,QAAAA,OAAAmB,GACA4e,KAAA1B,EAAAA,MAAAA,cnBq2GgB9J,MAAOwL,EAAO3c,MAAMqR,WACpBtT,KAAM4e,EAAO3c,MAAM0V,YmBl2GnCiH,EAAAG,UACAC,EAAAA,YAAAD,EAAAA,MAAA9G,IAAAA,EAAAA,YACApZ,EAAAogB,KAAAL,EAAApd,MAAAud,UACAH,EAAAM,oBnBu2GUC,MmBn2GVC,WACA,GAAAjM,GAAAA,GAAAA,MAAAA,EAAAA,KAAAA,EAAAA,MAAAA,GACA6L,EAAAzpB,EAAA0iB,oBACA9E,EAAAxO,GAAAoT,OAAAA,EAAAkH,MAAAzd,EAAAA,EAAA6R,SAAA4L,EAAAA,UAAA3L,IACA8L,EAAAzsB,EAAAA,oBAAAqN,EAAAmT,EAAAA,qBAAAA,GAAAA,MAAAA,EAAAA,UAAAA,cAAAkM,KAAAC,IAAAzH,EAAAA,GAAAA,OAAAA,EAAAA,KAAAA,EAAAA,InBw2GY,KmBx2GZ0H,GAAA1sB,GAAAO,KAAAmsB,EAAApM,EAAAG,EAAAA,GAAAA,InBy2GcH,EmBz2GdpR,EAAAqb,qBAAAjK,GAAAA,MAAAA,EAAAA,cAAAA,EAAAA,WAAAA,EAAAA,UAAAA,InB02GciM,EAAKzsB,MACHqN,KAAMmT,EmBz2GtBxnB,QAAA+H,EAAAiL,iBAAAogB,EACApzB,MAAA6zB,EAAArM,EAAA1pB,KAAAmV,QACAjT,SAAA8zB,EAAAd,OAAAA,KAAAA,WAAAA,GACAhzB,MAAAwW,EAAA7N,aAAAA,EAAAA,MACA3I,SAAA+zB,KAAAA,WAAAtC,IAGAuC,GAAAA,MAAAhhB,EAAAqB,EAAAA,EAAAA,kBACArU,EAAA6zB,YAAAvd,EnB22GYtW,EAAM8zB,OAASd,EmBz2G3BvB,EAAAA,KAAA9oB,EAAA0L,EAAAA,KAAAA,OACArU,EAAAiU,gBAAAwB,KAAAA,WAAAA,GAAAA,OAGA3X,KAAAmW,OAAAnX,GnB02GUk3B,WmBp2GVl3B,SAAAo0B,GnBq2GY,MmBp2GZ+B,GAAArpB,OAAA9M,EAAAA,gBAAAo0B,EAAA/tB,MAAAyG,eAAAyK,EAAAsT,aAAAsL,EAAA3c,MAAAqR,YAAAtT,EAAA2X,YAAAiH,EAAA3c,MAAA0V,WnBs2GUyF,WmBp2GV,SAAApd,GnBq2GY,GAAIJ,GAAOI,EAAKoB,SAChB,IAAIxB,EAAOnX,EAAQ0yB,SAAWvb,EAAOnX,EAAQ2yB,QAAS,OAAO,CAC7D,IAAI3yB,EAAQ+yB,mBAAmBvV,QAAQjG,EAAK4f,eAAkB,OAAO,CmBl2GjF,IAAAn3B,EAAAo0B,mBnBo2Gc,IAAK,GAAItnB,GAAI,EAAGA,EAAI9M,EAAQo0B,mBAAmB/tB,OAAQyG,ImBl2GrEooB,GAAAA,GAAAl1B,EAAA4F,mBAAAA,GAAAA,OAAAA,GAAAA,EAAAA,mBAAAA,GAAAA,IACAuwB,OAAA3c,CAIA,QAAAU,GnBq2GUgb,UmB91GVl0B,SAAA2zB,GnB+1GY,GAAKwB,EAAO3c,MAAZ,CmB31GZrD,GACAtK,GADAsK,EAAAkc,EAAAA,MAAAA,SAEAuC,MAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,OAAAA,KAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,OAAAA,KAAAA,EAAAA,UAAAA,EAAAA,GAAAA,MAAAA,EAAAA,SAAA5K,KAAA2K,WAAAza,IAAAic,EAAA1wB,OAAAyU,GAAA,OnBk2GUyD,KmBh2GV,QnBi2GUxH,OmBh2GV3U,EAAAQ,YnBi2GU6J,MmBj2GVme,EnBk2GU4K,OACE5K,KmBn2GZzS,GnBq2GUvR,OmBp2GVmwB,SAAAvd,EAAAA,GnBq2GiB5X,KmBp2GjB0zB,OAAA7J,EAAAA,gBAAAF,EAAAX,KnB22GuBzS,EAAKsT,aAAezU,EAASuU,QmBt2GpD+L,QAAA10B,OAAAoU,GAEAghB,MAAAA,EAAAA,MAAAA,WACAzM,KAAAA,EAAAA,MAAAA,YAEAA,EAAAA,oBATAnpB,QAAAQ,OAAAoU,GAAAuU,KAAAA,EAAAwL,MAAA3c,cAAAjC,MAAA4e,EAAA3c,MAAA0V,WnBu2GgB3X,KAAM4e,EAAO3c,MAAM0V,YAErBiH,EAAOvd,WASX8d,MmBx2GV/rB,WnB22GY,IAAK,GmB32GjB2O,GAAAlP,KnB22GqB0C,EAAI,EAAGA,EAAI,GAAIA,IACtB6d,EAAQ,GAAI5R,MAAK3C,EAAS4T,KAAMld,EAAG,GmB12GjD5J,EAAA+H,MACA/H,KAAA6zB,EACA7zB,MAAAwW,EAAA0d,EAAAp2B,KAAA6K,QACA7K,SAAAm1B,EAAAtc,YAAA8Q,GnB42GgBrR,SAAUtY,KAAK2zB,WAAWhK,IAG9BznB,GAAM+H,MAAQiL,EAAWyU,EAAO3qB,EAAQwyB,iBmB12GpDmC,EAAAA,YAAApd,EACArU,EAAAm0B,KAAAA,EAAAD,EAAA7f,KAAAqT,OACA5pB,KAAA0zB,OAAA2C,GAEAnC,WAAA,SAAAtvB,GACA,MAAAuwB,GAAA3c,OAAAjC,EAAAqT,gBAAAuL,EAAA3c,MAAAoR,eAAArT,EAAAsT,aAAAsL,EAAA3c,MAAAqR,YnB62GU8J,WAAY,SAASpd,GmB12G/B,GAAA+f,IAAAA,GAAAnB,MAAA3c,EAAAA,cAAAqR,EAAAA,WAAAA,EAAAA,EACA,OAAA3Q,GAAAnB,EAAAod,SAAA3c,EAAAA,UAAAA,EAAAA,SnB62GU0b,UmBt2GVl0B,SAAA2zB,GnBu2GY,GAAKwB,EAAO3c,MAAZ,CmBn2GZrD,GAAAA,GAAAmc,EAAAA,MAAAA,WACAzmB,EAAA,GAAAkN,MAAAod,EAAA3c,MACAob,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,SAAAA,EAAAA,SAAAA,EAAAA,GAAA5K,KAAA2K,WAAAza,IAAAic,EAAA1wB,OAAAyU,GAAA,OnB02GUyD,KmBx2GV,OnBy2GUxH,OmBx2GV3U,EAAAQ,WnBy2GU6J,MmBz2GVme,EnB02GU4K,OACE5K,KmB32GZzS,InB62GUvR,OmB52GVmwB,SAAAvd,EAAAA,InB62GiB5X,KmB52GjB0zB,OAAA9J,GAAAA,SAAAxU,EAAAA,cAAA,GAAA,MAAA/G,SAAA+G,EAAA4T,KAAA,GAAA,KACAxoB,QAAAQ,OAAAoU,GAAA4T,KAAAmM,EAAA3c,MAAAoR,cAAAD,MAAAwL,EAAA3c,MAAAqR,WAAAtT,KAAA4e,EAAA3c,MAAA0V,YACAiH,EAAA1B,UnBi3GuBld,EAAKqT,gBAAkBxU,EAAS4T,OACzCxoB,QAAQQ,OAAOoU,GmB/2G7BsgB,KAAAP,EAAA3c,MAAAoR,cACA2M,MAAAA,EAAAnhB,MAAAA,WACAohB,KAAAA,EAAAA,MAAAA,YAEArB,EAAArpB,oBnBm3GU4pB,MmBj3GVnf,WnBq3GY,IAAK,GmBr3GjB+B,GAAA3O,EAAAuL,EAAA8T,KAAAhpB,EAAAmV,MAAAA,EAAAA,KAAAA,OAAA/L,KnBq3GqB0C,EAAI,EAAGA,EAAI,GAAIA,IACtBkd,EAAO,GAAIjR,MAAKwe,EAAYzqB,EAAG,EAAG,GmBp3GhD5J,EAAA+H,MACA/H,KAAA6zB,EACA7zB,MAAAwW,EAAA8d,EAAAx2B,KAAA6K,QACA7K,SAAAm1B,EAAAtc,YAAAmQ,GnBs3GgB1Q,SAAUtY,KAAK2zB,WAAW3K,IAG9B9mB,GAAM+H,MAAQusB,EAAM,GAAG7sB,MAAQ,IAAM6sB,EAAMA,EAAMnxB,OAAS,GAAGsE,MmBp3GzEgqB,EAAAA,YAAApd,EACArU,EAAAm0B,KAAAA,EAAAG,EAAAjgB,KAAAqT,OACA5pB,KAAA0zB,OAAA2C,GAEAnC,WAAA,SAAAtvB,GACA,MAAAuwB,GAAA3c,OAAAjC,EAAAqT,gBAAAuL,EAAA3c,MAAAoR,enBu3GU+J,WAAY,SAASpd,GmBp3G/B,GAAAkgB,IAAAA,GAAAtB,MAAA3c,EAAAoR,cAAAA,EAAAA,EAAAA,EACA,OAAA1Q,GAAAnB,EAAAod,SAAA3c,EAAAA,UAAAA,EAAAA,SnBu3GU0b,UmBh3GVl0B,SAAA2zB,GnBi3GY,GAAKwB,EAAO3c,MAAZ,CmB52GZ+Z,GAAAA,GAAAV,EAAA6E,MAAAjS,cACArP,EAAAA,GAAAA,MAAAA,EAAAA,MnBg3GgC,MAAhBxQ,EAAIyB,QAAgB6S,EAAQyd,QAAQF,EAAa,GAA6B,KAAhB7xB,EAAIyB,QAAgB6S,EAAQyd,QAAQF,EAAa,GAA6B,KAAhB7xB,EAAIyB,QAAgB6S,EAAQyd,QAAQF,EAAa,GAA6B,KAAhB7xB,EAAIyB,SAAgB6S,EAAQyd,QAAQF,EAAa,GAC1Oz2B,KAAK2zB,WAAWza,IAAUic,EAAO1wB,OAAOyU,GAAS,MoB/iIlE1Y,QAIAZ,MAAAA,EAAAA,QAAAA,MAAAA,UAAAA,MAAAA,KAAAA,EAAAA,EAAAA,SAAAA,EACA+b,SAAAvG,QpBojIE5U,QoB/iIFZ,OAAAA,4BAAAA,SAAAA,UAAAA,WpBgjII,GAAIA,GAAWI,KAAKJ,UAClB+b,YAAa,SoB5iInBzU,YAAA,QpB+iIIlH,MoB5iIJsH,KAAA,WACAC,OACAtH,SAAAL,MpB+iIKsH,UoB5iIL3E,kBAAA6Q,WpB6iII,OACE9L,SoB5iINkb,IpB6iIMjb,QoB5iINib,UpB6iIMviB,QoB5iINuiB,SAAApjB,EAAAoJ,GpB6iIQpJ,EAAQiI,KAAK,cAAe,WAC5BjI,EAAQuC,WAAW,WACnB,IAAIY,GAAWnD,EAAQ,GAAGgU,iBAAiB,yBoBviInDlM,SAAAzG,QAAA8B,EAAA,SAAAkgB,GAEA7iB,GAAAA,GAAAg3B,QAAAh3B,QAAAA,EACAi3B,GAAAA,KAAAA,cAAA,IAEArU,EAAAnb,KAAA,WAAAA,EAAAmB,QAAA,IAAAga,EAAAnb,KAAA,gBpB0iIKH,UoBriILlI,cAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GpBsiII,GoBniIJA,GAAAk3B,EAAA13B,SACAy3B,EAAAC,oBpBoiII,QACExvB,SoBliINuvB,IpBmiIMtvB,QoBliINwvB,UpBmiIM90B,KAAM,SAAkBC,EAAO9C,EAASiI,EAAMnH,GoBjiIpD,GAAA82B,GAAAA,EACAH,EAAAG,UAAAH,EAAAA,GAAAhvB,SACAmvB,EAAA90B,EAAAmF,EAAA2vB,SAAAA,EpBmiIYD,GAAYv2B,QAAQ8E,UAAU+B,EAAK0vB,YAAa1vB,EAAK0vB,SoB/hIjEE,GAAAA,KAAAF,EAAAA,aACAA,EAAAE,EAAAA,MAAA5vB,EAAA0vB,WpBkiIQ,IoB/hIRC,KAAAjc,QAAAgc,UAAAC,EAAAA,aAAAA,EAAAA,UpBgiIYH,GAAoBhvB,KAAKR,EAAK2vB,coB7hI1C92B,EAAA+I,EAAAA,MAAAC,EAAA8tB,YpBgiIQ,IAAIC,GAAuC,iBAAdF,IAAiD,iBAAfC,EAC3DC,KoB1hIZ/2B,EAAA+E,SAAAiE,KAAA,SAAA6R,GAEA,MAAA0V,GAAAvwB,EAAA4I,IpB4hIU5I,EoB1hIV42B,YAAA5tB,KAAAguB,SAAAzG,GACA7Q,MAAAA,SAAAuX,OAAAA,EAAAxb,MAKAvc,EAAA0xB,QAAAsG,WACAl1B,GAAAA,KAAAhC,EAAA4I,UpByhIU7E,GoBvhIV,WACA/D,IAAAkF,EAAAA,GAAAA,QAAAwa,GpBwhIYA,EAAcuX,YAAYn4B,EAAQ2c,YAAa8U,MAGnDrxB,EAAQ0xB,KAAK9xB,EAAQo4B,YAAa,WAChCl1B,EAAMid,OAAO,WACN2X,GoBjhIjB5vB,EAAA9B,eAAAwa,EAAAwP,SAAA,WAGA9nB,EAAArC,mBpBshIOiC,UoBjhIP3E,eAAA,WpBkhII,OACE+E,SoBjhIN9G,IpBkhIM+G,QoBjhIN/G,UpBkhIMP,QAAS,SAAkBb,EAASiI,GAClCjI,EAAQiI,KAAK,cAAe,WAC5BjI,EAAQuC,WAAW,WoB5gI3BuF,IAAAA,GAAA9H,EAAA,GAAAgU,iBAAA,sBAEAxT,SAAAA,QAAAg3B,EAAAh3B,SAAAA,GACAi3B,QAAAA,QAAAA,GAAAxvB,KAAA,WAAA,IAEA7G,QAAApB,QAAAqjB,GAAApb,KAAA,WAAAA,EAAAmB,epB+gIKtB,UoB1gILlI,WAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GpB2gII,GoBxgIJA,GAAAk3B,EAAA13B,SACAy3B,EAAAC,oBpBygII,QACExvB,SoBvgINqM,IpBwgIMpM,QoBvgIN,UpBwgIMtF,KoBvgINvB,SAAA8S,EAAA6jB,EAAAA,EAAAA,GpBwgIQ,GoBpgIRn3B,GpBogIYlB,EoBvgIZY,EACAc,EAAA22B,UAAAA,EAAAA,GAAAA,SpBwgIYzX,EAAgBkX,EAAU13B,EAAQmS,SAAWnS,CAEjDiI,GAAKsM,SAAS,QAAS,SAAS0jB,GoBlgIxC32B,EAFAuE,iBAAAA,IAAA4xB,EAAAhvB,KAAAwvB,GAEA5G,EAAAjwB,MAAAA,GAEAs2B,EpBsgIU52B,EAAW+E,YoBhgIrB7F,EAAA0xB,QAAAsG,WACAl1B,GAAAA,GAAA1B,QAAAgF,OAAAtF,EAAA4I,WAAApI,EpBmgIUuD,GoBjgIV/D,WACAA,IAAA+E,EAAAA,GAAAA,QAAAA,GpBkgIY2a,EAAcuX,YAAYn4B,EAAQ2c,YAAa8U,MAGnDrxB,EAAQ0xB,KAAK9xB,EAAQo4B,YAAa,WAChCl1B,EAAMid,OAAO,WqBvqIvB1f,EAAA2F,cAAA1E,GAIAd,EAAAI,mBrB2qIEQ,QqBrqIFgB,OAAAA,wBAAA,yBAAAwB,SAAA,SAAA,WrBsqII,GqBrqIJC,GAAAjD,KAAAJ,UACAR,UAAA,0BACAqkB,YAAA,QACAvgB,YAAA,QACAtB,UAAA,QACA4E,YAAA,uBrBsqIMhF,iBAAiB,EqBnqIvBxB,WAAA0D,EAEAtE,QAAAk4B,KrBoqIM7T,UqBlqIN8T,ErBmqIMr0B,UqBhqINlE,ErBiqIM4C,MqB/pIN21B,ErBgqIM/wB,MqB9pIN,ErBgqIIxG,MqB5pIJ0D,MAAA4zB,SAAAA,SAAAA,GrB6pIM,QAASA,GAAalzB,GqBvpI5B8C,GAAAA,MAEAlI,EAAAwB,QAAAQ,UAAApB,EAAAwE,EAEAlC,OADAoF,GAAA2c,EAAAjlB,GrB0pIM,MqBtpINA,OrBwpIKkI,UqBxpIL9H,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GrBypII,OACEkI,SAAU,MACVpF,OqB1pIN1B,ErB2pIMyB,KqB1pIN,SAAAqD,EAAAzE,EAAA7B,EAAA6B,GrB2pIQ,GAAI7B,IqBvpIZkD,MAAAsF,EACAhH,QAAAC,EACA+F,MAAAhG,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,kBAAAI,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,aAAAA,SAAAA,GACA4G,QAAAnC,UAAAzE,EAAA6G,MAAAC,EAAAA,GAAA9G,EAAA+G,KrBwpIQ,IqBtpIR5I,GAAAkD,erBupIQ1B,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQ8E,UAAU+B,EAAKxG,KAAS2G,EAAiBK,KAAKR,EAAKxG,MAAO7B,EAAQ6B,IAAO,KAEvFL,QqBppIR6G,SAAA,eAAA,SAAA,eAAA,UAAA,SAAAxG,GrBqpIU,GqBppIVwG,GAAAsM,KAAA9S,EAAA6G,OAAAe,GAAAA,cAAAC,EAAAA,MAAAA,EACAxG,SAAArB,UAAA4P,EAAAA,MrBqpIYzR,EAAQ6B,GAAOqB,EAAMsR,MAAMnM,EAAKI,OqB/oI5CjH,QAAA6G,SAAA,QAAA,WAAA,SAAAxG,GACAqB,EAAAqG,IACAlB,EAAA7G,SAAAkC,EAAAA,SAAA+F,EAAAC,GACAlI,EAAAA,GAAAQ,EAAAkB,YAAAuG,OrBspIYpB,EqBlpIZmwB,SrBmpIUt1B,EAAMqG,OAAOlB,EAAKmwB,QAAS,SAAS/uB,EAAUC,GqB/oIxD+uB,QAAAF,SAAAv4B,GAGAI,QAAAiI,OAAAtE,EAAA0F,GAIAgvB,EAAAA,QAAA7tB,IAEA6tB,ErB8oIQ,IAAIA,GAAQF,EAAOv4B,EACnBI,GAAQmM,GAAGlE,EAAKtE,SAAW,QAAS00B,EAAMhsB,QAC1CvJ,EAAM2H,IAAI,WAAY,WsB9uI9BpK,GAAAg4B,EAAA7tB,UAIAhK,EAAAI,KACAH,EAAA,YtBivIEW,QsB5uIFyC,OAAA,wBAAA,yBAAAD,SAAA,SAAA,WtB6uII,GsB5uIJ5D,GAAAY,KAAAJ,UACA6jB,UAAA,UACAvgB,YAAA,QACAsD,YAAA,QAEAkxB,UAAA,KACAxtB,YAAA,uBACAytB,WAAAA,EtB4uIMv4B,QAAS,KsBzuIfY,UAAA0D,EAEAR,UAAA00B,EtB0uIMpxB,MsBxuINqxB,EtByuIMH,UsBtuIN14B,EtBuuIMkL,MsBruIN2tB,EtBsuIMF,asBnuINrzB,EtBquIItE,MAAK0D,MsBnuITY,SAAA4F,WAAAA,SAAAA,EAAAA,GtBouIM,QAAS0tB,GAAaxzB,GsBhuI5B,GAAAoC,MACAxH,EAAA04B,QAAA12B,UAAApB,EAAAwE,EtBkuIQyzB,GsBjuIRrxB,EAAAxH,GtBkuIQ64B,EsBjuIRrxB,OAAAA,cAAAA,EAAAA,YACAtC,EAAAA,OtBkuIU2zB,EsBjuIVA,OAAAlxB,KAAAA,EAAAA,KtBmuIQ,IAAIH,GAAOqxB,EAAOrxB,IsBhtI1BtE,OtBitIYlD,GAAQ04B,WsB/tIpBG,EAAAA,KAAAA,WtBiuIYrxB,IsB7tIZtC,EAAA0zB,WtB+tIcC,EAAOlxB,QsBztIrB,IAAA3H,EAAA04B,YAIAG,EtB2tIM,MsBvtIN74B,OtBytIKkI,UsBztIL9H,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GtB0tII,OACEkI,SAAU,MACVpF,OsB3tIN1B,EtB4tIMyB,KsB3tIN,SAAAqD,EAAAzE,EAAA7B,EAAA6B,GtB4tIQ,GAAI7B,IsBxtIZkD,MAAAsF,EACAhH,QAAAC,EACA+F,MAAAhG,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAAI,WAAAA,OAAAA,YAAAA,YAAAA,WAAAA,eAAAA,SAAAA,GACA4G,QAAAnC,UAAAzE,EAAA6G,MAAAC,EAAAA,GAAA9G,EAAA+G,KtBytIQ,IsBvtIR5I,GAAAkD,etBwtIQ1B,SAAQC,SAAU,WAAY,OAAQ,YAAa,eAAiB,SAASI,GACvEL,QAAQ8E,UAAU+B,EAAKxG,KAAS2G,EAAiBK,KAAKR,EAAKxG,MAAO7B,EAAQ6B,IAAO,KAEvFL,QsBptIRyJ,SAAA,eAAA,SAAA,eAAA,UAAA,SAAApJ,GtBqtIU,GAAI4G,GAAQ,KAAO5G,EAAI6G,OAAO,GAAGC,cAAgB9G,EAAI+G,MAAM,EsBjtIrEpH,SAAAC,UAAA4G,EAAAI,MACAzI,EAAA6B,GAAAqB,EAAAsR,MAAAnM,EAAAI,OtBqtIavF,EAAMwR,eAAe,WACxBxR,EAAM+H,MAAQ,IsB9sIxBzJ,QAAA6G,SAAA,QAAA,UAAA,QAAA,SAAAxG,GACAqB,EAAAqG,IACAlB,EAAA7G,SAAAkC,EAAAA,SAAA+F,EAAAC,GACAlI,EAAAA,GAAAQ,EAAAkB,YAAAuG,OtBotIYpB,EsBhtIZywB,StBitIU51B,EAAMqG,OAAOlB,EAAKywB,QAAS,SAASrvB,EAAUC,GsB7sIxDqvB,QAAAF,SAAA74B,GAGAI,QAAAiI,OAAAtE,EAAA0F,GAIAsvB,EAAAA,QAAAnuB,IAEAmuB,EtB4sIQ,IAAIA,GAAQF,EAAO74B,EACnBI,GAAQmM,GAAGlE,EAAKtE,SAAW,QAASg1B,EAAMtsB,QAC1CvJ,EAAM2H,IAAI,WAAY,WuB10I9BpK,GAAAs4B,EAAAnuB,UAIAhK,EAAAI,KACA8F,EAAA,YvB60IEtF,QuBt0IFggB,OAAAA,wBAAAhT,oCAAAE,oCAAAA,SAAAA,SAAAA,WvBu0II,GuBt0IJ9N,GAAA0gB,KAAA9f,UAEAsF,UAAAkyB,OvBs0IMC,cuBp0INC,EvBq0IMC,UuBl0INn5B,EvBo0IIgB,MuBh0IJ0D,MAAA00B,UAAA,WAAA,aAAA,SAAAt0B,EAAAyc,EAAArT,GvBm0IM,QuBh0INmrB,GAAAA,EAAAj0B,GvBw7IQ,QuBpxIRk0B,GAAAC,EAAAzqB,EAAAd,GvBqxIU,GuBpxIV/G,GAAAuyB,IvBqxIcC,EAAeC,GuBnxI7B,OAAAzyB,IAAAH,EvBqxImB,MuBlxInB0yB,OAAAA,EACApf,EAAAmf,GAAAz0B,EAAAA,IAAA60B,SAAAvf,SvBoxIsC,OAAjBwf,GAAyB9qB,EAASd,IAAM6rB,EAAgBC,GAAmBL,EAAeG,EuBjxI/GF,SvBoxIiB,SuB/wIjB,QAAAR,KvBkxIU,MAAO9e,GAAS,KAAOtV,EAAUA,EAAQ60B,YAAcvf,EAAS,GAAGnT,UAErE,QAASyyB,KuB1wIjBxxB,MAAAkS,GAAA,KAAAtV,EAAAA,EAAA0J,SAAAE,KAAA+qB,aAAA30B,EAAAI,GAAAA,aA5LA,GAAA4B,MACA8yB,EAAAA,QAAA53B,UAAApB,EAAAwE,GACA20B,EAAA/5B,EAAA8K,OACAkvB,EAAA,+BAEAznB,GAAAnS,EAEAJ,EAAAmoB,EACAkR,EAAAlR,EACArhB,EAAAgG,EvB+zIY8sB,EuB9zIZrnB,EvB+zIYwnB,EAAU,KACVC,EuB9zIZ,KACAznB,EAAA/Q,EAAApB,QvB+zIQ,IAAIJ,EAAQmoB,aACV,GAAInoB,EAAQmoB,aAAarT,MAAM,SuB5zIzCokB,IAAAjnB,GAAAA,GAAA,EAAAnF,EAAA,EAAA9M,EAAAmoB,aAAA,EAAArb,IAEA9L,EAAAi5B,EAAAA,aAKA7f,GAAA7N,QAAAnM,QAAAuiB,EAAAA,aAwKApa,OvBqpIQ2wB,GuBvzIRvW,KAAAA,WACA3hB,KAAAyhB,gBvBwzIU4W,EAAmBnrB,EAAWC,OAAO/N,EAAQ,IAAI4N,IAAM8rB,EuBpzIjEZ,EAAAtuB,EAAAuuB,WAAA/4B,EAAA,GAAAwoB,MAAA9a,MAGAsM,EAAAvN,GAAAA,SAAA7L,KAAAA,eACAoZ,EAAAvN,GAAAA,QAAA7L,KAAAA,4BACAsgB,EAAAzU,GAAAA,SAAA7L,KAAAA,oBvBozIUA,KAAK2hB,gBuBhzIfuW,KAAAzW,8BvBmzIQyW,EAAOtuB,QAAU,WuB3yIzBsuB,EAAAvW,IAAAA,SAAA3hB,KAAA2hB,eAGAvI,EAAAnT,IAAAA,QAAAuyB,KAAAA,4BACAlY,EAAAxS,IAAAA,SAAAZ,KAAAC,qBvB4yIQ+qB,EuBxyIRgB,2BAAAF,WAGAlX,WAAAiX,EAAAG,cAAA,IvBwyIQhB,EuBryIRgB,cAAA,WvBsyIU,GuBryIVF,GAAAR,IACA1qB,EAAAqqB,EAAAhrB,OAAA/N,EAAA,IACAA,EAAA8N,EAAAH,OAAA3N,EAAA,IvBsyIc85B,EAAQZ,EAAsBU,EAAOlrB,EAAU+qB,EuBpyI7DE,KAAAd,IvBsyIUc,EuBryIV35B,EACAmP,QAAAnP,GvBsyIY45B,EAAQ,KACJb,GuBpyIhB/4B,EAAAJ,IAAAm6B,QAAAA,IvBuyIgBn6B,EuBryIhBi5B,eAGAe,EAAAlrB,IAAAA,WAAA7H,EAAAA,aAAAA,GAAAA,YvBoyIc7G,EAAQmP,IAAI,MAAO,MuBjyIjC,WAAAnP,GAEA45B,EvBkyIgBh6B,EAAQm6B,cuBlyIxB,EAAAlB,EAAAA,aAEA1pB,EAAAvB,IAAAhO,EvBqyIgBm5B,GuBlyIhBa,EAAAzqB,IAAA,QAAA,IAEAnP,EAAAmP,evBoyIcnP,EAAQmP,IAAI,WAAYvP,EAAQmoB,aAAe,GAAK,YuBlyIlE/nB,EAAAJ,IAAAi5B,MAAAA,EAAA9Q,aAAA,GAAA3G,EAAA,GAAA7R,aAAAiqB,EAAAC,EAAAR,EAAA,SvBsyIYW,EAAQ,KACJb,GuBhyIhB/4B,EAAA0T,IAAAA,QAAAslB,EAAAvmB,GAAA/C,YAAAoqB,MAIAE,EAAAA,eACAlB,EAAAe,IAAAA,WAAAA,SACAf,EAAAvW,IAAAA,MAAAA,EAAAA,QAIAuW,EAAAe,YAAAA,GAAApnB,SAAA,SAAA,WAAAqnB,EAAA,IAAAA,EAAA,OvBgyIQhB,EuB9xIRmB,UAAAj6B,WAEA84B,EAAAl5B,gBvB8xIUk5B,EuB7xIV94B,iBvB+xIQ84B,EAAOoB,mBAAqB/Y,EAAS2X,EAAOkB,UAAW,IACvDlB,EuB5xIRl5B,cAAA8G,WvB6xIU,GuB5xIVyzB,GAAAzzB,EAAA,GAAA8hB,MAAA9Z,SACA9O,EAAA8G,EAAA,GAAA8hB,MAAA5a,GvB6xIchO,GAAQi5B,euB3xItB74B,EAAAJ,IAAA8G,WAAAgO,EAAAqT,aAAA,GAAA,YvB6xIY/nB,EuB5xIZ05B,IAAAA,MAAAA,KvB8xIc95B,EuB5xId8G,YACA,SvB4xIgB9G,EuB5xIhB8G,YvB6xIc9G,EuB5xId8G,UAAAoH,MvB8xIgBlO,EuB5xIhB8G,UAAAgO,MAAA,cACAhO,EAAA,GAAA9G,EAAA8G,UvB8xIgBA,EADE9G,EAAQmoB,aACEja,EAAWC,OAAOoE,EAAO,IAAIvE,IAA0B,EAApBhO,EAAQ8G,UuBzxIvEqhB,EAAAA,OAAAnoB,EAAA45B,IAAAA,IAAA9kB,EAAAvF,IAAAnP,EAAA,GAAA,aAAA,GAAA,EAAAJ,EAAA8G,WAIA8yB,EAAAA,EAAAA,EAAA55B,WAKAA,EAAAi5B,eAEA74B,EADAA,EAAA+nB,cAAAoS,EAAAA,aAAAA,MAAAA,aACAb,KAAAW,EAAAA,OAAAA,EAAAA,IAAAA,IAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,aAAAA,EvB0xIoD,EAAvBr6B,EAAQ45B,cuBlxIrCH,EAAAA,eAEAr5B,EAAA6G,IAAAA,WAAAH,GACA1G,EAAAmP,IAAA,MAAA8qB,KA+BA/xB,EAAAA,OACA4wB,EvB6nIM,GuBh0IN1X,GAAA2X,QAAA/4B,QAAA0E,EAAA0J,SAAAE,MACA4S,EAAAwY,QAAAA,QAAAh1B,EvB88IM,OuBzwIN9E,OvB2wIKkI,UuB3wIL4C,WAAA0vB,SAAAA,UAAA9yB,WAAAlG,SAAApB,EAAA0E,EAAAA,GvB4wII,OACEwD,SuB5wIN7G,MvB6wIM8G,QuB5wIN/G,kBvB6wIMyB,KuB5wIN,SAAApB,EAAAA,EAAAA,EAAAA,GvB6wIQ,GuB5wIR7B,IvB6wIUkD,MuB5wIVA,EvB6wIU4H,OuB5wIV9K,EAAAy6B,EAAAA,SAAAA,QAAAA,QAAAA,GvB8wIQj5B,SAAQC,SAAU,YAAa,eAAgB,eAAgB,cAAe,eAAgB,YAAc,SAASI,GuB1wI7H,GAAAq4B,QAAAA,UAAAA,EAAAA,IAAAA,CACAh1B,GAAAA,GAAAmD,EAAAxG,EAAAq4B,SAAAhB,KAAA94B,KAAAJ,GAAAA,GvB6wIgB,SAAS6I,KAAK4xB,KAASA,GAAS,GuB5wIhDv3B,EAAArB,GAAA44B,IvBgxIQ,IuB7wIRP,EvB8wIQh1B,GAAS,WACPg1B,EAAQhB,EAAO94B,EAASJ,KuBvwIlCkI,EAAAA,IAAA,WAAA,WACAgyB,GAAAA,EAAAtvB,UACA1J,EAAA,KACAF,EAAA0G,YCzPAlG,UAAA,gBAAA,WxB6rMG+mB,OArrDGrnB,YAAc,WAAY,SAASwG,GACjC1G,KAAK0G,SAAWA,OAItBlG,QAAQf,OAAO,kBAAoB,uBAAwB,uBAAwB,uBAAwB,wBAAyB,wBAAyB,4BAA6B,4BAA6B,wBAAyB,yBAA0B,yBAA0B,0BAA2B,2BAA4B,2BAA4B,uBAAwB,qBAAsB,6BACpa8nB,OAAQ/Z","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          // Navigate with keyboard\r\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          var cancel = false;\r\n\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            cancel = options.onBeforeShow($tooltip);\r\n          }\r\n\r\n          if(cancel) {\r\n            return;\r\n          }\r\n\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          var cancel = false;\r\n\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            cancel = options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          if(cancel) {\r\n            return;\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            if (tipElement !== null) {\r\n              tipElement.on('click', stopEventPropagation);\r\n            }\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          self.$setActive(index);\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        controller.$viewChangeListeners.push(function () {\r\n          // console.warn('controller.$viewChangeListeners', 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          controller.$render();\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          select.$updateActiveIndex();\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null,\r\n      zIndex: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        if (options.zIndex) {\r\n          dialogBaseZindex = parseInt(options.zIndex, 10);\r\n          backdropBaseZindex = dialogBaseZindex - 10;\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        $modal.returnFocus = function () {\r\n\r\n        };\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function (key) {\r\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\r\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($modal);\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          // Add assistive attributes to the body to prevent the screen reader from reading it with the virtual keys\r\n          // Only do this if the backdrop option is set.\r\n          if (options.backdrop) {\r\n            bodyElement.attr('aria-hidden', 'true');\r\n          }\r\n\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n          $modal.focus();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'false');\r\n          modalElement[0].focus();\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'true');\r\n\r\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of backdrops\r\n            backdropCount--;\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($modal);\r\n          }\r\n          if (findElement('.modal').length <= 0) {\r\n            bodyElement.removeClass(options.prefixClass + '-open');\r\n            if (options.backdrop) {\r\n              bodyElement.attr('aria-hidden', 'false');\r\n            }\r\n          }\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        function findFocusableElements () {\r\n          // Add all elements we want to include in our selection\r\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\r\n          if (document.activeElement) {\r\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\r\n              function (element) {\r\n                // Check for visibility while always include the current activeElement\r\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\r\n              });\r\n\r\n            return focusable;\r\n          }\r\n        }\r\n\r\n        function findNextFocusableElement (inReverse) {\r\n          if (document.activeElement) {\r\n            var focusable = findFocusableElements();\r\n            if (focusable === undefined) return;\r\n            if (inReverse) {\r\n              focusable = Array.prototype.reverse.call(focusable);\r\n            }\r\n\r\n            var index = focusable.indexOf(document.activeElement);\r\n            return focusable[index + 1];\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          // Escape was pressed on an open modal. Hide it.\r\n          if (evt.which === 27 && $modal.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $modal.$onKeyDown = function (evt) {\r\n          if (options.keyboard) {\r\n            if (evt.keyCode === 9) {\r\n\r\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\r\n              if (nextFocusable === undefined) {\r\n                if (evt.preventDefault) evt.preventDefault();\r\n                if (evt.stopPropagation) evt.stopPropagation();\r\n\r\n                var focusable = findFocusableElements();\r\n                if (evt.shiftKey) {\r\n                  focusable[focusable.length - 1].focus();\r\n                } else {\r\n                  focusable[0].focus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n            modalElement.on('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n            modalElement.off('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        if (options.keyboard) {\r\n          modal.returnFocus = function () {\r\n            element[0].focus();\r\n          };\r\n        }\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\raf.js\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */\r\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if (/(9)/.test(evt.keyCode)) {\r\n            $dropdown.hide();\r\n            return;\r\n          }\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if (!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function (el, i) {\r\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if (evt.keyCode === 38 && index > 0) index--;\r\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if (angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n            bodyEl.on('click', onBodyClick);\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function () {\r\n          if (!$dropdown.$isShown) return;\r\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          hide();\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {\r\n            scope: scope\r\n          };\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // bind functions from the attrs to the show and hide events\r\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n            if (angular.isDefined(attr[bsKey])) {\r\n              options[key] = scope.$eval(attr[bsKey]);\r\n            }\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        var actionEventHandler = function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        };\r\n\r\n        element.on('click', actionEventHandler);\r\n        element.bind('keydown keypress', function (e) {\r\n          if (e.which === 13) {\r\n            actionEventHandler();\r\n            e.preventDefault();\r\n          } else if (e.which !== 16 && e.which !== 9) {\r\n            e.preventDefault();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function (mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n            } else {\r\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function (blur) {\r\n          if (!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {month: 1},\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n            }\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualTime = picker.$date.getTime();\r\n            var newDate;\r\n\r\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {year: 1},\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n            }\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {year: 12},\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n            }\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n\r\n})(window, document);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          // Navigate with keyboard\r\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */\r\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if (/(9)/.test(evt.keyCode)) {\r\n            $dropdown.hide();\r\n            return;\r\n          }\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if (!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function (el, i) {\r\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if (evt.keyCode === 38 && index > 0) index--;\r\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if (angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n            bodyEl.on('click', onBodyClick);\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function () {\r\n          if (!$dropdown.$isShown) return;\r\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          hide();\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {\r\n            scope: scope\r\n          };\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // bind functions from the attrs to the show and hide events\r\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n            if (angular.isDefined(attr[bsKey])) {\r\n              options[key] = scope.$eval(attr[bsKey]);\r\n            }\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          var cancel = false;\r\n\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            cancel = options.onBeforeShow($tooltip);\r\n          }\r\n\r\n          if(cancel) {\r\n            return;\r\n          }\r\n\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          var cancel = false;\r\n\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            cancel = options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          if(cancel) {\r\n            return;\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            if (tipElement !== null) {\r\n              tipElement.on('click', stopEventPropagation);\r\n            }\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          self.$setActive(index);\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        controller.$viewChangeListeners.push(function () {\r\n          // console.warn('controller.$viewChangeListeners', 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          controller.$render();\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          select.$updateActiveIndex();\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null,\r\n      zIndex: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        if (options.zIndex) {\r\n          dialogBaseZindex = parseInt(options.zIndex, 10);\r\n          backdropBaseZindex = dialogBaseZindex - 10;\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        $modal.returnFocus = function () {\r\n\r\n        };\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function (key) {\r\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\r\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($modal);\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          // Add assistive attributes to the body to prevent the screen reader from reading it with the virtual keys\r\n          // Only do this if the backdrop option is set.\r\n          if (options.backdrop) {\r\n            bodyElement.attr('aria-hidden', 'true');\r\n          }\r\n\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n          $modal.focus();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'false');\r\n          modalElement[0].focus();\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'true');\r\n\r\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of backdrops\r\n            backdropCount--;\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($modal);\r\n          }\r\n          if (findElement('.modal').length <= 0) {\r\n            bodyElement.removeClass(options.prefixClass + '-open');\r\n            if (options.backdrop) {\r\n              bodyElement.attr('aria-hidden', 'false');\r\n            }\r\n          }\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        function findFocusableElements () {\r\n          // Add all elements we want to include in our selection\r\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\r\n          if (document.activeElement) {\r\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\r\n              function (element) {\r\n                // Check for visibility while always include the current activeElement\r\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\r\n              });\r\n\r\n            return focusable;\r\n          }\r\n        }\r\n\r\n        function findNextFocusableElement (inReverse) {\r\n          if (document.activeElement) {\r\n            var focusable = findFocusableElements();\r\n            if (focusable === undefined) return;\r\n            if (inReverse) {\r\n              focusable = Array.prototype.reverse.call(focusable);\r\n            }\r\n\r\n            var index = focusable.indexOf(document.activeElement);\r\n            return focusable[index + 1];\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          // Escape was pressed on an open modal. Hide it.\r\n          if (evt.which === 27 && $modal.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $modal.$onKeyDown = function (evt) {\r\n          if (options.keyboard) {\r\n            if (evt.keyCode === 9) {\r\n\r\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\r\n              if (nextFocusable === undefined) {\r\n                if (evt.preventDefault) evt.preventDefault();\r\n                if (evt.stopPropagation) evt.stopPropagation();\r\n\r\n                var focusable = findFocusableElements();\r\n                if (evt.shiftKey) {\r\n                  focusable[focusable.length - 1].focus();\r\n                } else {\r\n                  focusable[0].focus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n            modalElement.on('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n            modalElement.off('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        if (options.keyboard) {\r\n          modal.returnFocus = function () {\r\n            element[0].focus();\r\n          };\r\n        }\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        var actionEventHandler = function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        };\r\n\r\n        element.on('click', actionEventHandler);\r\n        element.bind('keydown keypress', function (e) {\r\n          if (e.which === 13) {\r\n            actionEventHandler();\r\n            e.preventDefault();\r\n          } else if (e.which !== 16 && e.which !== 9) {\r\n            e.preventDefault();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function (mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n            } else {\r\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function (blur) {\r\n          if (!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {month: 1},\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n            }\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualTime = picker.$date.getTime();\r\n            var newDate;\r\n\r\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {year: 1},\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n            }\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {year: 12},\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n            }\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n","\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n"]}