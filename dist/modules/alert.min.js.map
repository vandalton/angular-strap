{"version":3,"sources":["modules/alert.js"],"names":["angular","container","provider","element","this","defaults","backdrop","keyboard","show","duration","type","dismissable","$get","AlertFactory","$alert","options","$scope","config","extend","$timeout","hide","scope","directive","restrict","link","isDefined","key","falseValueRegExp","forEach","bsKey","charAt","toUpperCase","slice","attr","test","title","$eval","hasOwnProperty","$watch","isObject","newValue","oldValue","bsAlert","alert","trigger","destroy","on","toggle","$on"],"mappings":"AAOA,YAEAA,SAKMC,OAAW,wBAAA,yBAAAC,SAAA,SAAA,WAJf,GAKIC,GAASC,KAAAC,UACTC,UAAU,UACVC,YAAU,QACVC,YAAM,QAENC,UAAU,KACVC,YAAM,uBACNC,WAAAA,EALFR,QAAS,KAQTC,UAAKQ,EAEHL,UAASM,EAPXL,MASQM,EARRL,UAWQM,EAVRL,MAYII,EAXJH,aAcWK,EAZbZ,MAAKQ,MAcUI,SAAON,WAAeA,SAAAA,EAAAA,GAbnC,QAASG,GAAaI,GAiBlB,GAAIT,MACAO,EAAQN,QAAUS,UAAAb,EAAAY,EAfxBH,GAgBWN,EAAOO,GAflBD,EAgBMN,OAAAA,cAAAA,EAAAA,YACAW,EAAAA,OAfJL,EAgBMA,OAAOM,KAAAA,EAAAA,KAdf,IAAIZ,GAAOM,EAAON,IAiClBa,OAhCIN,GAAQN,WAkBVK,EAAOA,KAAAA,WAhBLN,IAoBJW,EAAON,WAlBDC,EAAOM,QAwBN,IAAAL,EAAAN,YAIAK,EAtBT,MA0BQC,OAxBTO,UAwBkCnB,WAASA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GAvB5C,OACEoB,SAAU,MACVF,OAsBIrB,EArBJwB,KAsBM,SAAYC,EAAeC,EAAOX,EAAQW,GArB9C,GAAIX,IAyBFM,MAAIM,EACJ3B,QAAQ4B,EACNpB,MAAIR,EAINA,SAAQ4B,SAAS,WAAA,cAA0B,aAAA,eAA2B,YAAUF,WAAAA,OAAAA,YAAAA,YAAAA,WAAAA,eAAAA,SAAAA,GAC1EG,QAAQJ,UAAOC,EAAII,MAAUC,EAAAA,GAAgBL,EAAIM,KAxBzD,IA0BMjB,GAAeM,eAzBrBrB,SAAQ4B,SAAU,WAAY,OAAQ,YAAa,eAAiB,SAASF,GACvE1B,QAAQyB,UAAUQ,EAAKP,KAASC,EAAiBO,KAAKD,EAAKP,MAAOX,EAAQW,IAAO,KAEvF1B,QA6BUmC,SAAQ,eAAA,SAAA,eAAA,UAAA,SAAAT,GA5BhB,GAAIG,GAAQ,KAAOH,EAAII,OAAO,GAAGC,cAAgBL,EAAIM,MAAM,EAgC3DhC,SAAQ4B,UAASK,EAASJ,MACxBd,EAASW,GAAML,EAAAe,MAAAH,EAAAJ,OA5BdR,EAAMgB,eAAe,WACxBhB,EAAMc,MAAQ,IAmCdnC,QAAIiC,SAAc,QAAA,UAAA,QAAA,SAAAP,GAChBL,EAAMiB,IACJL,EAAIjC,SAAQuC,EAAAA,SAASC,EAAWC,GAC9BzC,EAAAA,GAAQkB,EAAOG,YAAOmB,OA7B1BP,EAiCGS,SAhCLrB,EAAMiB,OAAOL,EAAKS,QAAS,SAASF,EAAUC,GAoC1CE,QAAQ7B,SAAOC,GAGnBZ,QAAW8B,OAAKW,EAAWJ,GAIrBG,EAAAA,QAAaE,IAEjBF,EArCJ,IAAIA,GAAQ7B,EAAOC,EACnBZ,GAAQ2C,GAAGb,EAAKW,SAAW,QAASD,EAAMI,QAC1C1B,EAAM2B,IAAI,WAAY,WAChBL,GAAOA,EAAME,UACjB9B,EAAU,KACV4B,EAAQ","file":"alert.min.js","sourcesContent":["'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"]}